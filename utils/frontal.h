/*------------------------------------------------------------------------------
 *
 * Copyright (c) FotoNation.
 * All rights reserved. Confidential.
 *
 * This file was automatically generated by the ExportHeader script.
 *   Version: 23.1.0
 *
 * It should not be modified by hand.
 * Generated at: 16:59:57  20:07:2018
 *
 *----------------------------------------------------------------------------*/
/**
 *  @file Frontal_MIDDLE.h
 */
/**
 *  @defgroup Templates_Frontal_MIDDLE Frontal_MIDDLE
 *  @ingroup Templates
 *  @brief Templates for face class Frontal_MIDDLE
 */

#ifndef Frontal_MIDDLE_H_INCLUDED
#define Frontal_MIDDLE_H_INCLUDED

#include "ClassesDefs.h"

/**
 *  @addtogroup Templates_Frontal_MIDDLE
 *  @{
 */

static const UINT8 Frontal_MIDDLE_FCheck_Triangles[] = {
     83,  60,  82,  15,  32,  14,  66,  64,  16,  45,  51,  49,  39,  29,  37,   2,  11,   1,
      8,   0,  13,  56,   9,  32,  13,  11,  14,  35,  31,  20,  69,  70,   0,  31,  26,  27,
     30,  32,  15,  33,  29,  24,  34,  32,  30,  29,  34,  24,  85,  58,  57,  48,  51,  39,
     56,  32,  58,  12,  11,   2,  48,  52,  50,  45,  58,  32,  40,  41,  52,  59,  83,  55,
     61,  38,  47,  61,  62,  80,  22,  35,  20,  78,  67,  77,  36,  63,  41,  36,  40,  35,
     44,  55,  57,  39,  37,  53,  22,  20,  18,  27,  26,  12,  64,  35,  16,  68,  64,  76,
      0,   1,  13,   9,   8,  13,   1,  11,  13,  10,   3,   8,  88,  69,   3,   4,   6,  71,
     69,   0,   3,  21,  28,   7,  10,   8,   9,   3,   0,   8,  70,   1,   0,  21,  17,  20,
     70,   2,   1,  70,   7,   2,   9,  14,  32,   9,  13,  14,  30,  15,  12,  14,  11,  15,
     30,  12,  26,  15,  11,  12,  25,  30,  26,  24,  34,  30,  88,   3,  87,  86,  54,  56,
     87,   3,  54,  86,  56,  58,  54,   9,  56,  54,  10,   9,  54,   3,  10,  87,  54,  86,
     86,  58,  85,  44,  57,  58,  55,  85,  57,  49,  38,  43,  83,  84,  55,  85,  55,  84,
     61,  81,  82,  60,  83,  59,  82,  60,  61,  59,  43,  60,  45,  43,  44,  59,  55,  44,
     48,  50,  49,  38,  60,  43,  50,  38,  49,  50,  52,  47,  51,  48,  49,  52,  41,  46,
     39,  51,  42,  49,  43,  45,  34,  45,  32,  43,  59,  44,  58,  45,  44,  42,  51,  45,
     34,  42,  45,  34,  29,  42,  31,  33,  24,  39,  42,  29,  40,  33,  35,  37,  29,  33,
     40,  53,  37,  40,  52,  53,  33,  31,  35,  25,  26,  31,  33,  40,  37,  35,  68,  36,
     53,  48,  39,  53,  52,  48,  50,  47,  38,  62,  79,  80,  38,  61,  60,  46,  41,  62,
     47,  46,  61,  47,  52,  46,  46,  62,  61,  63,  36,  67,  62,  63,  79,  62,  41,  63,
     61,  80,  81,  63,  67,  79,  77,  67,  65,  78,  79,  67,  67,  36,  65,  41,  40,  36,
     65,  68,  76,  65,  36,  68,  75,  64,  66,  68,  35,  64,  65,  76,  77,  64,  75,  76,
     17,  18,  20,  16,  35,  22,  16,  19,  66,   6,  17,   7,  19,   5,  66,   4,  23,  18,
     66,  74,  75,  12,  28,  27,  12,   2,  28,  21,  27,  28,  21,  31,  27,  24,  25,  31,
     24,  30,  25,   2,   7,  28,  20,  31,  21,  18,  17,   6,  17,  21,   7,  23,  16,  22,
      7,  70,  71,   4,  18,   6,  23,  22,  18,  72,   4,  71,   6,   7,  71,  73,   4,  72,
      5,  23,   4,  19,  16,  23,  66,   5,  74,  19,  23,   5,   5,   4,  73,   5,  73,  74
};         /**< Triangulation defined for current face class - @ref FACE_CHECKER::triangles. */

static const INT32 Frontal_MIDDLE_FCheck_coordinates[] = {
     26,  17,  31,  17,  35,  18,  22,  20,
     56,  17,  60,  20,  51,  17,  47,  18,
     26,  23,  26,  24,  25,  24,  30,  23,
     34,  24,  28,  23,  28,  24,  30,  24,
     56,  24,  52,  23,  54,  23,  57,  24,
     52,  24,  48,  24,  54,  24,  56,  23,
     40,  37,  40,  35,  40,  32,  40,  29,
     40,  24,  40,  42,  36,  37,  46,  37,
     34,  38,  45,  40,  37,  40,  48,  38,
     51,  50,  45,  47,  37,  54,  40,  47,
     48,  48,  49,  52,  37,  47,  33,  52,
     31,  50,  33,  48,  45,  54,  42,  54,
     40,  50,  37,  50,  40,  51,  37,  49,
     45,  50,  45,  49,  17,  32,  22,  55,
     18,  37,  20,  50,  18,  44,  26,  59,
     30,  62,  42,  66,  52,  62,  56,  59,
     64,  37,  62,  50,  65,  32,  60,  55,
     63,  44,  15,   0,  24,   0,  58,   0,
     66,   0,  73,   5,  81,  25,  80,  34,
     78,  46,  76,  56,  73,  64,  66,  71,
     59,  76,  42,  83,  22,  76,  15,  71,
      8,  64,   5,  56,   2,  46,   0,  25,
      8,   5
};         /**< Average coordinates for current class feature points - @ref FACE_CHECKER::meanCoordinates. */

static const UINT8 Frontal_MIDDLE_FCheck_borderElements[] = {
      0,   1,   6,   4,   5,  66,  64,  68,  65,  67,  63,  62,  61,  60,  59,  55,  57,  58,  54,   3
};         /**< Indexes of feature points that are part of the border used for face warping - @ref FACE_CHECKER::borderElements. */

static const INT16 Frontal_MIDDLE_SVM_HOG_360_fCheck[] = {
      -3,   -4,   -5,    9,   13,    7,    3,   -3,   -3,   -6,   -5,    6,    7,   15,    1,   -3,   -3,   -6,   -2,    3,    4,   17,    3,   -3,   -3,   -4,    2,   11,    5,    4,    4,   -1,   -3,    6,   11,    0,   -1,   14,    4,   -3,   -3,    9,    1,   -3,   -1,   30,    2,   -4,   -3,   -4,    3,   26,    1,   -2,   -1,    0,   -3,    2,    7,    1,   -2,   13,    9,   -2,   -1,   11,    1,   -3,   -1,   10,    0,   -3,
      -3,   -6,   -4,    6,    5,   16,    1,   -3,   -3,   -6,    0,    2,    2,   14,    3,   -3,   -3,   -2,    7,   -2,   -3,    6,    0,   -3,   -3,    9,   10,   -2,   -2,   15,    3,   -3,   -3,    6,    2,   -2,    1,   29,    1,   -4,   -3,   -6,   -2,    1,   16,   24,   -4,   -4,   -3,    5,    4,   -2,   -2,   16,    8,   -3,   -1,    9,    0,   -3,    0,    7,   -3,   -3,    2,   -2,   -5,   -2,   12,    5,   -4,   -1,
      -4,   -6,   -2,    1,    3,   27,    4,   -4,   -3,   -3,    4,   -2,    0,   14,    0,   -3,   -3,    3,    5,   -4,   -5,    0,   -1,   -4,   -2,   12,    4,   -3,    0,   22,   -1,   -4,   -3,   -5,   -2,    1,   18,   20,   -5,   -4,   -3,   -4,   -5,   -4,    9,    7,   -2,   -4,   -1,    5,    1,   -2,    1,   10,   -2,   -3,    3,   -2,   -6,   -3,   10,    5,   -4,    1,   -4,   -6,   -7,   -7,   18,    8,    1,   -1,
       1,   -2,   -5,    7,    9,   -1,    3,    3,   -3,   -3,   -1,    7,    9,    6,    6,   -2,   -3,    2,    5,   -1,    1,   23,    6,   -3,    2,   -3,   -4,   13,    3,   -4,   -1,    4,   -3,   -4,    5,   25,    1,   -1,   -1,   -1,   -3,    7,   13,    1,   -2,   10,    5,   -3,    1,   -2,    0,   25,    0,   -4,   -3,    0,    1,   -1,    1,   14,   -1,   -2,   -1,    3,   -1,   -1,   17,   -1,   -3,   10,    6,    0,
       4,   -1,   -7,   -4,   -3,    3,   16,    3,    6,   -3,   -7,   -3,   -3,    2,   15,    6,   10,   -5,   -4,   -2,   -2,    4,    6,   13,   -3,    1,    9,   -3,   -4,    3,   30,   -1,    0,   11,    5,   -3,   -3,    5,   14,   -2,   12,    2,   -4,   -3,   -1,    4,    4,    6,   -3,    0,   12,   -1,   -4,   -1,   10,   -1,    1,    7,    2,   -3,   -2,    9,   13,   -2,   26,    4,   -5,   -2,    0,    0,   -1,    0,
      -1,    5,    2,   -4,   -3,    7,   23,    1,    7,   -1,   -4,   -3,   -1,    6,    6,    9,    8,   -4,   -3,    1,    4,    4,   -1,    8,    1,   13,    7,   -4,   -3,    6,   10,   -2,   25,    6,   -4,   -3,   -1,    0,   -1,    1,   13,   -3,   -3,    2,    5,    0,   -3,    2,   -1,   19,   -1,   -1,    1,    7,   11,   -2,   14,    2,   -2,    1,    3,    0,   -2,   -1,   25,    1,   -2,    1,    1,   -3,   -3,   -1,
      -2,    6,   -2,   -3,   -3,    1,    6,   -2,    3,    0,   -6,   -3,   -3,    4,   14,    2,    6,   -3,   -7,   -4,   -3,    2,   16,    5,    0,   -1,   -7,   -4,   -3,   -4,   25,   15,   -2,    1,    6,   -3,   -4,    1,   29,    1,   -2,   10,    9,   -4,   -4,    3,   16,   -2,   -2,   -6,   -2,    3,   -1,   -5,    8,    6,   -3,    0,   10,   -1,   -3,   -3,    8,    0,   -2,    5,    5,   -3,   -3,    9,   16,   -2,
      -3,    4,    4,   -3,   -4,   -1,   -1,   -6,   -2,    4,   -3,   -4,   -3,    0,   13,    1,    1,   -1,   -7,   -4,   -3,    5,   26,    3,   -4,   -4,   -6,   -4,   -3,   -2,   12,    7,    0,   -2,   -6,   -3,   -3,   -5,   22,   16,   -3,    4,   12,   -3,   -4,   -1,   21,    0,   -5,   -7,   -8,   -3,   -2,   -3,   15,   17,   -3,   -7,   -1,    4,    1,   -5,    6,    4,   -2,    0,    6,   -1,   -3,   -3,   11,    1,
      -2,   -3,    7,   18,    1,    2,    2,   -1,   -3,    9,   13,    1,   -2,    8,    3,   -3,   -2,   17,    4,   -4,   -2,   12,    0,   -3,    0,   -2,    1,   16,   -1,   -1,    2,    3,   -2,   -2,   11,   -1,   -2,   15,    9,    1,   -2,    2,   11,    1,    1,   10,   -2,   -3,    1,    1,    8,    5,   -2,   -3,   -5,   -2,   -3,   -1,   29,    4,   -4,   -3,   -6,   -5,    0,    2,   14,    0,   -4,   -5,   -3,    1,
      -2,   -3,    7,   22,    0,    1,    1,   -1,   -3,    7,   10,    1,   -2,   11,    7,   -3,   -2,   16,    2,   -4,   -1,   10,    0,   -3,    1,   -1,    2,   11,   -1,   -2,    1,    4,   -1,   -2,   20,   -2,   -3,   10,    6,    0,   -2,    2,   17,    2,    1,    7,   -4,   -3,    0,    1,    9,    6,   -1,   -3,   -5,   -4,   -3,   -2,   22,    5,   -4,   -3,   -6,   -6,    0,    0,    7,   -2,   -5,   -4,   -2,    2,
      -2,   -3,    3,   21,    1,    0,    0,    0,   -3,    2,   12,    5,   -1,    9,    6,   -2,   -2,   16,    2,   -5,   -2,   12,    2,   -3,    1,   -1,    1,   17,   -1,   -2,   -2,    1,    0,   -1,   14,   -2,   -3,    6,    7,    3,   -2,    0,   22,    3,    0,   10,   -2,   -4,    0,    1,    4,    9,    1,   -3,   -4,   -4,   -2,   -1,   21,    4,   -4,   -3,   -6,   -6,   -1,   -1,   11,    1,   -4,   -3,   -3,   -2,
      -3,    9,   14,    2,   -2,    8,    3,   -3,   -2,   17,    4,   -4,   -2,   11,    0,   -3,   -1,    0,    1,    0,   10,   13,   -4,   -3,   -2,   -2,   11,   -1,   -2,   15,   10,    1,   -2,    2,   11,    1,    1,   11,   -2,   -3,    4,    1,   -5,   -2,    3,    1,   -4,    4,   -2,   -1,   29,    4,   -4,   -3,   -6,   -5,    0,    2,   14,    0,   -4,   -5,   -3,    1,    3,    0,   -5,   -4,   -5,   -6,   -1,   18,
      -3,   27,    5,   -8,   -2,   18,    1,   -6,    0,    1,    0,   -1,   13,   13,   -8,   -4,   -6,   -9,  -10,   -2,   31,   18,   -3,   -6,   -3,    4,   29,    3,    2,   15,   -6,   -6,    6,    1,  -10,   -4,    3,    0,   -5,   13,   -6,  -10,  -12,   -1,   24,    5,   -1,    1,    2,    3,   11,   -4,   -9,   -7,   -3,    3,    8,    0,  -10,   -7,  -10,  -10,   -2,   28,   -7,   -8,   -9,   10,    6,   -6,   -6,   -6,
      -3,    0,   15,   12,   -1,    4,    2,   -2,   -3,   18,    7,   -4,   -3,   10,    3,   -3,   -1,    9,    4,   -2,    2,   13,   -3,   -3,   -1,   -2,    4,    4,   -2,    5,    8,    4,   -2,    0,   15,    0,    0,   18,    3,   -3,    1,    4,    2,    1,    2,    3,   -4,   -1,    0,    1,   20,    1,   -4,   -3,   -6,   -3,   -3,   -1,   26,    4,   -4,   -4,   -5,   -5,    3,    3,    2,   -3,   -5,   -7,   -1,   12,
      -3,   -1,   12,   13,   -1,    5,    5,   -2,   -3,   15,    4,   -4,   -2,   13,    5,   -3,    0,   10,    2,   -2,    2,    8,   -4,   -3,    1,   -1,    9,    1,   -3,    3,    7,    5,   -2,   -1,   25,    2,   -1,   13,    1,   -4,    1,    3,    4,    1,    1,    1,   -4,    1,   -1,    0,   18,    3,   -4,   -3,   -6,   -5,   -3,   -2,   17,    4,   -4,   -3,   -4,   -5,    5,    1,   -2,   -5,   -6,   -6,    0,   13,
      -6,   10,   18,    2,   -3,   17,   11,   -4,   -3,   25,    3,   -7,   -2,   16,    0,   -6,    0,    1,   -1,   -2,   13,   13,   -8,   -4,   -2,   -3,   32,   -3,   -5,   15,   10,    2,   -2,    3,   26,    4,    1,   12,   -5,   -5,    7,    1,  -10,   -4,    2,   -2,   -5,   13,   -6,   -3,   33,    8,   -7,   -5,  -10,  -11,    1,    1,    9,   -3,   -8,   -7,   -3,    2,    8,    0,  -10,   -7,  -10,  -10,   -2,   27,
      -4,    1,   16,   -2,   -3,    0,   11,   -1,    0,   11,    7,   -3,   -3,    7,   11,   -2,   21,    8,   -3,   -2,    0,    2,    1,    0,    3,   17,    2,   -2,   -3,   -4,    8,    1,   -2,   22,   -2,   -1,    1,    7,   10,   -3,   11,    3,   -1,    1,    4,    1,   -2,   -2,   -2,    7,    0,    0,    2,   -2,   -4,   -5,    4,   23,   -2,   -4,   -6,   -6,   -3,   -4,    5,    9,    1,    0,   -4,   -5,   -2,   -2,
       0,    1,   -2,   -2,   -4,   -7,   21,   12,   -6,    5,   25,   -4,   -5,    0,   14,   -4,    3,   22,   13,   -6,   -5,    6,   11,   -4,   -3,   -9,    2,    8,    6,   -8,    2,    0,    3,   15,    4,   -2,   -5,   -4,   17,    2,   -2,   20,   -4,   -2,    3,   16,   21,   -4,   -7,   -9,   -1,    5,   27,    0,   -9,   -9,    0,   18,    2,    0,    1,   -5,   -8,   -7,    5,   43,   -1,   -4,   -8,  -12,   -5,   -7,
      -2,    3,    9,   -1,   -3,   -4,   13,    2,   -4,    7,   17,   -3,   -3,    3,   10,   -3,   12,   15,    0,   -3,   -2,    3,    4,   -1,    1,    1,    4,    1,   -1,   -5,    4,    2,    0,   15,    0,   -3,   -4,    4,   18,    0,    4,    6,   -2,    0,    5,   10,    5,   -2,   -3,    1,    2,    2,   10,   -1,   -6,   -6,    4,   26,   -1,   -3,   -5,   -6,   -3,   -4,    1,   21,    1,    0,   -3,   -6,   -3,   -4,
      -5,    2,   17,   -2,   -3,    2,   12,   -2,    5,   12,    2,   -3,   -2,    6,    9,   -1,   21,    4,   -3,   -2,    0,    1,    0,    1,    3,   22,    0,   -2,   -4,   -2,   11,    1,   -2,   17,   -1,    0,    3,    8,    7,   -3,   16,    2,   -1,    1,    1,   -2,   -2,   -1,    1,   12,   -1,   -2,   -2,   -3,   -3,   -4,    3,   22,   -1,   -3,   -6,   -6,   -3,   -4,    9,    5,    1,    0,   -4,   -5,   -2,    0,
      -2,   -1,    2,    1,   -3,   -9,   15,    9,   -7,    2,   25,   -3,   -6,    0,   16,   -2,    2,   18,   10,   -6,   -4,   13,   17,   -3,   -3,  -11,    1,    8,   12,   -5,    0,   -1,    5,   25,    4,   -2,   -5,   -6,   13,    2,   -2,   35,   -3,   -1,    2,   11,   15,   -5,   -9,   -9,    0,    8,   26,    0,   -9,  -11,   -4,    9,    1,    1,    2,   -3,   -6,   -9,    7,   34,   -3,   -6,  -11,  -10,   -5,   -7,
      -3,   -8,  -12,   -5,   -4,   -4,   28,   26,   -2,    0,    2,    0,   -4,   -9,   14,    9,   -8,    4,   27,   -4,   -6,    0,   19,   -2,    1,  -12,  -12,   -2,    5,   -5,    8,   22,   -3,  -10,    2,    7,   11,   -6,    1,   -1,    5,   29,    4,   -3,   -6,   -7,   17,    3,   11,   -9,   -9,   -6,   -2,   -6,   -6,    7,   -9,   -9,    0,    8,   28,   -1,   -9,  -11,   -4,   12,    1,    1,    2,   -4,   -6,  -10,
      -3,    1,   10,    0,   -3,   -5,    8,    2,   -5,    4,   15,   -3,   -3,    5,   13,   -2,   13,   13,   -1,   -3,   -2,    5,    5,   -1,    1,    3,    4,    1,    0,   -5,    3,    1,    2,   27,   -1,   -3,   -4,    1,   14,   -1,    1,   11,   -1,    1,    5,    8,    3,   -3,   -5,   -2,    1,    4,   12,    0,   -5,   -7,    3,   17,   -2,   -3,   -5,   -4,   -3,   -4,    3,   19,    0,   -2,   -5,   -6,   -3,   -4,
      -4,    3,   17,   -2,   -3,    0,   12,   -3,    1,   13,    9,   -3,   -3,    4,    8,   -2,   18,    7,   -3,   -2,    0,    2,    2,    1,    2,   10,    3,   -2,   -3,   -3,   11,    2,   -1,   12,   -2,   -1,    1,   10,   15,   -2,   15,    2,   -2,    0,    3,    2,   -1,   -1,    0,   14,    1,    0,    1,   -4,   -5,   -4,    3,   30,   -1,   -3,   -5,   -7,   -3,   -4,    4,    9,    2,    1,   -2,   -5,   -2,   -2,
       4,   -3,   -2,   19,   -3,   -5,   -4,    9,    7,    5,    3,   15,   -4,   -6,   -5,   -6,   25,    4,   -5,   -4,   -2,   -5,   -5,    0,    7,    0,    1,    9,    8,    3,   -3,    8,   -1,    2,    1,    4,    9,   12,   12,    1,   13,    3,   -1,   -1,   -4,   -4,   13,   13,    4,    7,    1,   -1,   -1,   -2,   -1,    1,   -4,    9,   10,   -3,    1,    4,    5,   -2,    1,    5,   12,   -1,   -4,   -3,    2,    2,
       3,   -3,   -6,    8,   -2,   -5,   -4,    6,    5,   -2,   -2,   10,   -3,   -6,   -5,   -5,   15,   -3,   -5,   -4,   -2,   -5,   -4,    1,    4,   -3,    1,   21,    2,   -1,   -4,   11,    4,    6,    5,   13,    1,    2,    2,   -3,   25,    6,   -4,   -4,   -4,   -5,    4,    6,    9,    7,    0,   -2,    6,    4,   -2,    4,   -4,    4,    3,   -4,    8,   14,   14,    0,    1,    2,    9,    1,   -4,   -3,   13,   10,
      -1,   -3,   -6,    1,    2,   -5,   -4,   10,    0,   -6,   -6,    3,    2,   -5,   -4,    0,    6,   -6,   -5,   -4,    2,   -4,   -4,    6,    4,   -3,   -4,   14,   -3,   -5,   -4,    8,    6,    2,    1,   13,   -4,   -6,   -5,   -6,   21,    0,   -5,   -4,   -2,   -5,   -5,   -1,    6,   -2,    2,   17,    6,    2,   -4,   10,    2,    5,    4,    9,    6,    8,    8,   -1,   21,    5,   -3,   -3,   -4,   -5,   10,   10,
       0,   -5,  -10,   -2,   18,    0,   -5,   14,   -8,  -11,  -12,   -6,   14,    3,    4,    7,    2,  -11,  -11,   -3,    8,   -5,    5,   22,    0,   -4,  -10,    3,    1,   -8,   -6,   11,    3,   -9,   -9,    6,   -2,   -9,   -7,   -4,   12,   -9,   -8,   -6,   -2,   -7,   -7,    6,    6,   -5,   -2,   31,   -5,   -9,   -7,   15,   11,   10,    8,   24,   -8,  -10,   -9,  -11,   40,    9,   -8,   -8,   -4,   -9,   -7,    0,
      -1,   -3,   -4,   -2,   21,   11,   -5,   -4,   -4,   -5,   -7,   -3,   12,    3,    1,    1,   -3,   -6,   -7,   -3,   -4,   -5,   19,   20,    1,   -3,   -6,   -2,   12,    3,   -3,    7,   -5,   -7,   -8,   -4,   11,    3,    4,    4,   -1,   -7,   -7,   -1,    4,   -3,    7,   15,   -1,   -3,   -6,    1,    1,   -5,   -3,   11,    1,   -5,   -6,    4,    1,   -5,   -4,   -2,    7,   -6,   -5,   -4,    1,   -4,   -4,    5,
      15,    5,    0,    6,   15,    7,   -6,   13,   -6,    1,   -1,   -1,   17,   29,   29,    1,   12,    2,    4,   -1,   -9,   -7,   27,   23,    2,    8,    4,    1,   -6,   -7,   -1,   -1,   -7,   17,   21,   -3,   -3,    1,    1,   -7,    5,   11,   15,   -5,   -8,   -6,   -4,   -1,   -8,   -7,    8,    8,   -4,    9,    4,   -8,   -5,    1,    3,   -1,   -3,   12,   10,   -6,    8,    8,   -6,   -7,   -7,    7,   10,   -1,
      70,  114,   68, -285, -344, -144,   30,   17,  128, -151,  -48,  -65, -155, -199,   30,  103,   96,   -7, -187,  -89, -227, -433, -336, -143,   70, -103,   58,  159, -114, -430, -139,   52,   15,   68,  281,  180,  162,  226, -231,   23,  -41,   69,   67,  156,  270,  306,  237,   38, -138, -266, -431, -359, -403, -332,  159,   26,   69,  148,  152,  -45,   74,   -6,  -15,  -25, -301,  124,   22, -165,  -82,  -93,  -75,  -71,
     -22,  -91,  -19,  112, -223, -378, -300, -140,  -32,   -1, -149,   63,   65,   13, -120, -193, -259,   54,   57,   35,   -7,   12, -109, -272,  157,  111,   21, -100,  -38,   94,  298,  236,  152,  203,   58,   28,   78, -109,  169,  138,   67,   61,  -74,   89,   99, -153, -308, -110, -113,   51,   71, -230,  -16,  -44, -104,  -76, -123,  107,  108,   29,   36,   11,   59,  -17, -265, -397, -199,  -88,   22,  139, -303, -273,
     -51,  -17,   27, -202, -201, -114,  -36,  -88,   73,  -56,   51,   56, -125, -141,    7,  134,  -50,   35,   32,   88, -113,  -83, -218, -146,   86, -176,  -57,  -44, -138, -244,  -13,   65,  182,   87,   58,  -28, -117,   18,  -62,  191,  -13,  127,  130,   42,  214,  273,  141,  -20, -236, -176, -261,  -16,   -7, -193,   59,  -55,  -52,  -67,  -11, -167,  -33,  -37,  103,  -23, -131,   70,   71,  -47, -118, -148,  -80, -243,
     111,   50,   82,  115,   10,   20,   89,   21,  155,  231,  -64,  -78, -105, -184,  132,   77,  -53,   13, -129,   -6,   89,  -74, -362, -302, -308,  -86,   13,  -91,  246,  205,  100,   23, -184,  149,  394,  418,  216, -167,  -75, -134, -289, -363,  -94,  241,  197,  102, -174, -222,  -98, -198, -180, -310, -404,   15,   89, -103,  290,  292,  -56, -373, -255,  -69,   75,   88, -176,   26,  -51, -361, -139,   31, -325, -367,
      -8, -169,  -22,   -2, -247, -426,  -36,   94, -103,  -47,  241,  199,  112,  193, -250, -120,  171,  149,  -21,   77,  -33,  -73,  127,   76,  229, -152, -457, -272, -217, -264,   86,  199,  430,  469,  252, -249, -185, -107, -106,  144, -101,   27, -124, -311,    6,   62,  187,  270, -405, -118,   69, -221, -446, -226,   49, -138, -401,  -19,  216,  333,   74,   53, -129, -272, -292, -132, -182, -125,  -54,  140,  -42, -337,
     100,   83, -123, -187, -112, -283,  -56,  -98,   11,   44,  -25,   47,  100,    0,  -97, -191, -189,   22,  -26,  -56,  -83,  -44, -103, -190,   71,  172,  165,   60,    5,    4,  246,  213,  -25,   -3,   14,  160,  203,   34,   -9, -122,  -35,  -33, -162,   70,   86,  -22, -202, -141,  -30,  132,   67, -122, -199, -121, -115, -122, -207,  -61,  -47,  -45,   22,  162,  -25, -105,   -6, -245, -213, -229,  -71,    6, -199,   15,
     156,  191, -183, -341, -133, -194,  -56,  -29, -258,  -99, -103, -312, -107,  150,  -72, -173,  -63, -203, -221, -173,   89,   55,   49,  183,    1,  331,  279,   19, -199,  259,   99,  -23,   23, -120,   37,  236,  241,  237,   15, -121,  -86, -143, -230,  -23,  106,  -57, -126, -147,  -41,  195,   28,  -29, -155,  -60,  -42, -120, -144,  -54,  -24, -111, -113, -216,  -15,   28,    6, -205, -406,  -80,  -40,  -41,  106,  169,
     -59,    4,   35,   -6,   46,  -92,  -52,  -22,   81,   40,   23,  -61,  -96, -181, -105,  -33, -179, -217,  -34,   30,  164,  155, -227, -191,  -84,   47,   47,  -55,  -51,   76,  137,  -19,   30,   63,  -96, -126, -147,  -15,   64,    4,  -23,  -11, -142, -138, -119,  112,  -28,  -55, -101,    8,  233,  -27,   33,    1,  164,    4,  -32,  227,   -3, -147, -168,   53,   91,   21,   -4,   56,  112,   54,  -43,   60,  -57,  -66,
      88,  168,  133,  106, -188,  -89,  216,   59, -219,    7,   36,  -95,   13,  143, -126, -347,    2,  115,  141, -144,  -53,   20,  283,  204,   27,   63,   -5,  -91, -125, -177, -282, -131, -182, -156,  113,  139,  -22,  -79,  -28, -133,  -14,   45,   89,  -61, -106,  140,  239, -188, -181, -236, -158,  -14,  178,   75, -154, -135,  -47,  -41,    0,  -28, -119,  -33,   52,   28,  -46,  140,  125,  -29,  -67,   34,  -83, -130,
     114,   42, -100,  -59, -193, -286,   43,  126, -283, -113,  -52, -159,   83,   84,   64,   84,  104,   64,   17, -119,  -23, -145, -126,  -92, -523, -290,  206,  146,  -93,  -32, -151, -474,   21,   -1,  -57, -135,   76,  368,  340,  113,   60,  193, -196, -211, -419,  -51,  -24, -100, -105,  159,  282,   37,    0,   53,  -29, -615,  -82,  -98,  121,  -73,  339,   54,  133,  111,  -34,  293,  127, -375, -305,   -4,  148,   71,
     103,   78,   38,  -98, -124, -213, -110,  -21,  -80,  -75,  -65,  -13,   59,   27, -204, -178, -144, -154,  -96, -133,   20,  128,  -72,   14,  -55,   99,   73,  -85, -163,  118,  251,   84,   -3,   73,   27,  -43, -107,  162,   77,  -55,  -41,  -92,  -55,   19,   51,   78, -119, -106,  -13,  147,   41, -109,  -87,   -2,   94,  -28,   -6,  180,   94,   -7, -147,   39,  -37,  -68,   15, -144,  -50,   10,   54, -125,  -76,   36,
      35,   99,    1, -243, -297,  123,  238,   44,   14,   63,   -9,  -47, -169,   15,  -74, -159, -162, -161, -151, -131,   50,  104, -114,  -88,  103,  310,   71, -177, -111,    5,   16,    9,   46,  190,  124,   76,  -11,  144,    0,  -17,   26, -178, -155,   62,  187,  -84,  -67,   -1,  -59,  129,   94,   11,  -92,  167,    7, -192, -158,  -86,  -82,  -65, -108, -307,  -54,  -19, -150, -268, -306, -110, -144,   66,  114,  127,
      22,  -55, -187, -188, -207, -248,  156,  154,  -66,   43,   52,   67,   -5,  -79, -156, -113,   17,   26,    5,  -95,  -26,  -93,  -59,   41, -139, -150,  -13,   -2,  -46,   -6,   86, -111,  -96,  -54,   68,   11,  -16,  121,  -31, -175,  -58,   77,   -3,  -38,  -77,  108,   96,  -19,   36,  120,   88,   14,  -89,  -86,   51,  -21, -142,  -20,  138,  -21,   48,  125,  -50, -230,  -46,  108,  181,  -84,  -21,   11,  172,   73,
    -122, -210, -196, -223, -106, -150,  124,   76,  -78,   93,  124,   58, -188,  -38,  -15, -203, -336,   10,   52,  -38,  -17,  275,   99, -488,   57, -216, -223,   38,   36,  -16, -106,  220,   68,  205,  307,  193,   -1,   -2,  259,   41, -138,   35,  281,  144,   90,   24,  -67, -168,  -85, -452, -448, -205,  139,  118,  133, -208,  -91,  -96,  -87, -280,  -88,  -93, -417, -149,   32,   91,  137,  -23, -195,  -11,  214,  -48,
    -150, -327, -320,  -53,  269,   92,  120,   80, -537, -220,  -60, -187,  -29,   48,  115, -248, -623, -171,  303,  236,   -4, -106, -340, -204,    1, -366, -286, -223, -184,  -86,   15,  191,  372,  156,  -91,  -79, -227,  -33,  340,  452,   76,  376,  299,    0,  -86,   25,  154, -128,  -66, -562, -354,   13,  213,  129,  -22,  -92, -121,    5,  -40, -170,   14,  -51, -251, -153,  -58,   -6,  184,  -42, -156,  -29,  -59, -207,
    -118,  -73, -157,  -73,   24,  -56,  111,   -7,  -26,  -93,  -99, -176, -192, -172,   80,   50,  -77,   31,   95,   94,  -38, -123, -213, -108,   12,  -75,  -83,  -61,  -80, -126,   48,   86,  -39,   64,   26,  -13,  -27,   94,  163,  -48,  -88,   91,  101,  -58,   19,  265,   89, -203,  -30, -148, -167,   30,   84,  -45, -126,   57,   11,  134,  115,    7,  -76,  -75,   55,  -58,  -94,   17,  180,   11,    5,   51,  -17, -118,
    -192,    3,  181,  -36,  152,  118,  159,   12,  -34,  125,   43, -200, -253,   -3,   89,   30,   78,   98,  112,  102,   18,  229,  -89, -191,   29,  -16,  103,  -43, -130,  133,  245, -178,  107,  186, -130, -213, -167,   34, -147,  -88, -126,  -27,   52,   12, -115, -347, -148, -135,  -33,  103,   88,  -40, -159, -105,   49,  -21,  -41,   76,   17,  -56,    2,   63,  -30, -118,    3, -150, -260, -171, -157, -135,   83,  170,
    -287,   49,  112,   -2,  128,  183,  -91, -351,  -51,   45,  158,  -81,  153,  -79,  210,  278,  102,  200,   58, -274, -374,  154,   38,  -67,  -47,  -54,   94,   29, -135, -162,  -75, -178,   97,   74,   37,  -63, -137,  302,  338, -172,  -46,  123,   32,  -59, -185, -266, -336, -203,   20,  -80,  -82,  -98, -162,  -46,   31,   36,  -23,  255,  212,  -40,  -94,  -18,  -54,  -87,  -24,  -98, -148,  -31,  -40,  -45,   40,   -4,
    -412, -324,   30,   28, -276,  -89,  -80, -157,  -45,   63,   52,   65,  101,  188,  153,   99,  122,   33, -212, -233, -329,  -68,  -52, -170, -162,  123,  154,  120,  127,  125,   78, -463,  -93,   57,  120, -243,  213,   83,   59,   33,  112,  208,  116, -274, -211,  -11,  232,  298,  -28,   -4,   29,  -25, -316, -371, -502, -216,  137,   16,  127,   77,  -69,  297,  565,  -91, -101,   61,  -31,  -90, -271,  -95, -280, -406,
    -312, -339,  -72,  -71, -202,  -22,   97,   -7, -153,  -65,  137,  191,  -25,    0, -189, -269,   34,   46,  -62,  -24,  -26,   39,   66,   36,  158,  167,   76,   44, -110,    1,  266,  126, -155,   30,   63, -141,   47,  132,  -48, -268,  -41,  169,  163, -142,  -49,   17,  192,  181,  -67,   -7,   -9,  -66,    6, -170, -327, -198,  -57,  -59,   74,   57, -171, -137,  -66, -117,  -54,   40,   76,  -83, -129,  191,  244, -229,
    -392, -300,   74,   46, -207,  -71, -105, -319,  -81,   47,   43,  -93,   34,  214,  225,   -7,   87,   79, -241, -291, -452,  -38,   18,  -75, -110,  186,  294,  174,   60,   43,   95, -472,  -39,   -7,  129, -103,  346,  -33,   58,   84,  111,  236,  132, -346, -219,   14,  186,  225,   21,  -69,  -94, -136, -307, -349, -519, -176,  126,   96,  175,   11, -204,  295,  526, -121, -226,  -13,  -64,   33, -171,    8, -281, -500,
    -140, -151,  -72,  -97, -169,  -86,  120,   31, -109,  -41,  118,  137,  -29,  -18, -126, -143,   24,   40,  -26,  -26,  -27,   -5,  -17,    0,   23,   74,   29,   15,  -68,   46,  149,   10,  -75,   37,   53,  -66,   21,  182,   20, -169,  -25,  124,   69,  -88,  -69,   44,  157,   66,    2,   41,   41,  -23,  -52, -167, -126,  -79,  -79,  -46,  110,   38,  -62,  -58, -111, -122,  -35,   33,  102,  -57,  -56,   60,  166, -109,
     -25,    8,   37,    0,   20,   24,   58,    1,  225,  105, -136, -165, -205, -132,  -33,  -12,  -87,  -67, -231, -220,  -14,  104,  -58, -177, -161,   45,  221,  -35,   81,   52,  106,   22,  -76,  161,   30, -125, -154,   40,   94,   49,   -7,   36,  111,  150,   34,  251,   38,  -78,  -37,    3,  106,  -61, -138,   99,  247, -130,   -7,  126,  -44,  -68, -124,   21, -157, -188,  -79,  -24,   -9,  -49, -131, -309, -129,   -1,
     -10,   -4,   40,    6,   -2,  -37,   20,  -32,  182,  139,  -79, -153, -163, -130,  -72,  -48, -145, -130, -171, -179,   57,  120, -135, -210, -146,   44,  150,    3,   54,   74,  126,  -10,  -68,   79,   60,  -89, -140,   92,  153,   41,   17,   35,   65,   76,  -18,  194,   43,  -51,  -32,  -28,  141,  -47,  -92,   36,  197, -128,   33,  169,  -70, -121, -142,  -42, -102, -107,  -57,   29,   52,   -8, -107, -181, -138,  -47,
      11,    2,    0,    6,    4,   -1,    1,    6,    2,   -2,   -2,   25,    6,   -4,   -2,    1,   -1,    0,    6,   13,   -3,   -4,   -4,   -4,   12,    2,    0,    4,    8,   -2,   -1,    4,    3,   -1,   -3,   10,   21,   -4,   -2,   -1,   -4,   -2,    0,   14,   10,   -4,   -3,   -5,    9,    1,   -1,    2,   12,    0,    0,    4,    6,    0,   -3,    1,   26,   -3,   -2,    0,   -4,   -3,   -3,    4,   33,   -5,   -3,   -4,
      95,   21,  114,  -43,   78, -143,   78,   47,  122, -104, -549, -257,  107, -104, -146, -193, -208, -282,   36,   97,  -56,  -11,  157,  271,  -65,  -86,   91,   86,   -9,  -60,   61,   15,   43,    7,  -37,  -74,  144,   69,  -24,  -20, -350, -593, -804,  -79,  115,   -9, -116, -322,   48,  -56,   23,   85,  -94, -108,   42,   64,   78,  -37,    4,  147,   54,   33,   75,  129,  136,  186, -204, -194,  -57,  104,  -48,   88,
      13,    2,   -1,    4,    9,   -2,   -1,    5,    0,   -2,   -3,    8,   26,   -4,   -3,   -2,   -4,   -3,    0,   10,    9,   -5,   -3,   -5,   11,    1,   -1,    1,   11,    0,    0,    4,    3,   -1,   -3,    3,   29,   -3,   -2,   -1,   -4,   -3,   -3,    3,   26,   -4,   -3,   -4,    5,    0,   -1,    3,    9,    0,    0,    4,    3,   -1,   -3,    7,   21,   -2,   -2,    1,   -4,   -3,   -4,    4,   25,   -3,   -3,   -5,
      63,   65,    7,   39,  -81,   80,  102,   88,  181,  112, -111, -128,  164, -171, -237,  -78, -562,-1331,-1184,  -85,  131,  117,  149,  102,    1,    3,   37,   42,   77,  -69,   17,  -44,   17,  -27,  -67, -129,   41,  -89,   16,  -66, -196, -635, -220,  -77, -145, -141,  -63,  -93,  -40,  -79,    9,   57, -130,  -41,  -16,   56,   71,   89,  115,   82,  162,   25,   70,   87,   41, -223, -454, -111,  118,  119,   70,   34,
      33,  -36,  -84,   55,  -36,   18,   36,   56,  127,  152,  -34,   71,  109, -140,   14,   63, -930, -468, -396,  -12,  152,  -67, -427, -347,   12,   -1,  -15,   15,  -78,   38,   17,    5,   21,  -22,  -25,  -14,   14,  -37,   42,   16, -221, -761,-1115,  -24,   16,   10,  -99,  -87,  -10,  -21,  -35,   56,  -41,   37,    1,  -36,   83,   50,   58,   23,  212,   77,  181,  106,   71, -487, -479, -214,   11, -191,  -59,   20,
       2,   -2,   -3,   -1,   34,   -1,   -2,   -1,   -3,   -5,   -4,   -2,   18,    5,   -1,   -2,   -3,   -2,   -2,   -1,    3,    1,   -1,   -2,    6,    1,    0,    4,   14,   -2,   -2,    1,   -1,   -1,   -3,   -2,   17,    6,   -3,   -2,   -4,   -4,   -3,   -2,   17,    6,   -3,   -4,    6,    1,    1,   11,    3,   -5,   -2,    3,    4,    7,   -2,    3,    4,   -2,   -3,   -3,   -1,    4,   -3,   -2,   12,   10,   -4,   -3,
      -2,   -3,   -4,   -2,   21,    8,   -2,   -3,   -4,   -5,   -3,   -2,   15,    5,   -2,   -4,   -4,   -4,    3,    3,    5,   -2,   -3,   -3,    3,    6,   -2,    3,   10,   -1,   -3,   -3,   -2,    1,   -3,   -3,   16,   10,   -4,   -3,   -3,   -5,   -3,    0,   17,   14,   -4,   -3,    4,    8,   -1,    7,    2,   -5,   -3,   -3,    1,   13,   -2,   -1,    3,    1,   -4,   -3,   -3,    5,   -2,   -2,    5,   19,   -4,   -3,
      -3,   -5,   -1,    0,    6,   14,   -2,   -5,   -1,   -1,   -2,   -2,   -3,    6,    6,   -2,    1,   -1,   -5,   -4,   -6,   -3,   12,   12,   -4,    1,   -2,   -3,   -1,   31,   -1,   -5,   -4,   -1,   -1,   -4,   -6,   17,   16,   -5,   -3,   -2,    2,   -4,   -6,   -2,   28,    3,   -4,    9,    3,   -2,   -2,    6,   -3,   -6,   -3,    6,    8,   -3,   -5,    3,    3,   -5,   -2,    2,   11,   -4,   -7,   -4,    5,   -2,
       4,    3,   -3,   -4,   -3,   -3,   -3,    5,   -2,   -3,   -5,   -5,   -4,   -2,    5,   14,   -2,   -3,   -3,   -2,   -2,   -3,    8,   20,    1,   -2,   -5,   -4,   -4,   -4,   11,   19,   -3,   -3,    0,   -3,   -4,   -4,    8,   19,    2,   -1,    6,    3,   -3,   -4,    0,   10,   -2,   -2,    5,   -3,   -4,   -4,   20,    8,   -2,   -2,   12,    1,   -3,   -4,    1,    5,    6,   -1,    7,    5,   -3,   -4,   -4,    3,
      -1,   -1,   -2,   -3,   -2,   -1,    1,    3,   -2,   -3,   -6,   -4,   -2,   -2,    5,   17,   -1,   -2,   -3,    2,   -1,   -3,    0,   34,   -2,   -3,   -5,   -4,   -4,   -3,    6,   18,   -2,   -3,   -1,   -1,   -3,   -3,    7,   17,    3,    1,    1,    6,    1,   -3,   -1,   14,   -3,   -3,    4,   -1,   -4,   -4,    8,   16,    3,   -1,    7,    4,   -3,   -3,   -2,    5,    9,    2,    1,    7,    2,   -2,   -5,    4,
       9,    1,   -3,   -4,   -4,   -3,   -4,    7,    7,   -2,   -2,    1,   -2,   -3,   -3,   24,    2,    0,    2,   14,    3,   -1,   -1,   10,    0,   -2,   -3,   -4,   -4,   -3,   -4,   26,   -1,   -2,   -1,    4,    0,   -2,   -2,   29,    1,   -1,    0,    9,    3,    0,    0,   11,   -2,   -2,   -3,   -4,   -4,   -3,   -3,   31,   -1,   -1,   -1,    6,    1,   -1,   -2,   24,    2,   -1,    0,    5,    2,    0,    0,    9,
     -40,-1019,-1481, -920,  -54,   73,   93,  177,   33,    5,  139,  225,   -6, -193, -181,  166,    1,  -36,   20,   41,   60,   95,  159,  -92, -118,  -81, -778, -132,  -13,  -61, -189, -186, -122,  -84,   -9,  -18,  -28,   -4, -106,   36,   25,   16,   -2,    4,  -23,   25,  -37,   35, -119, -325, -254,   54,   28,   82,  108,  138,   74,   83,   74,   72,  111,   58,   30,  158,   52,   21,  -73,  -49,   46,    7,  -49, -119,
      13,    6,    0,   -1,   -4,   -4,   -3,   -4,   26,   -1,   -3,    2,    2,   -2,   -4,    4,    6,    0,    1,   11,    6,    1,   -1,    3,   13,    1,   -3,   -4,   -5,   -3,   -4,    9,   10,   -2,   -1,    4,   -1,   -3,   -3,   20,    3,    0,    2,   12,    3,   -1,   -1,   10,    1,   -2,   -3,   -5,   -4,   -3,   -4,   34,   -1,   -2,   -1,    7,    0,   -2,   -2,   27,    1,   -1,    0,    8,    2,   -1,    0,   14,
      22,   57, -330, -234,  241,  185,  -22,  -59, -255, -485, -127,  150, -126, -194, -108,   95,  -11,  100,   45,   73,   71,   65, -143,   32,  -16, -666, -690, -365, -269,  -86,   -8,  115,  -39,   -7,   20,   20,  -41,  -48,   89,  172,   85,  105,  -94,  -59,   -4,   50,  -85,   24, -233, -182,  158,  149,   44,  -58,  122,  -50,  148,    5,  -31,   71,  134,   52,   24,   63,   95,   23,  -61,   41,   54,   57, -114, -103,
     -17, -181, -765, -695, -609, -395,   29,   99,   31,    8,  121,  109,   -7,   19, -151,  259,   81, -120,  -38,   20,   51,   39,   75,  -56,   35, -913, -879, -378,  122, -111,  -63,   52,  -40,  -80,  -51,  -16,  -15,   -6,   24,  -30,   18,  -63,  -32,   11,   18,   53,   54,   -7, -106, -441, -821,  -31,  -27, -129, -292, -142,    1,  -31,   28,  138,  154,  180,   59,  207,   47,  -48,  -20,  -17,  -11,   47,   66,  -63
};         /**< Weights of SVM classification models, based on HOG_360 descriptors. An individual model is trained for each feature point, and is used for validation algorithm. (If all values 0 => the considered descriptor is disabled). */

static const INT16 Frontal_MIDDLE_SVM_HOG_360_rough[] = {
     629, -191,   30,  431,  852,  367,   36,  153, -568,  252,   33,  356, -175, -339, -298, -619,  595,  -61,  329,  184,  533,  285,  597,-1431, -509, -682, -190, -502,   58, -461,  347,  -47,-1681,  391,  608,-1093,-2597, -852, -591,-1094,-1061,   61,   45, -382, -109, 1799,  412, -921,  207, -420,  403,  604, -815,-1445, -826,  234,  344,  260,  105,  381, 1196, 1467, 1563,  960, 1308,  130, -736,  170,  568, -251,  524, -453,
    -286,  388,  148,  111,   95,  -96, -340,   41,  368, -623, -336, -270,   85,  -64,  469, -539,-1199,  710,  419,  -59, -756,  -96,  558,-1920,-1849,  -57,  620, -343,-1487, -531, -570,-2401,-2537,  470,  536, -280,  493, 1122,  266,-1838,-2470, -474, -411, 1432, 1198, 1115, -816,-1994,  649,  207,  339,  426,   60,  297, 1075,  813,  919,  356, -164,   27,  222,  -51,  506, -433, 1693, -699,-1381, -208,  855, -268,  191, -314,
    -785, -301,  128, -278,   16,  212, -175,-1194, -513,  176,  149,  645,  492,  699,  910, -577, -639,  699,  743,   51,-1511, -258, -285,-1881, -563, 1045,  883, -817, -555,  121,  -83, -950,-1224, -178, -790,  506, 1122, 1473,  112, -585, -112, -302,  -47,  248,  181,  -21, -837, -445,  480,  304,  472,  846,  589,  447,  996, -909,  804,-1021,-1047,  202,  484, -242,  393,  188,  685,  -25, -519,  327,  777,  433,  214,  213,
     144,  313, -163,  227,  105,   40,  144,  207,  552, -663, -377, -160,  269, -633, -209,   24, -700, -108,  335, -255, -138,  685,  269, -410,  149,   10, -232,  130,  444, -190,  -89,  186,-1679,-1489,  532,  657,  203, -234,  151, -321, -494,  481,  494, -278, -961,  695,  641, -384, -186,  377,   29,  248, -148,  180, -252,  102, 1043,  285, -749, -343, -857,-1356, -690,  769,  339,  281,  -33, -189, 1198, 1142, 1370, 1070,
     246,  342,  -68,  475,-1425,  545,  252,  558,  394,  109,  263, -544, -797, -325, -318,  -90,  440,   -7, -226,  559,  148,   95,  425,  873, -392,   96,  136,-1037, -851,  433, 1758, -154,-1116,  554,  363,-1582,-1123, -562, -856,-2562, -519, -214, -709, -255,  -61,  384, -443,   58,  178, -746,  120, 1346, -433,  507, -298,  554,  346,   68,  253,  458,  893, 1608, 1427, 1164,  570,  378, -406,  128,  245, -862,-1419, -831,
    -265,  334, -131, -551, -485,  257,  651, -144, -132, -329, -583,  586,  -18, -200, -599,  286,  227, -158,  305,  155,  193,  137,   59,   91, -249,  506,  491, -459, -385,  665,  670, -850,  611,  511,-1359,-1499, -339,  121, -251,  146,  113, -249,   15,  127,  188,  -58, -219,  434, -163,  -60,  237,  326,  979, 1354, 1074, 1138, -315, -723,  272,  991,  791, -676,-1257, -794,  258,   17,  361, -180,  122, -242,  161, -153,
     -19,  358,  704, -961,-1858,  548,  -68, -735, -214, -268, -588,  228, -588,  351, -152,  146,  115,  138,  349, -291,  -59, -288,  -30,  158, 1414, -386, -467,-2591,-2094, -681, 1134, 1156, -220,  541,  507,-2587,-1805,  263, 1103,  453, -367,  575,  -63,-1826,-2505, -494, -469,-1466, -198,-1344, -764, 1795, -284,  208, -295,  837,   -5, -177,  337, 1031, -369,  494,  -91,  194,  370,  313,  174,  678,  762, 1078,  276,   36,
      41,  706,  728, -695,-1957, -274, -271,-1594,  673,  175,  225, -432, -493,  979,  726,  557, -308,   86, -313, -961,-1475, -229,  172,   -2,  202,   40, -293, -145, -517, -775,  -32,  199,  569, -841, -316,-1313, -695,  222, 1521, 1145, -860,  874, 1091, -605,-1011,  -42,  143, -547,  348, -440,  -63,  682,  203,  227,  343,  743,  151,-1037,-1074,  908,  228,  433, -230,  472,  858,  476,  268,  480, -892, 1005,  421,  578,
    -125, -668,  328,  172, -124, -301,   37,   85, -541,  -34,  303, -263, -150,  664,  237, -227, -101,  508,  -15,    1, -280,  351,    4, -823,  493,  -96,  -63,  429,  124, -849, -486,  197,  533,  587,  582,  265, 1041, 1443, 1606,  666,  521,  243,  341,  483,  681,  178,   82,  -24,  130,  814,  -61,  -51, -358,-1085, -685, -130, -398,  200,  343, -287, -611, -542, -284, -160,  563, -183,  446,  170,  -98, -834, -593,   43,
    -574, -897,  491,  299,   78, -310,  107,   27, -883, -200,  170,    4,  -63,  984,  842, -353,  140,  753,   45,  121,  363,   78, -447, -591,  640,  106, -713,  150, -256, -656, -270,  583, 1141,  593,  495,  186, 1381, 1391, 1049, 1129,  530,  445,  839,  854,  591,  -80,   91,  -17,  240,  792,  513,   42, -256, -731, -886, -605, -860,   21,   87, -488,-1123,   12,  -13,-1079,  385, -181,  148, -527, -713,-1213, -430,   19,
     -88, -760,  174,  281,   78, -379,   29,   42,-1263, -526,  622,    5, -209,  830,  698, -148,  -41,  719,   59, -113, -231,  173, -292, -710,  610,  277,   -6,  162, -261, -779, -577,  378,  895,   35, -347, -156,  973,  982, 1159, 1334, 1008,  605,  907,  690,  907,  504,  373,   82,   -9,  784,  195,  336,   63, -492, -797, -579, -299,  258,  358, -361, -942, -182, -626, -608, -151, -260,  126,    7, -527, -975, -550, -579,
   -1254, -345,  147, -177, -118,   47, -131, -476, -104,  812,  280,   22, -110,  358,  216, -876,  229,  -16, -108,  -31,  507,  865, -254, -535, 1112,  190,  162,  573,  275,  862, 1379,  718,  536, 1317, 1122,  512,   74,   61,  121,  247,  407,-1132, -904,  -79,  528,  281,  412,  513, -295,  234,  427,   79, -783,-1113, -524, -583,  175,  534, 1116,  217,  -27, -608, -689, -252, -433,-1098,  -89,  671,   55, -132,  679,  173,
      58,  201, -187, -569, -506,  -70,  102,  -81,  480,  838,  143, -411,  268,  439,   -4,  -53, -180, -528, -350, -180,  259,  847,   12, -492,  516,  661,  869, 1087,  592,  764,  812, -312, -128, -211,   58, 1020, 1134,  192,  383,  315,  -49, -417,  168,  374,  756,  344,  183, -174, -426,  150,  512, -190, -557, -984, -241, -425,  139,  202,  380,  132, -491, -667,  163,  650, -270, -302,  393,  303, -295, -496,  194, -337,
    -713, -457,  407,  -44,    3,  -76,  -69,  -16, -919,  241,  -90, -221, -525,  351,  131, -674,  209,  349,  174,  192,  434,  777,  -18, -969,  736, -154,  -52,  699,  631, -252,  180,  366, 1020, 1051,  854,  302,  759, 1476, 1463,  584,  290, -261, -286,  232,   43, -301,   54,  353,   92,  400,  -73, -426, -978,-1412, -440,   79,  155,  464,  903,  215, -183, -409, -282, -693,  439, -434,  133,   83,  -32, -506, -479,  578,
    -748, -692,  322,  155,   60,  -19,  333,   26, -298,  164, -209,  -37,   30,  577,  473, -401,  205,  627,  -62, -110,  285,  154, -247, -441,  552, -114, -608,  284,  180, -194, -123,  735, 1076, 1130, 1296,  539, 1068, 1099,  853,  470,  -54, -267,  128,  466,  488, -202,  125,  356,  185,  669,  399, -331, -768, -663,-1058, -659, -715,  -59,   79, -508, -806, -485,    2,-1203,  398,  -16,  150, -158, -825, -953, -243,  362,
    -506, -427,   -9,  -48, -106,  108,  478, -100,  130,  653, -161,  -17,   56,  184,  149, -131,  256,  301, -359, -402,  224,  481, -103, -324,  573,   69,  -22,  434,  509,  342,  299,  575,  472, 1053, 1436,  863,  344,  593,  593,  239,  -47, -758, -547,  237,  367, -116,  519,  540, -419,  107,  215, -201, -854, -580, -608, -826,  -18,  502,  502, -467, -656, -645, -129, -530, -289, -267,   36,  248, -614, -689,   28,  226,
     135,  -19,  724,  136, -562, -414,   76,  348,  -25,  159, -166, -818, -381,  863,  971,  -50,  284,  472, -846, -531,    9,   83, -365,   35,  816,  810,  457,  526,  -24,  189, -107,  563,  178,  500,  591, 1088, 1060, 1041, 1335, 1318,  171, -705,   81,  619,  574, -314, -627, -217, -496,  118, -163,  334,   41, -479,-1197, -674, -431,  130,   30, -814,-1087,  -43,  -21,-1119,   14,  512,  759,  250, -558, -827, -659, -246,
     -13,  -86,  -53,  219, -596, -238,  856,  471,   40,  240,  791,  -93, -910,  235,  370,  -92, -209,  147, -334,-1242, -549, -111,   56,  -65,  -95, -807,-1156,  458,  532,  427,  285,  508,  510, 1064, 1278,  482,  236,  134,  -28,   55,  566,  148,  188, 1102,  663, 1411,  861,  304,  694,  -65,-1073, -407,  184,  647, -140,   70,  201, 1118,  628,  158, -229, -742, -594,  -59,   43,  382,  224, -288, -565, -531,-1126, -772,
     223,  147,  314,  216,-1015,    0,  761,  395, -241,  -80,  250, -896, -663,  147,  367, -454,  -46,  389, -431, -645, -211,  -72,  -97,  -11,  191, -261, -299,  301,  324,   62, -331,   55,  317,  833, 1041, 1018,  561, 1498, 1417,  749,  681,  -48, -161,  766,  353,  173, -260,  611,   93,  135, -365,  419,  585, -545, -490,  -44,  214,  883,  478,  144, -718, -300, -428, -166, -418,  -88,  359,  135,   86, -466,-1388, -962,
     -98,   24,  732,  -82, -683, -279,  170, -227,   12,  626, -479,-1225, -267,  711,  837, -167,  295,  175, -691,  -94,   23,    9, -408,   81,  692,  908,  649, 1001,   21,  420,  458,  910, -159, -327,   18,  919, 1335, 1133,  977,  955,  159,  -48,  240,  601,  392, -585, -787, -258,    5,  100, -250, -161, -564, -587,-1054, -544, -347,  387,  295, -260, -591, -567, -162, -950,  311,  195,  762,   19, -561, -774, -474,   52,
    -381, -406,  248,  273, -353, -115,  477,  214,   -5, -200,  626,  109, -115,  171,  194,   89,  -61,  -18, -400, -453, -100,  465,   98, -111,  209, -498, -748,  -23,  547,  534, -156,  365,  851, 1423, 1038,  461,  202,  641,  535,  334,  441,  -46,   48,  553,  534,  313,  353,  482,  273,   40, -230, -285,  234,  -32, -678, -620, -456,  480,  527,  -24, -516, -199, -620, -703, -214,  208,   58, -387, -820, -578, -555, -832,
    -193, -302, -588, -171, -498,   66,  822,  224, -352,   81,  817,  509,  -76,   -8,  451,  268, -589, -214,  208,   30,  -96,  116,  -51, -485,  375,  252, -449,    9, -186,  224,  365,  745,  955,   77, -259, -127,  293,  372,  135, 1085, 1112,  853,  664,  484, -359,  871,  726,  606,  301,  414, -340, -268, -338,  149, -571, -274,  163,  338,  246,  169,  655,  126, -563, -483, -209,  501,  208, -412, -385, -285,-1009, -549,
     -88, -120,  601,  196, -461, -247,  145,  288,  -68, -247,  149, -261, -379,  507,  580,   37,  120,  320, -646, -700,  -11,  311,  -65,   35,  412,  137, -254,  -61,  342,  179, -251,  471,  558, 1276, 1110, 1034,  419,  918, 1070, 1067,  305, -612, -135,  543,  729, -164, -190,  184, -117,  134,   12,  389,  385, -324, -880, -839, -498,   70,  -72, -734,-1192,  -57, -509, -842, -358,  403,  623,  205, -647, -992, -612, -749,
      14,  -49,  493, -105, -822,   12,  327, -268, -266,  303,  -17, -533, -296,  267,  690, -124,  158,  309, -617,  -48,   26,   20, -346, -164,  462,  329,  268,  504,  -53,  139,  138,  661,  260,  569,  602,  545,  625, 1635, 1407, 1025,  429,  -50, -126,  490,  205, -507, -834,  136,  175,  415, -148,  537,   46, -625, -849,  -98, -271,  355,  201, -403, -197, -301, -556, -629,  -38,  -42,  792,  155, -100, -711,-1028, -325,
    -943,-1083, -173,  579,  514, -360, -304,  270,  648,  221,  270,  652, -798, -177, -162, -821,  529, -136,-1092, -926,  280, -300, -346,  465,  537,  402,  334,  535,  362,  269, -330,  570,   -6,  422,  436,   10,  242, 1070, 1031,  228,  553,  382,  393,  527,  560, -365,  243,  361,  185,  230,  186,  371,  -34,  185,   96,  -18,  -89,   33,   35, -128,  278,  380,  408,  312,  393,  243,  229,  208,  -43,   74,  203,  -20,
    -966, -662, -122,  487,  358, -360,  297,  395,  637, -329, -347,  647, -880, -292, -299, -902,  451,  -92, -702, -939,  393,  318, -401,  333, -140, -507,   91,  691,  566,  309, -524,  446,  465,  734,  782,  463, -163,  619,  593, -186,  689,  122, -497, -148,  447, -556,  292,  554,  519,  608,  349,  450,   60,  160,  -74,  350, -334,   26,   30, -367,  269,  749,  767,  300,  476,  391,  587,  524,  317,  -93,  173,   67,
    -577,  -34, -240,  474,  327,  113,  227,  406,  774,   -7,  -29,  788, -147,  289,  265, -136,  468, -220,  -93, -552,  405,  289,   81,  334, -712,-1191, -151,  186,  181, -266,  198,  440,  488,  -68,  -63,  479, -838, -473, -439, -849,  175, -123,-1224, -729,  423,  195, -309,  162,  151,   12,  461, 1149,  740,  598, -457,  533,  143,  350,  382,  117,  -90,  951,  931,  -78, 1140,  496,   13,  155,  523, -460,  603,  746,
     438, -232, -364,  527,  781,  305,  -58,  392,  434,  120,  118,  466,  258,  618,  552,  226,  508, -357, -229,  472,  399,   27,  271,  760,-1038, -393, -243,  104, -112, -288,  368,  138,  301, -321, -305,  286, -655, -158, -186, -605,  133, -176, -359,-1052,  112,  363, -331,  -75, -495,-1203,   18, 1045,  815,  369,  208,  746,  764,  909,  891,  717, -690, -222, -256, -678, 1051,   64,-1216, -484,  723,  229,  280,  811,
     446,  115,  215,  649, 1014,  752, -138,-1520, -155, -735, -659, -101, -112, -372, -440, -116,  702,  194,  159,  418,-1583,  -48,  745, 1007,   -9,-1346, -774,  580,  783,  630,  782,  557,  957, 1349, 1269,  988,  290, -140, -161,  271,  564, -776,-1265,   31,  531,  829,  551,  751, -428, -444, -610, -181, -229, -564,  667,  894,  511,  365,  315,  450,-1189, -915,-1033,-1121, -125, -569, -439, -442,  876,  668, -590, -178,
     384,   93,  609, 1071, 1036,  641, -668,  580, -191, -466, -442, -167,  -69,  582,  561,  -80, 1015,  623,  116,  372,  579, -664,  631,  990,  548,  330, -376, -691,  147, -243,   21,  416,  414,  864,  883,  381,  936,  687,  736,  925, -660, -340,  308,  609,  394,  -20, -156,  136,-1298, -189,  377,  993,   25,  487,  423, -540, -204, -334, -381, -216, -461,  186,  130, -463,  970,  404, -171,-1332, -539,  407,  486,   26,
     317,  541,  188, -530, -690, -202,  131,  227, -202, -891,  -15,  576,  159, -205,  308,  529,  305, -315, -228,  276, -983, -519, -598, -590,  180, -247,  260, -481, -487, -993,  -38,  397,  346,   -5,  605,  638, 1171,  488, -195,  371, -138,  732,  882,  517, 1108, 1362,  980,  319, -376, -613, -797, -404, -585, -125,  747,   67,  250,  367, -224, -917, -184,   41,  210,   60, -150,  542,   10, -481, -279,  -40,   27,   57,
     276, -218, -337,  304, -594, -602, -506,-1001,  569,  -11, -913, -201,  505,  301, -255,  148, -547,  160,  569,  324,  237,  120, -163, -708,  518,  870,  735, -129,  322,  986, 1335, 1101,  632,  616,   34,  361,  357, -163,  525, 1161, -488,  296, -234,  184,  398, -106, -936, -491, -485,    6,  512, -146,   43,    7,  -44, -271, -891, -220,  351,  259,   70,  202,   64, -195, -397, -776, -637, -376,   54,  756, -179, -575,
    -393, -186, -192,-1308,-1917, -368,  -45, -840,  373,  519,  613, 1072,  245, -128,  353,  433, -518,-1198, -157,  662, -252, -155,  -22,   22,  328, -660, -149,   35,  155, -268,   73,  439,  605,  366,  326,  275, 1143,  -57, -282,  639,  105,  903,  894,  460, 1271, 1542,  596,   61, -939, -197, -471, -215, -275,  129,  835,  362,  -17, -433, -829, -694, -894, -304,  163, -175,  -59,  583,   -3, -354, -430, -428, -174, -375,
     409, -398, -195,  626,  325,  579,  -51,  101,  860,  453, -449, -107,  244,  145,  665,  662,  395,  482,   68,  175,  399, -363, -976, -280,  323,  468,  696,  -20, 1098,  764,  465,  577, -553,  289, 1098,  702,  168,   60,  416,  752, -914, -825,  -59,  889,  690,   86, -473,-1055, -529, -477, -326, -226, -738,   87,  130, -846,  560,  159,   20, -683, -317, -229,  -13,  275,  252, -107, -578,-1112, -127,  710,  532, -392,
     180,   10,  494,  382, -282, -979, -303,  402, -126, -463,  459,  940,  723,  684,  140,  232,  562, -217, -387,  403,   99,  -80,  560,  276,  862,  -14, -881, -915,-1033, -509,  106,  682,  679, 1105,  289, -614,  708,  377,   68,  160,    4,  734,  525,  338,  579,  424,  804, 1093,-1073, -581, -158,  252, -385,  507,  705, -142, -675,   22,  131,  558,  310,  -31, -217, -302, -211, -266, -515, -535, -834,  134,   78, -760,
     676, -150,-1076, -440,   26,  -46, -133, -244,  954,  538,  449,  339,  394,  313, -103,  187,-1240, -197, -110, -332, -747,  -67, -298,-1761,  372,  814,  806,   78,   47,  641, 1450, 1205,  227,  282,  381,  620,  652, -293,   27,  994,   35,  -42, -675,  317,  415,   27, -275,   32, -322,  -11,  508,  -87, -325, -206, -355, -385, -590, -699, -414,  -25, -198,  160, -301, -753, -201, -481, -226, -872,  308,  776,   47, -221,
     263,  395,   61, -208, -641, -415, -102,  -14, -469,  -16, -646, -453, -215,  580,  367, -702, -146, -552, -288, -247,  378,  711,  489,  220,  357, 1082,  568, -318, -499,  206,  484,  -81,  369,  433,  716, 1145,  672,  641,  605, -244,  157,  -18, -796,   69,  351, -153,  128,  106, -137,  445,  333, -165,  -43, -273, -674, -560, -664, -694,  401,  129, -235, -323, -267, -107,   24,   17, -745,  110,  181, -228,  187,  203,
    -151,  285,  262, -272,  -66,   49, -188, -382, -215,  286,  405,  -32, -340, -157,   79,  -42, -444, -494,  -63,  214,  157,  557,  -95, -378, -270, -147,  -35,  111, -395,  349,   80, -502,  428,  222, -199, -318, -432,  -51,  273, -189,  276,  291,  -55, -549, -261,  121,  181, -216,  -66,  165,  433, -149,   10,  226,  141, -120,    6,  540,   64, -146, -154,  127,   50,  -19,   30,  177,  543,  403,  183,  -97, -201,  -78,
     459,  358,  164,  317, -420,   14,  582,  187,  127,  214,  311,  439,  157,  382, -144, -369,  187,  160,  -40, -340, -500,  214,  783,  127,  133,  241,  266, -112, -170, -505, -555, -125,   58,  282,  741,   61, -128,  135,  204, -166, -201,  446,  282, -206, -154,  461,  323, -357,   29, -320, -316,   70,  136,   42, -140,  166,  136,  176,  290,  190,  -52, -189,   62,  256,  110,  336,  292,  179,  145,  135, -405, -493,
     480,  270,  -75, -337, -136, -291,   38,  -39, -268,  356,  341, -342, -320,  322,  367, -254, -290,  -50,  207,  451,  -32,   38, -229,  -80,-1090,  153,  588, 1050, -146,  279, -203,-1073, -328, -288, -286, -336, -499,  799,  732, -485, 1001,  533,  101,-1092,-1069, -153,  293, -151,  356,  449,  681,   79,  190,  -77,   47,  127,   30,  257,  327,   55, -269,  343,  291, -268,   59,  635,  468,  371,  120,   57, -105,  172,
      66,  232,  316, -541, -553, -271,  -84, -144, -424, -197,   49,  131,  -88,  194, -143, -247, -232, -404, -139, -155,  163,  634,  107, -109,  195,  224,  -73, -207, -449,  292,  542, -193,  320,  337,   59,  -71, -102,  270,  332,  -38,  -69,   63,  -28,  103,  200,  101,  -37, -346,  -16,  416,   53, -242,  -55,   55,  -24, -161,  -40,  272,  492,  185,  -15,  -73, -281, -162,   37, -184,  -79,  188,   99, -506,  -29,  180,
     319,  172, -112, -339, -606,   57,  460,   28,  142,   88, -265,   61,  -37,  257,  143, -201, -153, -164, -290,  -10,  352,  620,   51, -334,  -18,  619,  289, -465, -421,  213,  370,   29,  -29,  495,  621,  523, -124,   53,  187,  -82,  291,   15, -252,  153,  257, -392,   71,  129,  144,  438,  376,   90,  148, -211, -274, -259, -173, -322,   35,   -7,  -59, -351, -259, -114, -199, -262, -317,  -79,    9,  158,   47,  129,
     255,  -54, -630, -551, -475, -104,  576,  189,   11,  505,  323, -258,  -61,   77, -176, -342, -265,  293,  288, -188, -428, -223,   92,  -22, -650,   -6,  372,  373, -236,  224,  113, -309, -365, -163,  277,  540, -185,  310,  -73, -480,  119,  -69, -171, -329, -616,  163,  371, -467,  462,  610,  194,   47,  -57, -228,  -95,  262, -182,   36,  601,   31,  -20,   36,  115, -156, -175,  414,  212,  -55, -127,  203,  237,   45,
       4, -275, -187, -138, -327,   47,  627,  357,   68, -240,   57,  139, -227,  127,  270,  -49, -367, -113,  145,  323,   27,  465,   49, -576,  150, -256,   36,  301,  126,   43, -384,  254,  517,  620,  485,   -9,  -71,  201,   36, -120, -452,  243,  625,   -2,   52,  396,  184, -399,  -87, -318, -268, -206,  135,   44,  131,    8,  -18,   34, -313, -169, -110, -262, -301,  -58,  101,  358,  460,  146, -256, -281, -204,  146,
    -228, -229, -507, -136,  177,  440,  661,  342, -350, -566,  -11, -422, -707,  333,  611, -151, -200,   24,  290,  210,  -17,  -96, -365, -572,  101, -673,   29,  205,  109,   81, -192,  338, 1040,  652,  366,  329, -270,  539,  542,  591, -312,  481, 1036,  361,  -42,  567,  238, -434,  109, -714,    4,   15,  201,  158, -266,  148,  117,  399, -564, -563,  -60, -231, -275, -227, -159,  301,  430, -136, -503, -647, -240,  -75,
    -153,  -98, -420, -224, -119,  126,  621,  147,  136,   57, -203, -440, -252, -162,  194,  -91, -532,  317,  220,   56, -145,  -89, -255, -535,  109,  -34,   68,  -63, -343,  -30,  101,  203,  -83,   69,  320,  333,  -42,  340,  257, -115, -210,  -87,  221,  202, -192,  567,  256, -430,  178,  -73, -177,   39,  186,  -35, -502,  100,  185,  485,  279,  -42, -160, -288,  -73,   -5, -237,    9,  429,  -20, -166,  -12,   49,  -42,
    -337,  -24,  161,  209,  139,  763,  172, -467,  437,  293,  192,  114, -371, -139,  400,  154,  312,  197,  339,  456,  192,  580,    6, -395, -201,  247,  449, -184, -358,  368,  441, -149,   35,  753,  316,   61, -157,  210,  112, -146, -128,  257,  251,  139, -117, -591, -500, -168,  175,  276,  331,   96, -513, -391,  172,  132,  192,  289,  180,  126,  261,   33, -185,  -43,   62, -284, -331,   35,  176, -177,   43,  128,
     678,  626,  546,  698,  -22,  467,  260, -431, -597, -259, -251, -579, -125,  395,  400, -126,  675,  529,  593,  688, -458,  290,  481,  -55, -130,  426,  816,  -41, -466, -869, -834, -358, -218,   27,   52, -173,  -23, 1531, 1431,  -48,  -75,  872,  486,  -99, -340, -903, -879, -444,  162, -353, -260,  318,  -26,  -94,  -23,  405,  298,  834,  845,  274,  -79,  108,  132,   -3,  338, -204, -349,  180,  427,  -69, -108,  -25,
    -565, -401, -319,  269, -256, -226,  -71, -623,   77,  514,  490,   35, -326,  309,  323, -231,  316, -277, -459, -588, -590,  -85, -148, -218, -302,  660,  990,  920,  490,  761,  309, -555, -259,   12,   37, -261, -489,  542,  454, -535,  827,  928,  656, -310, -558,  375,  784,  466,  440,  418,  634,   74, -643, -849, -294,  179, -373, -106,  -76, -374, -103,  693,  667, -121,   72,  631,  453,  472,  147, -341, -889, -636,
    -675, -938, -670, -290, -863, -123,  460, -297, -539,  556,  765,  803,  213,  166, -500, -819,  103, -295, -426, -876,-1196, -157,  159, -208,  218,  983,  708,  968,  491,  916,  558,   59, -378,  322,  748,  255, -256,  207,   53, -830,  503,  500,    2, -844, -233,  515,  910,  277,  431,  575,  165, -335, -398, -755, -428,  345, -173,  -97,  485,   60, -308, -256,  200,   38, -267,  272,  148,  362,  209,  348, -220, -667,
     207,  124,    7,  713,   27,  148,   89, -508, -259, -181, -200, -269, -495,  279,  269, -448,  726,   44,   83,  235, -491,   98,  195,   42,  354,  639,  975,  663,  418,  481,  -44, -905, -359,  149,  176, -420, -256,  430,  392, -305,  603,  957,  625,  317, -945,    3,  488,  391,  209,   -3,   60, -381,-1104,-1259, -681,   48, -103,  446,  466, -100,  -77,  943,  926,  -82, -401,   60,   12,  231,   82, -750,-1247,-1085,
    -177, -647, -357,   80, -536,  211,  624, -244,  323,  624,  666, 1100,  218, -153, -510, -516, -129, -493, -558, -808, -827,  268,  553, -307,  648,  787,  229,  520,  284,  740,  393,  288, -411,  719, 1278,  485,  183,  -26, -482,-1574,  201,  390,   42, -349,  -11,  461,  915,  629, -114,   59, -453, -650, -297, -554, -894,  -93,  230,  163,  503,    2, -900, -999,  -78,  461, -675,  125,  138,  129,  193,  563,  -58,-1237,
    -881, -349, -320,   76, -282,   94, -182,-1170,  867,  811,  546, -564, -870, -495,  236,  301, -268, -655,-1015, -710, -310,  457,  -94, -801, -754,   41,  608,  585,  279,  901,  403, -195,  189,  675,  317, -445, -846,   99,  181, -271,  925,  666,  944,  236,   72,  635,  939,  497,  365,  133,  323, -241, -655, -195,  340,  164,    8,  455,  -78, -139,   78,  213, -295, -346, -309,  133,  599,  452,  387, -427, -743, -401,
    -805, -511, -518, -116, -355,  529,  226, -808, 1112,  683,  614,  317, -537, -501, -116,  257,   96, -335, -683, -187, -241,  621,  220, -498, -263,   42,  447,  248,  665,  925,  412,   -8,  421, 1238,  723, -476,-1617, -492,  -48,  137,  526,  221,  759,  670,  291,  466,  762,  287,  165,   97,  135, -717,-1257,  -44,  557,  187,    7,  540,  208,  271,  540, -112, -984, -909, -661, -516,   45, -127,  -86, -918, -552, -305,
     644,  551,  354,  -98,   24,  144,  127,   80,  401,  516, -328,  838,  310, -265,  -81,  212, 1088,  191, -515, -681,-1026, -124, -369,  -69,  457,  238,  487,  199,  238,   74, -615,  251, -121, -150, -600,  162,  216, -630, -374,   83, -970,  393,  364,  902,  505,  325,  261,-3847, -221,   35,  358,   25,  -14,  -34, -185,   68,  423, -190, -322,  472,  858,  618, 1270,  676,-2771,  104, -746, -152,  372,-1058,-2456,-1322,
     291,  256,  128,  314,  508,  -38,  181,  246, -292, -138, -310, -471,  150, -330, -465, -410,  -80, -779, -372,  180, -433,   62, -211,  262,  109,   -5,  186,  146,  -29,   13,  223,   95,  123,  204,   19, -187,  872,  178, -149,  154, -609,-1017, -206,   13,  170,  208, -141, -365,   56, -238,  154,   65, -612,   -2,  198,   84,  378,  594,   39,  260,  204, -275,  129,  360,  -74, -482, -584, -879,   46,  557,  300, -110,
    1281, 1009,  740, -290, -319,  292, -297,  672,  330,  -42,-1657,  636,  796, -409,  134,  316, -845,  332, -169, -190, -930, -202, -623,-2884, -218,  320,  846,  784,  627,  -18, -340,  -40, -109,-1187,-1022,  -14,  176,  -53,  806,  156,-2072, 1041, -262,  260,  977, -208,  199, -656, -239,   29,   58, -248, -443,  -39, -376,  -28, 1064, 1240, -361,  859,  950,  889, 1242,  494,-2583,-3112,   63, -354, -117,-1942,-2311, -875,
     425,  407,   77,  443, -150,  710,  148,  202, -108,   46, -248,   69,  517, -544, -215, -203,-1056, -452, -373, -473,  -46,  285, -176, -119,   32,  120,  189,   68,  163,  288,  134, -121,  114,  140, -356, -149,  440, -428,   -9,  109, -688, -501, -170, -114, -384, -301, -348,  -70,   28, -113,  214,  148, -752, -118,   30,   56,  481,  338,  136,  116,  842,   72,  320,  479, -250, -490, -283, -497,  355,  339, -276, -377,
     808,  306,  275,  256, -181,  435,  265,  796,   -1, -100, -837,  -77,  837, -774,   23, -327,-2251, -374,-1138, -349,  -84, -198, -457, -998, -233,  180,  -23,  506,  318,  436, -214, -279,   60,    9, -491,  417,   71,  156,  243,  -80,-1639, -676,  312,    7,  148, -564, -577, -193, -108,   35,  143, -133, -873,  371, -140,  -52,  882,  700, -218,  369, 1162,  507,  887,  710,-1011, -801, -637, -326, -207,-1163,-1044, -659,
     159,  218,  229,  156,  929,  145,  116,  166, -532, -651, -271, -521,  -57, -284,  181, -268,  388, -220, -505,  157, -508,  -53, -196,  194,  128, -211,   44,   -2,  -78,  208,  120,  194,   80,  -23, -137,   -8,  502,  557,   67,  122, -934,-1257, -700, -280,  532,  223,  -62, -620,  173,   58,   61,  120,  -81, -103,  505,  269,  319,  244,  -53,  126, -122, -770,  -65,  146,  481,  295,-1012, -699,   23,  376,  461,  560,
     -17,  -55,  -49, -175,  334,  118,  861,  392, -780, -737,-1808,-1495, -321,   94, -415,-1008,  174,  159,  242,  922, -282, -414,  -94,  -48,   92,  -47,  -70,  129,  117,  238, -243,   -6,  279,  376,  250, -623,  373,  323,  849,  413, -851, -398,   66,  554,  748,  279, -604,  784,  272,  106,   92,  177,   87,   59,  525,  103,  164,  310, -412,   80, -146,-1078, -676,  219, -126, -314, -431, -639, -266,  953,  105,  -30,
    -698,-1138, -704, 1040,  521,  320,   81,  962,  122, 1314, 1375,  211, -496,  238,  162, -504, 1033, -660,-1133, -671, 1077,   37,  306,  490, -331, -200, -167, -217,  617, 1254,  460,  161, -224,  705,  716, -264,-1309, -731, -832,-1262, -244, -157, -182, -360,   39,  388, 1201,  549,  -36,  268, -112, -175,    9,  644,  550,  573,    0,  436,  480,   16, -243, -886, -878, -191,  -98, -111,  270,  -32,  586,  569,  604,   50,
     832,  180,  123,  114,   54, -105, -388, -309,-1404,-1698, -713, -710, -943, -325,   54, -333, -173,  -46,  -75,  -26,  377,  768,  100,  307,  562,   98, -404, -816,  668, -637,  328,  751, -572,  212,  368,  223,  352,  752,  356,  398,  139,  -34,  -53,  118,  -24, -179,  229,  117, -646, -414, -335, -111,   -1,  126,  906, -288,   85, -382,  310,  182,  278, -656, -999, -134,  166,   94,   93,  255,   92,  448,   47,   82,
     161, -519, -230,  403,  196, -157,  -40, -511, -509, -235, -677, -534, -247,  117, -271,  -83,  143,  228,  217,  159,  175,   93,  105,  919, -287, -596,-1329, -930, -624,  -89,  235,  533,  -11,  -93,  -29,   73,   85,  127,  521,  503,   19,   46, -222,  134,  187,  129,  216,  -65, -704, -894,  278,  508,  589,  448,  401,   41,  140,  -54,  236,  319,  127, -135, -736, -117,  100,   44,   54,  165,  275,  496, -200,  -92,
    -125,  -94,  259, -821,-2515, -709,   -3, -850,  633,-1644, -153,  320,  272,   12, -400,  800, -289,  925,  865, 1274,  674, -366,  433, -321,  200, -271,  891,-2069, -731,   37, -160,  887,  -54, -933,-1180, -128,  215,  705, -103,  162,  744,  944,  355, -186,   -6, -397,   59,  612, -332,  135,-2782,-2361, -846,-2137,-1820, -103,  859, -331,  936, 1028,  545, 1004,  897,  956, -242,  223,  -15, -245,  -34, -508,   25, -441,
    -463, -328, -494,-1045, -103, -155,  313,  -43,   69, -219,  -25,  -93, -193, -205, -547,  507,  417,  130,  333,  438,  228,  130,  732, -169, -145, -134, -524, -665,  -86, -360, -277, -398, -133, -349,   69,  142,   99,  -18, -446,  450,   71,  217,   74,   23, -109,  101,  296,  161, -501, -240, -534, -245, -354, -282,  353,  356,  108,  119,  312,  454,  487,  294,   77,  842,  169,  224, -103,   33,   65,    6,  -73, -755,
    -664, -518,  143, 1080,  -31, -410,  -95,-1007,  855, -336,  496,  406,  231,  -76, -235,  321, -110,  373,  484,  643,   83,  104,  196,   -1,  896,  369,  372, -996,-3757,  108,  433,  510,  142, -570, -215,  -41,   81, -380, -602,  198,  183,  540,  235,  457,  256, -573,   71,  233, -159, -727,  -21,-2814,-1216,-2354, -876,  368,  435, -230, -290,  391,  612, 1114,  591,  846,   17,  428,   51, -236,   76, -310,   11,  -31,
     165, -288, -609, -101,  174, -248,   30, -385, -370, -235, -136, -244, -322, -376, -232,  172,  266,  116,  186,  267,  200,  133,  -65,  501,  -48, -150, -817, -500, -286, -122,  191,  106, -225,  -15,  112,   97,  110, -117,  122,  826,  123,  163,   38,  136,  120,  189,   -8,  -37, -727, -380, -438,  -72,  -94,  280,  523,   54,  214,  -22,  491,  368,  304,   87, -248,  195,   84,  163, -177,   39,   96,  187,  -46, -591,
    -322, -960, -535,-1782, -901, -401, -111,  -55,  -98, -691, -219,  -40, -289,  -33, -738,  804,  249,  362,  193,  788,  757,  239,  479, -167,  -39,  140, -591,-1396, -304, -519, -543,  104,  380, -313,  -49,  130,  -33,  211,   85,   78,  451,   69,  144, -174, -200, -262,  522,  304, -226, -468, -645, -950, -533, -929,-1053, -111,  383, -170,  474,  786,  638,  726,  459, 1134,  -98,  204,  -22, -101,  -55, -151,  436, -839
};         /**< Weights of SVM classification models, based on HOG_360 descriptors. An individual model is trained for each feature point, and is used for main algorithm, during rough step. (If all values 0 => the considered descriptor is disabled). */

static const INT16 Frontal_MIDDLE_SVM_HOG_360_rough_posRoll[] = {
      90,-1119, -276,  362,  476, -871, -282,  658,  834,-2575, -410,  101,  -94,  157,  305,-1501,-1203,  115,  616,  299,  667, 1521,  769,-2157,  -21, -705,  404,   72,  391, 1051,  174,   45,-2361,  429, 1046, -207, -446, 1046,  792, -708,  -54,  975,  128, -146,  294,  749,  795, -534,  387, -108,  341,  564,   77, -237, -128,  539,  536,   21,  505, 1047,  261, -437,  658, 1037,  710,  152, -403,  -94,  575,  751,  858,  203,
    1484,-2264,  -56,   65, -419,-1082, -649, 1772, -806,-1481, -136,  -39,  141,  568,  477,-4253, -555,  838,  527,  564,  340, 1041,  123, -903, -544, 1152,  281,   47, -265,  765,    4,-1640,-1681,  669,  726,  264,  727, 1737, 1145,-1308,   77,  142, -208,  350, 1286,  317,  100, -842, -365, -678, 1070,  722,   87, -223,  509, -313,  -98,  242,  429,  201,    5,  178,  767, -443,  255, -140, -207,  466,  313,  421,  612,  536,
     -34,-1614, -433,  -77, -688, -296, -620, -744, -397, 1149,  568,   18, -182,  580,   68,-2359, -686, -495,  109,  622, -657,  280,  233,  296,-1209,  928,  658,  183,  -20, 1101,  738, -975, -279,  274,  463,  893, 1250,  463, -102, -765,  -73,  -40, -287,  553,  970,  894,  346, -559, -461,    3,  609,  -24, -158,  250,  974, -733,  368,  270, -268,  312,  134,  154,  308, -217, -164,   93, -269,  272,  253,  178,  437,  876,
      66, -110, -989,  -24,   94, -773, -531,  182,-1096,-1730,  -59, -460,  212,  472,  515, -544, -413,  622,  650, -507, -496,  861,  498, -998,  171,  -49, -173,   39,  373,  534,  -96,   30, -362, -991,  593,  806,  251,  383,  451,  687,  749,  174,  209,  248,  396,  956, 1211,  647,  254, -113,   66,  253,  125,  333,  295,  367,  302, -175, -174,  372,   53, -656, -467,  438,  448,  564, -706, -351,   69,  567,  574,  569,
     351,  -70,-2253,  392, -341,  186, -227, -741,  460,  124,-1102,-1060,  -22, -536,  506,  806,  391,  173,  -49, -112,  629,   33,  401,  605,  319,  528,    0,  297,-1320,   -9, 1372,  388,   36, 1057, 1112,-2729, -622,  517, 1480,  270,  482,  710,   21, -270,  705,  893,  -21, -488,  396,  -79,  887,  968,-1268,   -1,  479,  816,   45, -236,  586,  683,  731, 1062,  632,  159,  766, -397, -164, 1079,  636,  737,  675,   95,
     273, -585,-1486, -730, -691,   89,   86,  243,   69, -113, -965, -264,  190, -118,  106,  627,  254, -144,  109,  130,  373,   84,  335,  124, -389,  770,  744,-1489, -606,  687, 1088,  192,  336,  534, -547, -580,  871,  770,  335, -179,  281,  331,   61,   99,  457,   40, -136,  -20,  -92,  -79,  754,  133, -183,  645,  754,  383,  275, -582, -202,  520, 1472, 1137,  847,  417,  449, -181,   26,  351, -186, -588, -579, -177,
     -59,   91, -617, -408, -395,  -81, -919,-1049,  199,  117,-1095,  208,    8, -482,  800, -372,  302,  521,  577, -965,  -23, -417,  392,  335,  675,  680,  652, -208,-1123, -852, 1035,  832,  -38,  158,  680, -372, -647, -206, 1114,  994,  166,  889,  930, -513, -547, 1167,  347, -571,  533, -106, -130,  404, -570,  -84,  537,  945,  517, -124,  151,  349, -122,  502,  260,  482,  408,  137,  -35,  454,  -32,  992,  663,  218,
    -748, -110, -150, -409,-1101, -622,-1063,-2087,  376,  528,   90,  221, -109, -101,  979,  171, -562,  456,  721, -802,-1161, -206,  528, -371,  281,  291,  410, -349,-1143, -302,  684,  656,  791, -169,   85,  509, -403, -215,  683, 1142,  297,  388,  772, -254,-1263,  504,  362,  -70,  386,  183, -541,  148,  273,   85,  562,  314,  412, -395, -266,   18,  -27,  160,  555,  645,  379,  485,  -94,  -34,  384,  472,  451,  476,
   -1927, -606,  814, -166, -147, 1154,  513, -700, -799,  876,  703, -447,  409,  800,  651,-1159,   79,  207,   93,  301,  736,   79,  -64,  194,  646, -549,   35,  912,  162, -153,  311, 1216, 1323,  927,  483,   54,  804, 1270, 1800,  907,  100,  639,  712, 1122,  274,  -24,  -80,  629,  421,  401, -368,  201,  217, -530, -921,  219, -152,  329,   59, -253, -201, -228,-1202, -453, -793,  -28,  914,  -34, -396, -319, -907, -514,
   -1256, -439,  865,    9, -502,  754,  560, -621,   59,  533,  308,  -16,  404,  776,  787, -653,   51,  157, -197,  440,  770,   54,  -13,  453,  463, -233, -369,  692,  380, -169,  275, 1043,  984, 1133,  906,  564,  638,  867,  770,  402, -420,  219,  741,  819,  241, -122, -146,  561,  379,  183, -542,  -11,  218, -185, -404,   27, -404,  421,  159, -387, -378,  146,-1249, -821, -742, -216,  624, -426, -653, -381, -647, -655,
   -1047, -849,  900,  134, -156,  945,  408, -239, -463,  444,  684,   32,  -22, 1076,  896, -772, -176,  364,   75,  591,  872,  120,   87,   67,  190, -250,  -51,  817,  411, -477,   81,  837, 1257,  663,   73,  232,  876, 1090, 1052, 1126,  108,  664, 1126,  961,   67, -102, -112,   86,  301,   60, -289,   68,  117,  -52, -169,  167,  383,  570,  -96, -323,   -6, -116,-1080, -475,-1465, -343,  465, -646, -813, -362,-1158, -841,
   -1255,  743,  743, -733, -605,  844,  554,-1263,   42,  519,  265,  163, 1225,  829,  284, -652,   34,  -75, -390,  165,  876,  724,  335, -285,  -92,  -60,  498, -303,   93,  277,  851, -514,  409,  195,  232, 1131,  153,  614,  886,  833, -210,  402, -394,  690,  294, -470,  365, 1535,  448,  315,   22,  388,  -46, -208,    4, -111, -269, 1030, 1318,  488,  148, -507, -504, -371, -226,  -19,  688,  275, -475, -142, -342,  164,
   -1309,  789,  768, -443,  113,  820,  426,-1064,  161,   80, -312,  170, 1230,  851,  302, -663,  153,   85, -317,   67,  264,  786,  263,   40,  188,  -96,  137,  383,  326,  513,  807, -988,  731,  504,   20, 1189,  326,  -15,  444, 1717, -519,  192,  -52,  367,  272,-1107,   83,  650,  209,  416,  673,  525,  257,   25,  370, -410, -437,  711,  965,    8, -722, -486, -503,  -50, -100, -424,  461,  357, -122, -283, -166,   75,
    -723,   36,  450, -588, -441,  632,  431, -630, -339,  699,  298, -184,  324,  762,  540, -729,  290,   33,  -96,  114,  775,  132,    6,   66,  340, -222,  393,  485,  113,  151,  358,  504,  251,  368,  437,  413,  564,  911, 1277,   93, -206,  418,   75,  633,   22,  -52, -235,  954,  360,  287, -556,  227,   -5, -672, -427,  357,  -15,  556,  554,   62, -150, -246, -524, -441, -300,  195,  708,  154, -196, -432, -542,   28,
    -600, -111,  544, -286, -667,  512,  571, -561,   36,  486,   33,  139,  349,  549,  466, -388,  227,   82, -372,  105,  667,  -48,   71,  494,  414,  -91, -257,  516,  312,  244,  479,  754,  566,  913, 1085,  897,  544,  530,  631,   34, -471,   41,  242,  437,  -47,   47,  -74,  554,  363,   76, -488,  -81,   13, -216, -617, -108, -595,  272,  289, -391, -548,    2, -834, -691, -150,  165,  616, -357, -631, -465, -533, -352,
    -782,  312,  658, -544, -833,  726,  749, -933,  296,  601,  -10,  137,  839,  533,  152,  -38,  154,  -67, -409,  -60,  810,  333,  389,  360,  694, -114,   28,  436,  707,  578,  979,  102,  323,  958, 1217, 1687,  289,  332,  634,  572, -699,   60,  -36,  660,   23, -391,  113,  869,   79,  -61, -106,   83,  -92, -170, -535, -608, -533,  773,  639, -440, -145, -412, -469, -418,  164,  190,  767,   96,-1021, -406, -495,  -97,
    -964,   27,  722, -404, -884,  140,  771,  -58,  702,  342,  -31, -550,  545,  825,  362,  114,  356, -121, -310,   74,  308, -194, -514,  -43,  949,  -49,  -16,  331,  -63,  435,  570,  787,  117,  992, 1004, 1081,  860,  677,  827,  235,    6, -660,   86,  645,  110, -945, -766,  -19,  329,  490, -265,   -9,  481,  294, -229,   57,  -66,   66,  265, -563, -546, -208, -411,  228, -438,  872,  836, -720,-1145,-1073, -520, -603,
     224, -104,  553,  396, -631, -360, 1028,  571, -832,  -72,  644, -704, -694,  355,  396, -236,  125,  354,  -61,   48,  255,  367,  -48, -261,  344, -106, -373,   84, -167,   50,  607, 1128,  853,  324,   16, -102,  272,  826,  999,  819,  410,  730,  472,  678, -190,  116,  252,  114,  493, -229, -250,  -21,  182,  -25,  -36, -112,  633,  704,  253,  218,  812,  794, -296, -261, -807,  374,  488,  -45, -477, -476, -929, -100,
    -118, -117,  820,  275, -732,   83, 1194,  252, -480,  262,  471,-2002, -208,  653,  597,  208,  552,  422, -393,  329,  517, -159, -522, -453,  795, -101, -122, -203, -514,  -57,  541, 1048,  545,  390,  639, 1059,  395, 1751, 1694,  882,  324,  128,  351,  940,  350, -617, -274, -245,  506,  178, -218,  164,  823,  304, -186,  -88,  632,  795,  382,  405,  250,  200,  -41,  213, -845,  580,  524, -556, -998,-1098, -960, -101,
    -722,  444,  798,-1277, -948,  357,  932,  -36,  691,  432, -213, -961,  461,  425,  120, -243,  141,  197,   20,  -55,  300,   83, -230,  -87,  405, -135,  310,  386, -413,  513,  778,  861,  336,  417,  698, 1130, 1671,  979,  858,  553,  451, -814, -126,  776,  273, -935, -825,  279,  644,  708, -123,  -20,  297,  304,  140,  180,  -87,  286,  541, -641,-1035,-1052, -447,  -91, -339,  774,  560, -489,-1154,-1211, -438, -629,
     -63,  -66,  737,  -22, -810, -249,  790,  266, -188, -240,  307,   53, -245,  796,  508,  322,  301,   -5, -275,  151,  596,  353,  -87, -216,  460, -335, -380, -106,  244,  209,  250,  978, 1145, 1235,  620,  455,  778,  897,  961,  564,  -39,  418,  280,   59, -651, -471, -118,   21,  577, -106, -233, -295,  262,  240, -439, -533,  223,  309,  159,  -22,  239,  683, -494, -214,-1232,  253,  760, -162, -506, -771, -827, -643,
     229,   91,  396,  101, -648, -187,  860,  526,  -57, -348,  553, -251,-1041,    7,  421,  274,  192,  346,  213,  510,  163,  667,  426,  -15,   91, -124, -533,   49,  -53,   45,  723, 1198,  705,  381, -134,  181, 1309, 1172,  261,  402,  146, 1199,  718,  157, -260,   65,  -72,  -50,  -28, -448, -419, -167, -181, -515, -327, -485,  879,  772,   63, -243,  307,  940, -276, -438, -415,  153,  337, -129, -372, -428, -793,  -47,
    -516,  -84,  616,  -70, -636,  -13,  604,   20,  148,    9,   92, -267,  260,  821,  470,  174,  300, -301, -387,  204,  418,  -58, -366, -198,  722, -245, -231,  -16,   81,  230,  243,  696,  556, 1141,  788,  748,  436,  671,  823,  429, -159, -234,   99,  220,  -91, -654, -340, -166,  405,  139, -265,  -56,  549,  427, -327, -265, -228,   81,  139, -150, -221,   65, -506,  177, -769,  445,  769, -440, -769, -861, -622, -807,
    -625,   60,  811, -924,-1012,   43,  853,   47,  440,  696,  -13, -835,  268,  519,  504,  221,  239,   46, -252,   12,  314,   24, -366, -176,  325,  -71,  285,   69, -576,  375,  453,  669,  279,  368,  754,  989, 1121, 1328, 1269,  597,  519, -580,  -99,  844,  550, -868, -816,  100,  471,  465, -239,  132,  409,   73,  -64,  158,  368,  790,  553,  108, -335, -427, -259,  273, -757,  368,  443, -704,-1102,-1259, -548, -708,
     200,-1534,-1133,  298,  -70,-1289, -329,  151,  880,  321, -340,  129,   -3, -800, -240, -462,  147,  238,  490,  262,  820, -274,  195, -402,  214,  384, 1211, 1279,  579,  647, -845,  -13,  149,  542,  529,  679, 1063, 1613, 1165,  803,  255,  709,  594,  471,  524, -314,  402,  872,  693,  123,   56, -577, -967, -220,   18,   78, -199,  -28,  -11,  533,  503, 1015,  163,  275, 1140,  644,  332,  410,  -51, -194,  846,  455,
     420, -703,-1270,  397,  380, -291,  374,   93,  996, -707,-1268,  106,  -87,  472, -893, -898,  221,  246,  700, -204,  948, -103,  533, -203, -328, -447,  340, 1086,  370,  126, -241,  610,  419,  477,  484,  723,  369,  536,  420, -199,  819, 1082,  604,  300,  847, -191,  685, 1146, 1081,  348,  643,  -27, -555,   89, -210,  374,  230,  101,  337,  540,  701, 1513,  272,  624,  561,  536,  283,  335,  -35, -191,  367,  662,
     287, -232, -952,  623,  972,  403,  633,  -69, 1002, -932, -405,  527,  146,  248, -217, -768, -102,  312,  664,  -76,  631,  274,  451,  344, -434,   61, -748,  706,  506,   97,  675, 1251,  220, -612,-1143, -182, -937, -878,-1584,-1086, 1187,  585,   35, -472,  612, -173,  473,  589,  603, -205,  519,  197, -538,  543, -113,  637,  394, -150,  922, 1245,  610, 1203, -254,  357,  757,  971,  521,  285,  560,  369,  681, 1103,
      95, -324, -522,  294, 1278,  819,  735,  -53,  958, -490, -160,  937,   72, -114,  322,  248,  -74,  200,  372,  414,  518,  321,  215,  260, -123,  -36, -988,  658,  760,  512,  536,  979,  574, -931,-1736,  -52, -481, -547,  199, -877,  943,  127, -165, -754,  245,  731, -213, -392,    8,  319,  107,    6, -421,  461,  261, 1294, -139, -654,  168, 1171,  224,  449, -222,  332, 1208,  873,  317,  220,  371,  607,  875,  441,
    -289,  -76,   46,  -33,  915,  724,  414, -479,  618, -277,  207,  539, -589, -397,  471, 1053,  227,  324,  242,  560,  575, -139,  413,  491,  806, -127, -339,  305,  845,  435,  122,   82,  722, -183, -973,  472,  334,  826, 1303,   35,  659, -177, -652, -198,  678,  425, -392, -276, -138,  409,  219,  226,  -64,  442,  111, 1251, -485, -474, -547, 1047,  398, -710, -114,  351,  986,  608,  201,  -10, -213,  660,  172, -531,
       8, -733,  104,  795, -257, -219,-1252, -553,  643,  924,  632,  945,  709,  371, 1123, 1656,   51, -447,   72, 1374, 1199,  392,  571,   52, 1521, 1761,  614,  532, 1423, 1424,  263,  280,  -85,  342,  401, -311,  474,  364,  -26,  805, -361,  -23, -545,-1450, -151,  462,  498,  375, -307, -569, -205, -437,-1831,  -22,  423,  320, -529, -347,  198,  721,  648,  397,  401,-1082, 1046,  302,  323, -751, -658,  514, 1336, -684,
      30,  232,  107,   85,   -9, -300,   32,  468,   38, -845, -182,  628, -331, -848, -236,  198,  938,  892,  295,  363,   79,  391,  351,  994, 1363,  480,  511, -167, -641, -297, -569,  418, 1409,  812, 1069,  917, 1058, 1115,  441,  823, -535,  307,  378,  133, 1124, 1474,  304,  906,  418, -992,  260, -386, -335, -516,  254,  -27, -511,  178, -605, -831, -432, -276,  113, -145,-1079, -308, -293,  114, -308,   54,  393, -651,
     575, -124, -878, -149,  -80,   81, -978,-1173,  786,  381,  648,  612,  764,  -70,  242,  -49, -589,  330,   46,  -21,  236, -356, -345, -122, 1091, 1263,  708,  184,  -37,  423,  244,  542,  922, 1216,  677, 1128,  901,  457,  935, 1837, -723, -376, -517,  971,  456,  722, -103,-1087, -311,   50,  312,  449, 1023,  965,   49,  269, -519,  223,  590,  325, -194,  -58,  207,  923, -466, -797, -469,-1562,  -31,  839,  764,-1793,
    -187,  421,   -3, -254, -438, -183,  -89,   22,   66, -385,  383,  788,  -17, -108,  116,  262,  312,  148,  115,  689,  290,  917,  244,  603,  867, -180,  510, -795, -475,   33, -561, -112, 2053,  788,  516,  682, 1039,  321,  207,  880, -912,  448,   33, -127,  874,  687,  -25, -371, -194, -812, -329,  108,   20, -323,  374,  299, -847, -466, -447,-1057, -431, -170,  366,  245,-1349, -291, -232, -260, -590,  154,  295, -246,
      87,   17,-1030, -303, -347, -486, -846,-1075, 1179,  981, 1056, 1165, 1224, -282,  711,  615, -821,  -36,-1532,  891,  557,   55, -186, -721, 1267,  806,  747,  813, 1419, 1953,  533, 1152,  322,  871, 1048,  944,  182,  -27,  375, 1551,-1020, -542, -300,-1315,  569,  866,  -23, -541, -871, -437, -449,  105,  -10,  564, -134, -546,  333, -189,  205, -415, -341, -195,  444, -468,  454,  178, -315,-1141,  244,  779, 1117, -675,
    -212, -686,  316,  483, -302, -942, -463,   69,   37,   44,  218,  968,  387,  501,  136,  506,  453,  416,  417,  677,  222,   63,  729, 1515, 2478,  893,  481,  617,  378,  -37,  154,  563, 1046, 1436,  426, -364, 1384, 1161,  325,  -68, -679, -288, -628, -954,  -12, -132, -180,  610, -110, -999, -537, -980,-1108, -474,  484,  323,-1527, -428,  -70, -133, -676,  111,  111,  188,  -99, -168,   45,  227,  105,  784,  976,-1216,
     576,   96,  -65,   83,   80,  -52, -416,-1062, -149,  383,  516,  237,  318, -328,    4,  -91, -592,  212, -181,   41, -365, -484, -382,  -53,  902,  888,  369, -113,  331,  498,  535, 1304,  487,  842,  679, 1402, 1056,  -69,  576, 1088,  201, -558,-1067,  -24,  488,  918,    9,  -87,   11,  -87,  164,  172,  206,  551,  354,  928, -407, -296,   81, -539, -665, -360, -148,  250, -800, -406, -305,-1520,  212,  875,  736,-1083,
    -388,  221, -237,  140,   70,   61, -383,   36, -437,   85, -304,-1045,  347, 1005,  142, -333, -156, -510, -390,   59,  305,  -82,  -80,  190, -312,  352,   12, -407, -272,   47,  750, -532,  289,  745, 1004, 1544,  420,  164,  391, -486,  701,  421, -578,  226,  217, -242,  -63,  308,  105,  482,  375, -532,  -75,   -1,  626, -380, -107,  459,  512,  338, -403, -545, -169,  133, -413, -683, -990,   29,   -6, -358,   48,  282,
     318,  543,  426,  359,  538,  883,  451, 1580, -370, -231,  -79, -274, -311, -157, -370, -313, -708, -265,  462,-1223,  134,  914,   58,-1032, -584, -518, -504, -323, -492, -176,  -79,-1237,  958,  360,  634, -308,-1087,  118, 1174, -519,  565,  441,  285,  456,   18,  107,  467,  137, -616,  -12,  570,  405,  206,  299,  437, -534, -377,  383,  351, -332, -294,  118,  426, -532,  -62,  375,  334,  647,  881,  -28, -652,  162,
     266,    8, -140,  500,   37,  328,  124, -167, -168,  160,  528,  317,  110,  474,  408, -307,  204,  681,  529,   -6, -387,  -90,  432, -337,  195,  564,  811,  219, -524, -531,  168, -159,  169,  280,  644,   83, -358, -164,  485,   57,  -48,  451,  663,   44,   19,  205,  196, -386,  381, -263,   52,  -70,  202,  -77, -487,  -88,   74,  -90,  -77,  -64,  230,   96,  -62,  -39,  135,   13, -250,  -70,    1,  -78, -146,  163,
     336,  640,  185,  296,  851, 1597,  299,  716,  -33, -136,  141,    8, -465, -507,  -13,  386, -303,   25,  357,-1196, -211,  368,   35,-1326,-1532, -519, -325,  -80, -693, -203, -150, -700,  225,  160,  237,  303,  -14,  538, 1308,-1244, 1001,  677,  634,  282, -560,  -16,  905, -157,  -82,  706,  912,  574,   -8,  -22,  360,  238,   46, -330,  321,   27, -259,  428,  404, -119,  -51,  600,  250,  -73,  276,  136, -279,  112,
     -45,   11,  104,  196,  -14,  -26,  -65,  279, -378, -189, -117, -251,  126,  630, -102, -436, -168, -179, -127, -251,  115,  212,   62,   32,  167,   81, -113, -306, -430, -205,  310, -244,  -28,  278,  179,  -34, -142,  264,  435, -326,  233,  173,   49,  268,  109, -317, -169, -104, -232,   88,  350, -127, -196,   67,  455, -223,   22,  538,  376,   29,   35,  -98,   -2, -176, -113,  -96,   10,  322,  134, -333, -266,  180,
      49,   73, -337,   -9,  -62,   53,  131,  -48, -127,  170,  -64,   55,   31,  536,    5, -615,  -76,   59, -154,  -70,  297,   46, -127,   52,   24,  561,  366, -288, -442, -253,  614, -300, -168,  654,  668,  717,   35,  -60,  -11, -330,  231,   64, -306,  126,  123, -291,    5,  192,  -48,  370,  516, -142,  -38,  181,  445, -103,   22,  238,  164,  -33,  -35,  -63, -278,  -31, -162, -376, -323,  -88,  -91,  -88,   54,  332,
     862,  908, -125,  516,  840, 1264,  439,  361, -347,   70,  157, -233,  -91,  366, -207,  196,  174,   -3,   51,-1203, -887, -398,  261, -727,-1330, -450, -330, -799,-1361, -218,  235, -137, -476,  347,  560, 1005,  265,  686,  738,-1290,  663,  732,  647,   52, -729,   60, 1085, -763,   54,  586,  533,  566,   80, -320,  340,  605,  644,    0,  559,  175,  457,  445,  352,  239, -270,  166,  317,   12, -408,  -25, -185,  465,
    -164, -292, -308, -345, -467, -101,  526,  431,  221,  -72,   76,  198,   16,  538,  167, -330, -306,  100,  434,  -97, -316,  422,  424, -452,  103,  -48,  446,  321, -224, -299,  159,  305,  790,  988,  901,   57, -490, -179,   84, -313,  -29,   90,  490,  -15,  -43,  190,  329, -209,  212, -253,   37,  184,  216, -143,  -51,  158,  149, -144, -379, -156,  326,  180, -455, -398, -260,  -65,  -53,  113,  258,  -74, -324, -132,
    -248, -549, -565, -608,  563,  506,  881,  678, -154, -224,  127, -411, -881, -250, -235, -384, -147, -137,  246,  220, -138,  807,  448, -451, -330, -941, -147,  -27, -348, -204,  417,  537, 1493, 1926, 1160,  469, -779,   31,  800,  760,   51,   25,  503,  -23, -125,  545,  263,-1078,  202, -657,   51,   82,  311, -178,  -41,   80,  448, -184, -276,  348,  500,  238, -649,  -69, -321,   11, -452, -412,   95, -157, -527, -858,
     302,  -37, -451, -180,   74,   62,  462,  408, -293,   34,  -32,  -48,  -10,  -44, -385, -179, -145,   19,   31,   32, -247,  107,  337, -573, -434,   -7,  -25, -264, -503,  -49,  554,  332, -106,  385,  618,  262, -452,  213,  413,  -20, -149,    5,  387,  145,  -33,  551,  363, -327,  -37, -310,  -21,  128,  194,  -97, -252,   72,  610,  430,  197,  185,  132,  -80, -294,   17,   28,   15,  194,  -45,  -19, -227, -362, -225,
     394,   -3, -162, -195, -137,  -18,  213,  116,  293,  599,  432,  347, -236,   73,  502, -523,  -30,  387,   42,  321,   35,  104, -301, -104, -186,  602,  961,  264,   28,  397,  430, -245,  147,  873,  693,  176,  -20,  220,  256, -414, -341,   20,  -80,  -14,   78, -251, -100,  217,  -78,   88,  384, -129, -412, -318,  265,  150,   -8,  297,  312,   95,   19,   64,   38, -371,   38, -366, -183, -174,  326,   99,   59,  330,
      99, -133,  -70,  332,  352,  392,   36, -416,  551,  750,  702,   42, -264,   85,  803, -171,  -66,  432,  193,  249, -376, -192, -223, -306,  -41,  645,  943,  491, -315, -186,  130, -273,   54,  722, 1024,  303,  -85,  378,  763, -224,  -68,  459,  216,  154,  375,  186, -176,  -29,   40, -259,  113, -302,   -8, -270, -224,  -92,  183,  213,  235,  122, -200,  -52,  123,   70,  176,  -45, -200, -117,  123,  142,  146,   32,
    -150,  779,  170,   31,  501,  832,    0,  211,  423, -452, -380, -707, -864, -536,  303, -468,  183,  907,  486, -830, -402,  341,  315,-1326,-1530, -230,  520,  607, -180,  234,  186,-1168,   85,  472,  788,  294,   56, 1028, 1591, -673,  690,  921,  757,  404,   52,  -56,  257,  522, 1007, 1254,  968,  776, -554, -156,   67,  430, -496, -531,  255, -274, -118,  230,  445, -308,  601,  708,  657,  222,  234,  183, -225, -293,
     -23,  629,  -58,   38,  436,  339,  -59,   11,   28, -512, -221,   27,    1,  241,  228, -702,  537,  602,  117,-1350, -873,  -20,  587, -647, -800,  410,  637,  358, -934,  -44,  110, -351, -299, -138,  918,  787,  594, 1204, 1069, -781,  224,  708,  502, -142, -329,   13,  379, -125,  802, 1070,  707,  651,  -20, -286, -224,  526,  269, -186,  309, -129,  177,  -98,   76,   29,  108,  307,  403,  126, -150,  -89,   59,   69,
    -201,   93,   29,  -88,  274,  303,    2, -374,  483,  301,  115,    6, -420, -214,  368, -177,  258,  546,  293,  361, -395,  165,  246, -409,  187,  537,  462,  932,  266,  406,  178, -620,   25,  652, 1127,   91,  -67,  441,  886, -287,  -92,  741,  394,   53, -280, -428,  -83, -365,  267,  324,  370, -128, -516, -528, -504, -532, -229,  -36,  524, -264, -700, -272,  328,  -23,  207,  186,  251,   45,  283,  -35, -460, -486,
     270,  216,  116,  204,  252,   32,  222,  155, -112, -278, -116,  -36,  166,  480,  115,-1098,  814,  749,  426, -173, -623, -228,  758,  -43,  390, 1130,  533,  598, -561,   44,  365, -173,  277,  540, 1167,  780,  308,  856,  551, -943, -656,  541,  612,  -48,  -64,   60,  369, -438,  760,  332,  505,  661,  106, -117, -609,  132, -344, -288,  327, -700,  -89, -352, -425, -719,  268,  170,  314,  220, -198, -367, -105,  122,
     380,  421,   99,  -59,  130,  292,  308, 1016,   93,  -29, -298,-1738, -677, -256, -102, -808,   -6,  777,  372, -370,  -84,  474,  -64,-1345, -728, -487,  200,  398,   87,  510,  619,-1460,  542,  936,  821, -808,-1182,  210, 1477, -187,  472,  583,  980,  886,  584,  -77,  -57,  736,  189,  138,  699,  629, -510,  155,  300,   -5, -222,  471,  311, -227,   18,  569,  310, -220,  255,  235,  384,  343,  700, -140, -523,   36,
     208,   92, -149, -504, -262, -169,  129,  236,  215,  298,   51,  490, -242,  216,  236, -452,   54,  286,  -24,  189,    4,  363,  -63, -490,  -58,   39,  394,  311,   63,  247,  300, -226,  301,  981,  787, -192, -663, -184, 1012,  -52, -149,  174,  529,  629,   17, -622, -420,  144,  167,  257,  496,  -22, -589,  -91,  100, -162, -177,  461,  430,   41,  160,  421,   89, -516,  -21, -119,  -42, -284,  160, -228, -477,    9,
     536,  670,  330,  441,  261,   25,   72,  -27,   89,  -78, -821,  220,  177,  609, -929, -270, -440,  417,  129, -424, -796, -299,-1500,-2671,  587,  785,  989,  -55, -167,  293,   12,  255,  -39, -657, -360,  258,  618, -698,   74,  144,-1373,  992,  223,  176,  217, -323,-1278,-1316,  -70,  199,  -68,  162,  -82, -780, -834,  -72,  110, -226, -189,  301,  214, 1598,  714,  140,  179, -105, -239, -540,  550, -570, -191,  747,
     403,   23, -844, -576,  365,  -10, -291,  -94, -616,-2404,-2224, -703,  -38, -310, -420, -227,  -11,   64,  284, 1256,  -24,   57, -175,  -13,   92,  323,  133,  531,  503,   98,  252,  245,  300,  135,  162, -237,  988,  721,  -26, -129, -237, -555,-1305,-1371,  105,  651,   93, -237,   63,  -74,   42, -145, -407, -208,  188,  -39,  195,  -29,  121,  -35,  -40,  192,  354,  464,  474,  195, -218,   -4,  -83, -286,  223,  484,
     682,  514,  305,  266,  430,   -5,  -44,   18, -769, -255, -492,  224,  291, -221, -298, -312,-1088,   25,    8, -273, -702,  152, -730, -724,  514,  425,  213,  431, -156,  221,   -5,  207,  329, -166, -196, -335,  608,  -77,  208,  384, -805, -157, -309, -627,  329, -583, -738, -248,  -72,   62,    2,  -35,  -57, -340, -424,  -99,   30,  167,  -16,  446,  -60,  844,  285,   59,  241,  -74, -210,  198,  579,  -36,  279,   67,
     451,  744,  -29,   23,  367,  -68,   -2,  148, -923,-1998,-3999,-1046,  297,  188, -860, -533, -242,  -29,  606, 1135, -307, -459,  227,  -10,  -25,  613, -378,  944,  -90,  443,  492,  120,  414, -145, -160, -127, 1003,  -39, -103,   22,  101,-1276,-1406,-1185,   -1,   67,-1102, -692,  -89,  124,   23,  -99, -519,   81,  -11,  -82,  140,  -21,   46, -174,  120,  155,  471,  206,  592,   49,  109, -335,  232,  610,  449,  513,
     499,  279,   17,   31,  437,  -40,   -8,  208, -977, -307, -368, -394,  653, -312, -457, -418, -762, -179, -312,   29, -474,   84, -303, -258,  287,  207,   16,  561, -164,  429,   18,  256,  431,   27, -115,  156,  659,   54,  272,  124, -496, -341, -433, -461, -115, -356, -653, -328,  -31,   32,  -54,   44, -231,   19, -299, -101,   52,  345,  -21,  324,  -72,  875,  630,   94,  594, -142, -190, -297,  671, -249, -158,   36,
      82, -469, -693, -722,  440,  -27, -191,   42, -487, -535, -542, -251, -121,  123,  130,   47,   57, -155, -436,  366,  171,   82, -403, -294,  186,  150,  208,  196,  601,  752,  106,  280,  128, -182, -298, -348,  477,  679,   22,  187, -140,   95, -678, -759,  275,  653,  234,  -34,  199,  -43,   41,   -1,   -7,  103,  315,  145,  248, -138,   34,  105,   65, -408,  230,  326,  296,  332, -468, -185, -231, -571, -131,    0,
     148,  -26, -657,  -63,   24,   23, -159,  -71, -870, -555, -321, -626,   37,   53, -236, -746,  247, -158,   84, 1393,  481,  172,  250,  690,   53,  121, -222, -182,  226,  385,  262,  430,   80,  105, -349, -184,  432,  382,  222,  274, -920,  -23,   32, -416,  355,  895, -185, -586,  262,   15,  210,  236,  277,  248,  101,   25,  245,  168, -197,  -13,   48, -279,  274, -294, -150,  110, -309, -365, -323, -121, -186, -409,
     471,  179,  323,  389, -476, -322,  313,  110,   68, -473, -682,-1090,  737,  537,  199, -254,  516, -330,  446, -132, -168, -117,  320,  717, -318,  -54, -195,  981,  691,  513, -167, 1020, -696,   79,  251, -237, -655,  399,  940, -630, -457,   54,  -26, -499, -876, -245,   40, -118, -276,  416,  -79, -260,  143,  333, -394,-1348, -686, -417,  193, -112, -178, -213,  161,  -74,  752,  344,  288, -141,  194,  378,  249,  297,
     -88,  -55,  226,  523, -694, -646, -144, -108, -335,-1730, -580, -310,  168,  394,  378,  277,  288,   30,  267,  249,  264,   47,  101,  482,  902, -120, -484,-1130,  667,  150,    4,  389, -278,  -80,  268,  295, -174,  477,  306,  417,    3, -293,   12,  166,   53, -229, -297, -348,  124,   46,  -90, -847, -117, -223,  626,  330, -692, -633, -138, -208,-1415, -481,  155,   -1,  208, -310,  125,  174,   23,  477,  -33,  175,
      76, -386, -362,  -37,   71,   49,  -82, -172,  -17, -288,  -43,  271,  116,   76,  292,  760,  151,  187,  305,  239,  321,   53,  111,  221, -249, -414, -590, -108, -208,  -70,  109,   46, -147, -348,  -72,   84,  252,  -25,  366,  425,  286,  132,   70,  160,  188,   34,  -33,   12,   22, -491, -384, -354, -365,  -51,  445,  494, -243, -658,   58,  193,  -79,   99,    1,   94,  385,   37,  111,  232,  104,  116, -280,   39,
     371, -447, -205, -338, -301, -312, -255,    5,  304,  275,  368,  765,  351,  174,   96,  190,  -47,   93,  -54, -116,   75, -107,    6,   34, -230, -500,   78, -916,-1356, -424, -135, -270,  484, -326,   69,  154,  255,   31, -246,  435, -149,   34,   27,  -51,   43,   40,  395,  -74, -495, -717,  -54,-1071, -761, -751,  -68, -134,  723, -527, -276,  238,  -93, -357, -897,  748,  113,   78,  239,  399,  366,  233,  980,  -76,
      34,-2730, -943, -284, -123, -226,   30,  526,  542,  313,  180,  598,  365,  400,  333,  230,  -94, -295,   94, -250,  -48,    3,  475, -249, -359,-1133,-1332, -909,  -87, -385, -163, -351,  801, -443,  -46,  346,   81, -460, -353,  589, -315,  -84,  127,  105,  -17,  180,  381,  -30,  178,  237, -730, -477,  -24, -385,  -69, -100, -312, -449, -273,  511,  232, -410,  449,  789,   75,  268,  133,  219,  358,   80,  263,  -11,
     567, -311,  -99,    1,  213, -741, -191, -149,  391,  622,  636,  624,  202,  442,  315,  324,  -98,  393,  -21,   82,  147,   25,   32,   38, -428, -109,  -41,  302,-1867,-1727, -902, -497,  266, -325, -149, -136,   90,  -66, -646,  -18,  -22,  -43, -156,   79,  125,  -93,  324,   19, -197,   47,  346,-1455,-2206,-1417,   96, -388,  684,-1325,  478,  180, -187, -560, -930,  997,  131, -294,  -36,  115,  401,  756,  998,   33,
    -234,-1635,-1278, -641,   37, -297,  147,   43,  559, -197,   59,  695,  237, -167, -106,  457, -112,   15,  233,  -52,   35,   98,  229, -125,  215, -222, -809, -265,  176,   42,  -93, -155,  -10, -378,   53,  208,   24, -344,  356,  863,   -5,  280,  226,  130,  215,   11,  140,   65, -172, -226, -775, -229, -426, -408,  377,  212, -248, -632, -113,   92,  283,  148,  457,  368,  417,  205,   99,  170,  234,  150, -122, -169,
     251,-1127, -114, -494, -396, -301, -350,  381,  258,  101,  175,  496,  474,  145,   48,  279,  -67, -107, -192, -258,   13, -162,   66,  -59, -329, -732, -293, -846, -690, -542, -316,  178,  800,   -2,   58,  498,  345,  -13,   34,  425, -283,  -77,  146,   50,  -41,  149,  788, -305, -498, -361, -494, -839, -219, -371, -174, -532,  565, -451, -397,  285,  -80, -344, -539,  567,   65, -211,  129,  369,  261,  296,  642,   86
};

static const INT16 Frontal_MIDDLE_SVM_HOG_360_rough_negRoll[] = {
     -47,  -73,  118,  371,  587,  397,   88,  590,-1075,-1101,  127,  476,  785,  460, -636,  -59,  204,-2271,  -77,  348, -643, -170,  146, -254, -323,  -26,  717,  473, -507,    8,  847,  726,-2574, 1121, 1036,   21,  215, 1466,  558, -479,  285,  -35,  515,  288,  381, 1323,  -69, -818, 1020, -173, -434,  737,   58,  659,  692,  665,  734,  569, -182,   60,  153,  643, 1048,  582,  823,  876, -108,  340,  843,  467,   70,-1234,
   -2500,  892,  710,  406,  395,  413, -636,  203, 1056,-1375,  108,  159, -551, 1023, -577,  306, -758, -660,   84,  -37,-1670,-1080, -106, -373, -645, 1088, 1128,  345, -735,  465, 1348, -560, -686,  657,  123,  -34, 1399, 1353, -213, -855, -160,  831,  829,  904, 1121, 1313,-1029,-1690,  689,  -12,  164,  511,  288,  803, 1136, -107,  423,  174, -149,  605,  499,  371,  683,  -25,  540,  -80,  -35,  666,  990,  595, -163, -595,
   -1227,  790,  508, -689, -516,  512, -362,-1721,  654,  278,  679,  610,  330, 1144,   85,  470, -475, -240, -247, -959,-2982,-1283, -799,-2212, -238,  905,  530,  413,  -54,  408,  609,-1504,  512,   18, -195,  925, 1321,  779, -234, -463, -471,  464,  252,  439,  900,  824, -306,-1293,  -11, -132,  550,  434,  539,  514,  512,  412,  -24, -251, -502,  492,  699,  618,  199,  -18,  217, -568,  300,  486,  343,  610,  104,  323,
     116,  155, -205,  289,  140,  440,  168,  417, -140,-1147,  -68,   89,  676,  100, -198,  177,-1167,-1680, -599,  286,  217,  113,  119, -656,  149,   85,  358,  302,  -54, -113,   18,  475, -613, -580,  558,  357, -174,  404,  810,  982,-1939,  802,  793, -361,  222, 1155,  761, -653,  375,    1, -192,  500, -161, -562, -682, -195,  545, -199, -629,  315,  486,  949, 1209, 1611,  171,  781,  -71,  -96,  385,  758,  643, -238,
     289,  576,   80,-1265,-1792,  755, 1481,  628,  108, -411,-2352,  619,-1073,  260,  103,  -55,  363, -284, -939, -117,  541, -225, -894,  485, -192,  148,  912,   30, -566,  770,  730,  312, -230,  997,  425,-2187, -822,  784,  965, -489,   73,  391, -700,   20,   91,  162, 1025,  364,  -90, -389,  159,  621,  254,  838,  726,  591, 1020,  458,   45,  568,  962,  612, -390,  222,  545,  376, -149,  363,  531, -136, -209,   71,
    -496,  692,  738, -457,-1176,  505,  850, -489, -478, -102,-2283,-1532, -555,  542,  505,  239,  -49,-1025, -105,   86,  190, -571, -932,   77,  281,  227,  189,  841,  731, 1241,  993,  414,  838,  621,-1036, -309,  655,  491,  458,  274,  109, -151,  -52,  168,  -17, -125,  748,  415, -333, -744,  551,  459,  632,  589,  617,   88,  370, -179, -151,  330,  473, -521, -871,   28,  228,  125, -158,  265,  422,  369,  473,  131,
     493,  468,  715, -592, -882,  126,  897,  298,   45,  -51,-1263, -745,-1538,  353,  489,  106,  120,  -86,-1769,  652,  665, -521, -927, -261,  295, -185,  168,   22, -737,   79,  379, 1207,  125,  672,  662,-1265,-1192, 1036, 1497,  561,   15,  200,  796, -339, -830,   31,  677, -254,  429, -208, -164,  160,  509,  556,  382,  322,  144,  403,  235, -129, -489,  704,  136,    7,  633,  956, -527, -307, -323,  494, -160,   37,
     423,  107, -374, -545,  172,  192,  180, -574,    1,  477,  848, -457,-1497,  -27,  500, -179,  -17, -377,-1232, -157, -252, -473, -251, -597,  414, -296,  -54, -116, -453,  312,  837,  815,  706,  351,  290, -178, -649,  -85,  443, 1072,   96,  563,  727, -811, -535,  623,  968,  -69,  204, -258,    4, -230,  725,  362,  178,  215,  297, -237,  241,  267, -212,  246,  124,  109,  -58,  543,   39, -427, -658,  861,  187, -186,
      66, -295,   33,  255, -247, -390,   41,  324,-1173,  -40,  718,  469,  283,  594,  548,  316,-1087,  934,  131, -614,   66,  941,   83,-1304, 1030, -115, -606,  591,  109, -872,-1084,  685, 1333,  855,  420,  333,  661, 1427, 1515, 1359,   18,  323,  -56,  362,  763,  450,  326, -617, -900,  456,  436, -841, -788, -580,-1586,-1435,   18,  608,  852,  478,  249, -248, -389, -333,  188, -241,  461,  542,  149,  -76,   79,  421,
      88, -386,  -96,  379,  -66, -495, -178,  299, -674,  -25,  348,  746,  122,  360,  824,  551, -388,  756,   56,-1027,  -11,  819,  166,-1021,  779,  114, -712,   17,  -13, -893,-1115,  222, 1308, 1100, 1063,   98,  225,  923,  779,  911,  306,   -9,  -74, 1013,  850,  568,  418,  -20, -779,  889, 1012, -434, -633, -556,-1279,-1448, -671,  239,    1,  -31,  291, -409, -167, -574,   -4, -285,  513,  366,   42, -240,  311,  507,
     -13,  -20,  221,  143, -142, -193,  147,  290,-1106, -197,  409,  681, -279,  132,  397,  471,-1374,  818,  472, -739,   12,  968,  382, -971,  815, -130, -835,  479,  328, -851,-1039,  285, 1236,  738,  430,  363,  587,  927, 1079, 1754,  410,  316, -147,  390,  922,  769,  499, -432, -401,  572,  848, -341, -670, -488,-1265,-1251, -761,  533,  276,  -88,  -88, -491,-1101,-1111,  -11, -133,  726,  672,  140,  145,  352,  297,
      76,   14,  456,  152, -330,  -74,  336,  295, -850,  668,  -83,-1132, -294,  405,  415, -895,  692,  646,  -69,  318,  612, 1187, -315, -768,  893,  535,  865,  547,  154,  253,   43, -330, -122,   12,  284, 1009,  955, 1197, 1055,  405,  -55, -439, -144,  407, 1311,  691,   25, -182,  -62,  535,  459, -805,  -75, -937, -568, -531,  216,  247,  772,  687, -270, -292,  917,  887,  100, -253, -200,  573, -143,   -8,   18,  224,
     568,  271,  395,  221,    9,  474,  742,  188, -354,  573, -392, -108,  291,  454,    3,-1157,  134,  470,  149,  295,  594,  977, -161, -623,  251,  799, 1305,  186,  -56,  -73,    6, -287,  225, -136,  373,  819,  463,  343, 1364, 1490,   -7, -584, -100,   95, 1334,  774,   23,  -60, -177,  352,  199, -415,  -41, -905, -446, -407, -262,  121,  851,  962, -428, -200, 1118,  361, -139, -438, -490,   17, -523, -296, -567, -144,
     305, -409,  408,  565, -482, -527, -197,  538,-2016,  482,  288, -487,  239,  629,  667, -168,  390,  820, -153, -111,  174, 1177,   -3, -826, 1008,  344,  117,  307, -211, -273, -591,  333, 1036,  613,  413,  572,  907, 1707, 1742,  431, -269,  -79,  -65,  820, 1117,  547,  -68, -552, -640,  488,  597, -813, -124, -969,-1131,-1037,  455,  381,  785,  632,  163,  -38,  232,  264,  158, -173,  153,  540,  -81, -202,  247,  812,
     216, -446, -309,  327, -265, -391,  -78,  447, -363,  103,    2,  150,  160,  518,  868,  287,   -8,  665,  -55, -545,   38,  658,  -20, -729,  287,   85, -248, -173, -147, -420, -816, -140,  922,  880, 1239,  635,  475,  955,  779,  529,  -88, -255, -301,  807,  775,  216,  235,   54, -533,  873,  540, -772, -850, -665, -989, -912, -158,  117,   17, -232,  182, -537,  158, -236,  -47, -264,  198,  449, -317, -347,  502,  592,
     173, -267,    5,  321, -283,  -77,  312,  635,  103,  313, -255, -253,  338,  529,  833, -291,   53,  757,  -43,  -34,  270,  822, -262, -813,   19,  263,  433,  -24,   74, -154, -524, -727,  515,  650, 1249, 1248,  593, 1029,  981,  809, -169, -378, -373,  500, 1058,  263,  189,  261, -143,  804,  295,-1209, -711, -803, -740, -488,  -63,  144,  325,  184, -282, -571,  713,  235, -208, -244,  -93,  603, -579, -401,  267,  282,
     393, -197,  131,   40,  387,  -10,   39,  710,  -15,  268,  486,   34, -579,  756,  756,  364,  -13,  788, -406,-1050, -528,  512,  650, -466,  706,  688,  209, -397,  520, -145, -142,  222,  495,  806,  978,  819,  364,  688,  776,  572,  622, -357, -179,  436,  911,  227, -137,  342, -390,  550, -192, -671, -616, -649, -358, -656, -343,  134,  416, -325, -673,-1005,   93, -344,  -16, -508,  181,  309,   16, -333, -199,  180,
     117, -437,  -65,  -29, -256,  309,  686,  781,  105,  217,  487,    7, -551,  223,  715, 1026, -689,  643,  631, -988, -909,  488,  744, -566,  609, -383,  309, -241, 1351,  288, -460,  271,  977,  186,  141,  283,  628,  756,  506,  140, -244,  432,  -48,  -77, -464,  760,  227,   42,  199,  548,  -38, -246,  143, -309, -244, -511,  413, 1184,  908, -183, -292, -442, -460,   95,  328,  -19,  234,  397,  -68,   -3, -186,  -80,
      72, -153,   65,  221,   51,   -2,  130,  696, -196,  284,  634, -285, -642,  492,  667,  256, -531,  395,  -23, -522, -494,  393,  587, -381,  548,   46,  329, -210,  844, -220,  -79,   26,  340,  370,  303,  170,   50, 1138,  800,  474,  402,  326, -207,  235,  403,  334,  116,   71,   91,  625,  178, -299,   30, -514, -443, -242,   67,  508,  491,   40, -347, -453, -225, -151,  205, -527,  271,  334,  314, -385, -566,  -25,
     542,   47,  343, -149,   37,   90,  145,  831,   28,  661,  395, -372, -679,  888, 1020,  -55,  107,  849, -766, -941, -238,  388,  847, -131,  889, 1061,  591,   74,   88, -101,  -78,   79,  180,   53,  667, 1185, 1030,  984,  996,  804,  793,  -64, -224,  166,  765,   64, -419,  368, -577,  445, -310,-1348, -840,-1080, -350, -757, -309,  -77,  556,  352, -459, -933, -138,   -9,   59, -294,   83,  266,  187, -210,  -88,   96,
     -42, -433,    0,  155,  355,  391,  331,  802,  154,    1,  570,  290,  -29,  117,  519,  811, -557,  644,  303, -818, -881,  727,  715, -798,  645,  -42,   96, -725,  838,   72, -492,    0, 1607, 1194,  887,  297,  515,  614,  309,  302,  472,   29, -117,  711,  100,  980,  585,  711,   39,  742,  190,  145, -106, -484, -474,-1035, -398,  631,  822, -472, -367, -434, -341, -180,   65, -136,  -91,   62, -588, -530, -164, -117,
       7, -356,   20,  133,   26,  264,  710,  226,  137, -301,   91,  144, -563,  284,  794, 1110, -457,  700,  689,-1092, -956,  371,  737,   64,  368,  -40,  168, -492,  547,   51,-1005,  269, 1061,  -24,  381,  589, 1510,  350,  -58,  258,  353,  129,  -47,  219, -893,  736,  444,  279,  304,  380, -379, -143,   26, -187, -356, -167,  -24,  905,  606, -429,  -26, -449, -443, -660,  499,  629,  391,  204, -394,  307,   25,  216,
      97, -351,   81,  188,  444,   40,  -49,  585,  124,    8,  429,   13, -361,  452,  523,  320, -282,  493, -116, -490, -450,  522,  451, -585,  345,  222,   41, -448,  518,  -78,  -13,  -57,  751,  947,  753,  427,   59,  560,  478,  486,  451, -261,  -67,  402,  614,  445,  201,  248, -375,  516,  135, -150, -348, -508, -441, -569, -319,  261,  255, -452, -559, -691,  -12, -481,  -78, -440,  117,  302,  -81, -519, -208,    3,
     211,    0,  176,    7,  140,  -28,   89,  616, -413,  601,  692, -568, -835,  638,  735,  262, -200,  685, -524,-1111, -589,  443,  937, -174,  936,  641,  501,   46,  524,  -70,   27,  318,   34,  410,  706,  923,  672, 1484, 1051,  684,  817,   33, -339,  430,  950,  214, -102,  150,  -60,  754,  -44, -662, -425, -824, -367, -415, -241,   38,  387,  -44, -320, -979, -191, -149,  154, -364,  292,  338,  143, -635, -417,  149,
     279,  511,  220,  150, -466,  198, -306,  833,  121, -386,  357,  889, -478, -202, -826,  -19,  290,-1222,-1536,  224,  187, -401,-1226,  -64,  433,  609,  760,  244,  926,  416, -310,  520,  699,  504,  553,  161,  814, 1196, 1660, 1062, 1277, 1223,  383,  219,  -11, -881,  630,  600,  474,  327,  628, 1166,  442,  851, -150,  -25,  495,  -10,  -45, -214,  263,  152,  994,  492, -542,   71,  103,  685,   94,   20, -184, -970,
    -215,  695,  230,  190, -234,  544, -144,  964,  114,-1311, -682,  984, -930, -900,  506,  -44,  394,-1291, -635,  400,  124,  332, -320,  376,  347,  613, 1132,  837, 1207,  722, -144,  837,  698,  458,  443,  387, -228,  384,  545,  341, 1085,  327, -486, -307,  603, -253,   94,  395,  332,  273,  542,  563,  669,  360, -183,  -36,  511,  327,   95,  193,  627,  275, 1504,  681,  -36,  667,  368, 1077,  362, -247,  105, -572,
     -41,  699,  309, -105,  325,  461,  260,  616,  537, -514, -898,  969, -812, -256,  233,  162,  574, -882, -274,  255,  -53,  619,  389,  971, -524,   25,  602, 1190,  616,  449, -190,  610, -189,-1142, -617,  238,-1080,-1619, -852, -930,  720, -752,   97, -426, 1243,  706,   60,  541,  365,  524, 1014,  739, 1111,  684,  378,  564, 1259,  898, -107,  375,  277, -203, 1169,  623,  192,  525, -256,  575,  649, -115,  524, -571,
     439,  384,  213,  -64,  238,  212,  320,  505,  959, -137, -539,  951,  268,  338, -116,  118,  272, -527, -269,   83,  -66,  718,  830, 1267, -785, -205,  110,  934, -344, -222,  724,  227,  -49,-1760, -878,  600, -837,  207, -538, -460,  635, -975,  -31, -145,  963,  528,  478,  746,  253,  332,  891, 1195,  419,  887,  623,  360, 1164,  150, -643, -154,  282, -211,  441,  219,   12,  110,  316,   32, 1288,  258,  446, -386,
     590,  248,  299,  226,  484,  413, -128,  567,  610,  211, -312,  632, 1060,  479, -377, -584,  -94,   43,  -57, -264, -443,  432,  707,  917, -213, -616, -156,  651, -248, -393,  411,  685,  405, -867, -280,  730,   58, 1322,  835,  374,  349, -357,  -80,  762,   69,   92,  421,  834,  -11,  203,  603,  983, -516,  222,  651, -213, 1092, -552, -500, -483,  337, -110, -739,  399,  220,  248,  395, -118, 1238,  124,  443,  -73,
    1386,   82, -402,   -8,   10,  582,  395, 1203,  958,  665,  937,  685, 1682, 1162,  376,  726,  809,   66, -707,  -16, -535,-1286, -246, -254,-1508, -532,  -34, -339,  394,  490,  447, -128, -278,  391,  313,  -92,  788,  -17,  390,  521,  542,  603, 1747, 1550,  349,  265, 1440, 1440, -748,  328,  285, 1064, -674, 1334,  528, -690,  735,  187, -362, -523,-1051,  440,  381,  634, -459, -210, -510, -342,  318,  437,   31,-1866,
      32,   93,  264, -551, -205, -368, -422,  177,  574,  523,  302,  630,    9,   75,  -40,  711, -176, -750, -114,  477,-1023, -907,   64, -104,  783, -377, -257, -596, -975, -115,  560,  349,  950,  536, 1018,  759, 1651,  833,  428,  795,  206,  598, 1109,  967,  404,  254,  319,  -25,-1349, -438, -642, -455,-1425,  615,  736,  -66,  257,  454,  175, -446,  799,  167,  -38, -306,  349,  276,   77, -284,  276,   -7,  910,  876,
     404,  308, 1032, 1054, 1151,  401,  498,  110,  592, -245, -982,   56,  274, -252,-1061, -386,  109,  139,  346,   97,  539,   73, -288,   13,  194,  453,  277, -546,  963,  325, 1586, 1305, 1069, 1205,  855, 1553,  926,  532, 1301, 1230, -174,  600,  607, 1509,  477, -605, -352, -784,  136, -328, -320,-1178, -684,  434,   58, -363, -922, -645,  187, -613, -154,  143, -240, -445, -454,  315,-1219,  481,  -58,  284, -603, -310,
      56, -182,  208, -543,  -84, -362, -421, -308,  250,  463,  323, -147, -127,  -76, -361,  282,   40,  -23,   57,  516, -964, -400,  -26,   58,   -8, -841, -410,  188,  -94,   12,  811,  444, 1250,  586,  662,  344,  946,  455,  -58,  999,  -70,  304,  854,  844, 1225,  522,  453,  272,-1384, -369, -338, -759, -951,  656,  809,  131, -490,   41, -317, -353,  223, -117, -319, -622,  125,  142,  -91,  -44,  873,  317,  500,  193,
     622,  420,  392,  424, 1541,  725,   51,  171,  994,  219,   73,   34,  525,  162,  470,  407,  402,  307, -714, -220,  109, -464,-1006, -292, -979, -593, -267, -642,  637, -222, -149,  -48, -333,  408, 1385, 1010, -110,  291, 1136, 1345,  693,  477,  899, 2456,  554,   94,   56,  385,  244,   40, -222, -109,-1193,  970,  748,   39, -217,  -66, -422,-1518,  256,  107,  136, -654,-1034, -541,-1046, -134,  346,  498, -454,-1165,
     918,-1556,    3, -816, -753, -237,   77,  566, 1222, 1097,  934, 1192,  639,  706, -328, 1229, -311,-1071,   32,   80,-1085, -890, -485, -350,-1390, -310, -579,-1028, -586,  -45,  853,  537,  939, 1048,  879,  310, 1563,  383,  -34,  176,  788,  720,  791, 1296, 1143,  537, 1951, 1419,-1189, -312,  227,  485, -754, 1119,  785,  298, -361,  218, -245,  327, -422,  457, -160, -356,  115, -432, -398, -845, -582, -140,  586,  -61,
     748,  114,  155,  349,  661,  244, 1009,  314,  809,  428, -396,   78,  288,   85, -158,  -36, -180,   14,  470, -199,   24,  -70, -173, -408, -141,   29,  479, -999, -424,    3,  739,  941,  848,  591,  910, 2281, 1007,  293,  328, 1210, -949,  534, -174,  897, -133, -607,  132, -579, -254, -224, -336,-1478, -223,  328,  208, -639,-1341, -476, -569, -963,  229,  345, -138, -506,  181, -364,-1063, -145,  374,  419, -385,   69,
     217,  250, -172, -152, -405,  500,  837, -145, -470,  155, -221, -142, -430, -283, -315, -968, -621, -572, -643, -242,  709,  950,  587,  651,  -68,  491,  -69,   61,-1173,  284,  580, -136,  533, 1295, 2277, 1659,  870,  882,   70, -845,  -81, -229,-1246, -400,  528,  437, -257, -366, -456, -511,   54, -400, -955, -542, -149,  135,  422, -305, -235,  487,  -80, -694,  224,  510,  118,   34, -663,  240,  124,   -6, -181,  339,
   -1142,   75,    6,  170, -655,  258, -404, -897, -271,  157,   61, -358,  131, -218,  348, -102,  545, -114,  870,  853,  382,  451, 1278,  857,   84,  635,  754,  659, -809, 1074,   70, -766, 1077,  565,  347, -429,-1229,  761,  700,  255, -850, -355, -471,-1337, -121,  252, -181,-1394,   28,  306,  171, -188,  428, -189,  -21, -405,  147,  564,    2,  598,  254,  373,  457,  460,  567,  512,  602,   68,  599,  333, -299,   90,
     306,   32,  389,  -29,  -95, -303,   91,   43,  349,  447,  616,  293, -508,  513,   63, -241, -184, -162,   -9,  398,  123,  213,   -4, -146,   -8,  -74,   16, -338,  231,  -99, -251,   83,  182,  685,  888,  144, -396,  257,  217,  -19,  273,  953,  615, -182, -232,  435,  383,   11, -178, -190, -359,   27,  313,   64,  102,  348,  100,  318,  307,    0, -374,   30,   67,   18, -122,  367,   92,  -86,  130,  260, -329, -413,
   -1251,  414,   -8, -320,-1269,   33,  388, -195,   16,  109, -155,  -29,  360,  -32, -517, -521,  295,  210,  636,  333,  720,  307, 1643,  833,  252,  614,  659, 1015, -208,  885,  -20, -603,  386,  259,  176,  226,-1135, 1332,  575,   20, -103, -332, -584,-1583, -706, -176, -223, -743,  -61,  237,  616,  -19,  104, -284,  158,  248,  -27,  339, -345,   44, -135,  411,  444, -214,  664,  912,  723,  -73,  238,  349,  -16,  -56,
      45,   25,    5, -138, -465,  282,   92, -193,  -28,  -16,   16, -265, -167, -297,  -15,  -14, -162, -392,  -32,  251,  366,  418,   39,    7,   93,  377,   19, -122, -263,  314,  457,  -58,  179,  493,  262, -117,  -42,  339,  173, -358, -202,  -32,  -17, -351,  294,  508,  -31, -426,  -34,  178,   40,   17, -189, -344, -214,  -23,  123,  144,  347,  503,  -10, -279, -103,   57,   92,    0, -194,  -31,   63, -221,  -92,  144,
     -96,  433,   93, -307, -442,  429,  401, -301,  211,   81,  -70,  236, -324,  169,  556,   20, -343, -310, -292, -170,  431,  534, -101, -469,  -25,  479,  116,  -51, -213,  317,  191,  -45,   39,  911,  994,  788, -315,   89, -180, -488,  326,  434,  -52,  102,  299,  168, -304, -218,  118,  -59,  -72, -264, -113, -335,  -81,  253, -154, -388, -143,  148, -394, -456,  187,  328,  187,   29, -232,  212,  169,  -35, -143,  216,
   -1227,  461, -296, -734,-1011,   97,  924,  140, -302,  -80, -225, -359, -329, -383, -141, -361,  358,  427,  564,  334, 1573,  453,  911,  490,  399,  280,  422,  568,   99,  451,  101,   40, -170,  645,  330,  940, -512, 1136,  104,-1118, -291, -504, -524, -589,-1255, -105, -185, -509,  681,  323,  349,  -55,  141, -662,  -39,  862, -329,  336,  410, -404, -494,  410,  104, -287,  384,  575,  -18, -607, -562,  453,  325,  188,
     -67, -163,   67,  -76,   57, -126,   36,  301,   56,  -62,  169, -116, -612,   18,  541,   41,  -26, -335,   73,   47,  -41,  121,   57,  -68,  131, -310,   51,  227,  196,    7, -286,  125,  717,  665,  651, -173, -325,  -23,  -68,   34, -285,  362,  569,   21, -305,  617, -252, -440,  -89, -308, -374, -144,  326,   65,  -97,  -83,  -33,  162,  238,   16,  -34, -278,  -55,  -34, -137,  515,  376,  -54,  -93,  446,  180,  -39,
     183, -893,-1249, -142,  225,  -96, -157,  376,-1768, -428,  182, -571, -335,  183, 1112,  383,  283, -247,  353, -370,  207, -448,   22,   45,  210, -798,  905,  819,  449,   91,  -99,  346, 2126, 1367,  913,  441, -481,  514,  236,  516, -496,   49,  418, -410, -738,  769,   16, -316,   90,-1102,-1278, -516,  246,   -4, -430,   46,  389,  582,  636, -159,  126, -226, -716, -476, -681,  402,  492,  129, -400,  693,   54,  -38,
    -311, -171, -227, -182,   63,   74,  214,  167, -324, -123, -238, -470, -544, -141,  698,  137,  268,  138,   41,  -10,  398,  -96,  -36,    4,  322,   39,  226,  335,  -75, -167, -349,  117,  -10,  254,  341,   10, -355,  540,  343, -127, -375, -114,   86,  202, -294,  314, -226, -539,  399,   15, -134, -150,  233, -288, -417,  192,   48,  425,  619,   57, -190,   12, -103,  103, -138,  384,   77, -300, -259,  475,   77, -215,
      11,  517,  669,  194, -348,  439,  -98, -391,  319,  521,  176, -169, -305,  407,  466,  112,  490, -146,    1,  274, -176,  121,  332,   21,   49,  657,  449,  -50, -392,  196,  223,   10,   74,  651,  292,  145,   64,  477, -176, -342,  219,  826,  577,  202, -150,  162, -533, -504,  -67, -256,    8,  121,  161, -150,  -77,  -18,  -58,  -62,  -84,   81,  -46,  -67,   92,  220,  -63,   34, -247,  372,  -86, -480,  -79,  204,
     258,  184,  439,  -56, -308, -219, -194, -342,   52,  718,  746,  555, -168,  803,   68, -300,  337,  -75, -137,  112, -381,   42,  407,  353,  144,  222,  450,  -59,  -41, -168,  208,  355,  296, 1009,  717,   44, -226,  772,  373,  -81,  475,  951,  663,  -48, -295,  146, -191, -314,  -98, -211,  -68,  181,   46,  151,  150,  121,  142,  238,  220,  176,   67,  118,  -41, -199, -317,  126, -251,   30,  -78, -223, -284,    7,
    -860,  477,  858,  169,-1304,  315,  329, -414, -736, -382, -440,  407, -434,  288, -506, -869,   62,  182,  789, -110,  203,   12,  825,  494,  397,  750,  913,  673,  493,  269,  -40,   51,  301,  793,  452,  114, -633, 1581,  993,   19,  597,  517, -256,-1483,-1209,  185,  214, -186,  235,  636,  709,  597, -290, -208,  166,  241, -288,  257, -516, -544, -270,  432,  197, -102,  772,  969, 1250,  998,  428,   47, -142, -547,
    -415,  375,  777,   -4,-1287,  -49,  472,  -87,-1677, -293,  -14,   79, -800, -114, -267, -732,  -26,  102,  397,  394,  991,  310,  304,  127,  874,  971,  569,  484,  720,  -63,  -89,  625, -778,  844,  993,  566, -147, 1460,  193,-1209,  441,  192, -518, -748,-1367,  636,  517,   75,  359,  394,  224,  216,   17, -522, -142,  700, -268,  312,  509, -185, -222,  308,  561,   49,  582,  690,  138,  188,    6,  311,  160, -531,
     362,  286,  528,  261, -409,  248,  165, -409,   11,  117,  315,  477, -159,  364, -210, -455,  -73,   26,   96, -173, -379,    9,  293,  273,   61,  399,  774, -101, -379,  -79, -437, -269,  138, 1131,  651,   34, -295,  898,  427,  -45,  915,  466,  562,  181, -601,  177,  410,  264,   23,  237,  191,  203, -512, -469,  -36,  281, -259,  520,  -24, -240,  -31,  336, -264, -717, -122,  376,  317,  257, -545, -518, -541, -507,
     199,   22,  374,  124, -487,  -21,  438,   22,  697,  146,  362,  271, -587,  275,  259, -261, -644, -121,   63,  228,  278,  173, -141, -254,  833,  584,  209, -151,  296, -452, -780,   96, -233,  916, 1172,  469,   52, 1186, -139, -976,  445,  461,   54,  -19, -199,  388,  337,  183, -500,  -11, -169,  -38,    4, -528, -335,  284,   90,  523,  609, -205, -688,  124,  604,  295,  -27,  573,  314,  225, -229,  135, -142, -792,
   -1617,  181,  642,  629, -739,  615,  -22, -968,   22, -305, -633,   23, -740,  294,  297,  -39,   42,  -29,  786,   54,   75,   -5,  389,  496,  -91,  617,  842,  309, -150,  393,   13, -423,  962, 1013, -173, -370, -890, 1231, 1395,  856,  350,  721,  473, -931, -416,   59,  -63,-1155,   87,  473,  440,  169,  106,   76, -126, -198, -208,  256, -324,  277,   87,  112,  -95,  245,  852,  807, 1277,  905,  617, -209, -243,   37,
     -92,  491,  829,  951,   24,  826, -205, -697, -109, -171, -352, -149,-1271,  116,  500,  121,  252,  177,  291,  366,  260,  294,   49,  305,  -48,  657,  627, -848, -541,  385,   34,  -84,  957, 1293,  620,  402,-1049,  654,  956,  452,  690,  600, 1241,  390, -182,  389,   70, -605,  345,  393,  265,  334,  205,  -97, -356, -223, -943,  290, -448, -465, -879, -490, -393, -121,  798,  574,  378,  895,  211, -632,  -72,  157,
      88,  -49,  387, -104,   15,   47,   -9,  147,  632,  702,  610,  382,  332,  278,  424,  210,   44, -113, -304,  574, -194, -149, -762,  232,   93, -150,  -70,  -10,   14,  381, -122,  135, -156, -144, -321,  277,  -15, -663,  -49,   72,  294,  -48, -109, -437, -475, -835,-1847,-1873,  132,  -55, -233,  131,   41, 1001,  871,  373,  174,  463,-1398,  695, 1002, -948, -828, -148,-1494,  360,   41, -193, -384,  106,-1476,-2267,
     -50,  247,    5, -120, -123,  232,   85,   47,  676,   31, -192,  567,  464, -120, -207,  253, -692,-1281,-1629, -242,   43,  160, -325,   35,  130,  228,  280,   -1,   56,  141,    5,  216,  224,   41, -390,  -21,  853,  328, -319,   37, -203, -793, -180,  235, -154,  -74,   48,  170,  179,  100,  205,  424, -172, -132,  158,  209,   82, -102, -610, -251,  390,  486,  133,  322, -255, -779, -327, -184,  203,  368, -393, -431,
    -115,  -69,   74,  -46,   42,  -14, -109,   76,  744,  412,  252,  306,  176,  107,  191,  349, -339, -204, -434,  373,   10, -235, -315, -282,  -22,   17,   48, -152,  -84,  391,   26,   37,  152,   82, -312,  479,  427, -219,    6,  261, -922,   64, -499, -233, -266, -122, -425,-1335,  401,  211,   61,  110,  -70,  976,  231,  343,  251, -255, -524,  740,  759, -863, -355,  -73,-1077,  -53, -782, -510, -140,  -86, -730, -767,
    -255,   81, -420,  -78, -239,  471,  -20,  -39,  631,  219,  635,  569,  226,  303,  477,  359, -256,-1029,-4447,   10,  525,   14, -184,  -72,  138,  178,  -69, -319,  -26,  405,  166,    7,  307,  -69, -474,  816,  599, -395, -568,   51,-1048,-1721,-1292, -376, -368, -133, -440,  -94,  207,  121,  291,   90,  -24,  273,   86,  341,  553, -329, -472, -311,  824,  496, -319,  273, -445, -744,  270,  196,  -88,  -70, -382,  -15,
    -262, -250, -168,  -47,  -64,   31, -185,   21,  510,  209,  180,  263,  274,   76,  245,  451, -554,    6,-1371,  227,  381, -400, -427, -372,   44,  127, -144, -294, -309,  866,  145,  -62,  510,   98,   46,  880,  484,   83,   -9,  360,-1073, -339, -987, -344,  198, -335, -637, -739,  395,  167, -229,   39,   64,  707,  338,  297,  346, -534, -597,  574,  546, -626, -435,  -52,-1042, -627, -387, -525, -575, -189, -394, -164,
     298,  376,  245,  191,  246,  130,   49,  372,  360,   -1, -457,  -19,  780,  326,  109,  147,   11, -372, -550,  126, -165,  -65,  129,  115,  147,   95,  222,  324,   27,   -7,   17,  161,   59,  -78, -503, -131,  481,  438, -102,  342,  -51, -746, -585, -318,   52,  112,  -75, -245,  270,  107,  121,  443,   88, -285,  166,  109,  203,   49,-1037, -236,  136,    6,  169, -121, -480, -340, -619,   71,  550,  482,  -19, -605,
     272,  280,   28,  280,  476,  105,   17,  258, -327, -599,-1698, -349,  273,  366,  424,  183,  521,  234,  -87, -100, -119, -149, -676, -670,  138,   -5, -290,    5, -344, -288, -241,   36,  296,  269,  -37, -280,  412,  303,  460, -210,-1103, -480, -124,  890,  402,    7,  170,  654,  187,  127, -308,  203,  179,  -38,  465,   32, -189, -136, -630, -689,    4,  147, -487,-1318, -785, -103,   44,  112,  334,  624, -213, -128,
    -124,  423, -331,  495,  698,  318, -116, -160, -996, -661, -452,   89, -244,  186,  524,  709,  382,  314,  167,  427,   96,  299, -312, -452, -527,  -26,   35, -402, -123,   50, -255, -807, -223,  272,  109, -679, -589,  917,  378, -665,  922, -196,  -71, -316,  940, -145,  513,  697, -122,  285,  347,  679,  291,  243,  384,  182, -124,  198, -412, -553, -131,  148, -246, -199, -254,  -88,  395, -335,-1066, -393,  352,  136,
    1401,   86, -157,  232,  731,  254,  177,  489, -645, -342, -564, -868, -752, -240,   50,   33,  -56, -643,  -42,  151,  -54, -150,   16,   15, -460,   28,  -36, -922, -668, -192,  898,  347, -138, -367,  115,   94,  328,  233,  388,  433, -186, -202,  114,   57,  408,  244,  367,  223, -326, -314,   99, -149, -453, -152, -114, -314,  -18, -185,  181,  242, -328,  251, -301,   50,  231,  214,   15,  262,   33,  103,  257,  280,
     503, -448, -135,   92, -360, -443,   87,  180, -273, -623, -576, -525,   36,  179,  135,  -98, -837, -826, -555,   83,   54, -254,  -23,  437, -915, -741,  144, -144,  -14,  278,  662,  274, -378, -306, -233,  151,  234,    5,  738,  521,  270,  252,  176,  190,  310,  115,  805,  614, -211, -494,  329,  320,   -1, -134, -599, -232,  107,   65, -154,  251,  342,  268, -442,   66,   -9,   38,  -46,  208,  144,  346,  112,    4,
    -261,  -27,  -48, -904, -607, -581,   68, -676,  203, -410, -203, -671, -232, -209, -166,  291,  249,  226,  425,  652,    7,  -45,  -11,  407, -522, -258, -152, -710, -251, -557, -441,  347, -299, -151,  -89,  339,  266,  113,  -79,  573,  400,  181,  330,  503,  162,   13,  164, -125,  120, -131,  -46,  195,   50,  182,  -27,  565,  367,   10,  134,   75,   76,  232,  656,  -51,  -14,  -22,   36,  -89,  -56, -307, -225,  -60,
    1107,  643, -156, -240,    6,  215, -467, -309,-1044,-3848,-2159, -917, -556, -920,  209,  296,   49,  -12,  733,  453,  156,  -11,  -62,  355,-1119,-1314,-1213,  116, -726,-1118,   87,   -4, -141,  -98, -201,  402,  -13,  -65,  -65, 1012,  954, -408,  622,  -21,  129,  460,  425,  -79, -343,  110,   25,  603,  563,  449,  620,  215, -183,   19,    0,  116,  262,  471,  165,  104, -112,   21,  103,  -78, -166,  -35,  129, -522,
    -414,  133,  416, -450,-2412,-1469, -237, -781,  222, -811,  -65,   63, -325, -828,  385,  176,  452,  332,  628,  512,  -44,   36,  177,  272,  160,  203,  847,-1349,-1020, -944, -373,  214,  227, -310, -541,   19,  167,   54, -446,  586,  -57,  893,  793,  572,  250,  -23,  174, -171, -516, -260,  -69,  173,  628, -230, -432,  571,  285, -138, -236,  112,  122,  555, 1347,  210,  168,  -84,  195,  -71,  -45, -719, -645,  -74,
    1000,   15, -146,   -5,   38, -197,   -8,  -50, -574,-1209,-1285, -548, -157, -327, -227,  -28, -470, -573, -100,  344, -155, -276,  -18,  398, -979, -843, -596, -260, -204,  100,  617,  110, -372,   31,  108,  326,  -52,  -57,  506,  892,  308,   54,  233,  115,  233,  210,  125,  489,  -76, -194,  191,  451,  356,  199, -265,  -89,    5,   78,  -38,  180,  411,  273,  167,  -46,  -85,   73,  -48,   42,   -4,  172, -142, -429,
      29, -319, -199, -767, -275, -300,   89, -470, -399, -355, -343, -969, -404, -478, -310,  650,   26,    3,  291,  493,  217,    7,  -63,  425, -448, -439, -348, -457, -322, -652, -339, -119,  136, -111,   15,  429,  125,  260,   48,  653,  563,   44,  218,  281,  239,   12,  463, -154, -319, -177, -158,  589,   28, -166, -247,  668,  316,  -19,  333,   62,   63,  615,  862,  -74,   58,  -90,   54,  -38,  -85, -284,   18, -234
};

static const INT16 Frontal_MIDDLE_SVM_HOG_360_fine[] = {
     526, -493,  -83,   83,  830,  198,  348, -177,-2064, -220, -423,  -14, -465, -136, -492, -536,  -32,   27,  537, 1219,  418,  231,  275, -574, -592, -445,  271, -387, -623, -292,  214,  459,  884, -123, -356,-1317,-1468, -337,  -82,  296,  134,  423,  439,-1012,-1748,  703,  300, -898,-1208, -401,  719,  491,  323, -581, -491, -681,-1706, -697,  -46,  -64,  628,  682,  751,-1092,   13,  483, -391, -313, -908, -121,  -90,  314,
    -907, -429, -479, -188, -783, -632, -373, -575,  521, -216,  379,  745,  607,  691,  662,  644, -239,  -98,  353, -116, -442,   59,  250,-2021, -474,  141,  490, -336,-1612, -419, -565,-1310,-1670,  406,  465, -812,  198, 1350,  529,-1545,-2430, -598, -297, 1256,  896,  322, -434, -437,  439,  453,  312, -369, -429,  297,  727, -173, -510,  355, -178, -363, -365,  -47, -497,  200,  575, -930, -797, -935, -971, -419, -628, -631,
    -608,   68,  692,  146,  339,  742,  161, -961,  644, -222, -271,   60, -182,  425,  402, -733,  140,  540,  350,  232, -565, -372, -262, -782,-1731,  330,  346,   43,  100,  735,  115, -897,-1415,  429,  698, 1172,  799,  154, -466, -328,  339,-1014,-1206, -180, -373,  -63, -402,-1393,  667, -195, -553, -325,  230,  434,  207, -168, 1145,  -34, -650, -859, -497, -814, -382, -142,  202, -598, -149,  834, 1155,  618,  470, -701,
     289,  438, -295,  256,  274,   26,   34,   96, -152, -597,    5, -134,  132, -213,  144,  229, -226,   98,  415, -276,   39,  587,  332,  -98,   -4,  138, -395,   76, -160, -685, -467,  222,  286, -443, -102,  427,  184,  267,  424,   10, -521, -175,  429, -309,-1027,  223,  322, -385,    6,  407,  446,  270,  -69,  221, -395, -295, -147, -366,  191,  144, -220, -741, -766,  467, -363, -700, -696,  -79, 1310,  914, 1049,  629,
    1196,  552,    0, -102, -754,  241,  186,  457,   27, -363, -225,-1875, -827, -449, -141, -418,   79,  -74, -533,  542, -217,  350,  272,  816,-1149,  443,  516,  199, -975,  310,  662,-1756,-1305, -332, -165,  928,  312,  -46, -358,-1367, -374,  221, -381, -443,  407,  188, -237, -579, -258, -461,  441,   26,  319,  -66, -154, -850,   34,  -25, -580,-1684,-1148,  774,  640,  645,  429,  731, -362,-1134, -630, -501, -526,  260,
    -299,  385,  101, -250,  -88,  386,  609,   58, -169,   22, -575,  -16,  187,   99, -291,   51,  280, -290,  450,  321,  108,   63,   40,  314, -326,  386, -161, -535, -414,  385,  255,-1072,  460,  -28, -444,  332,  -21,  384,  268,  207,   63, -427,  166,  -42,  228, -492, -764, -201,  -59, -697, -747, -360,  647, 1070,  977, 1335,  149,  250, -347, -214,  409, -839, -788, -247,  275,  418,  488,  -31, -276, -386,  272,  -40,
     -68,  303,   44, -167,-1876,  283,   42, -441,  703,  432, -236,  349,  786,  537,  651,  606, -110, -410, -446, -842, -687, -293, -597, -651, 1309, -181, -512,-2401, -508, -229,  344,  886, -816,  405,  495,-1834,-1480,  383, 1262,   99, -407,  449,   99, -390,-1248, -399, -354,-1514, -856, -858, -879,  474, -601, -633, -389, -940, -442, -177,  387, -346,  155, -454, -100, -415, -312,  273,  469,  352,  -34,  786,  316, -354,
      68,  131,  369,   18, -180, -153, -257, -351,  201,   -8,  -69,  -32,  -62,  123,   98, -102,   23,  304, -149,  -71,  -47,  147,  717,  156,  107, -372, -406,  -58, -416, -148,   11,    4,  302,   -2,  -71, -291, -151,  -88,  153,  313,  -68,  383,  508, -329, -137,  -35,  356, -132,  126, -216, -316,  -39, -482,  212,  311,  741, -315, -370, -124,  325, -200,  -73, -370, -188,  -63, -340,  -41,  115, -256,  -78,  172,  142,
    -525, -635,  292,  -66,  -84,  107,  146, -396, -338,  -64,  332, -171,  535,  239, -305, -767, -558,  617, -100, -411, -690,   56,  162,   53,  197, -438, -648,   94,  573,   25,  452,  813,  342, 1068, 1147,   64,  101,  450,  557, -292,  399, -106,  374,  741,  -46,  606,  520,  212,  263,  266,   57, -555, -999, -693,  -65,  971, -481,  -76, -466, -573,  390, -233, -204, -416,  791,  179,  929,  587, -381, -164, -249, -187,
    -929, -893,  -80,  -96,  177,   29,  426,  384, -190,  -46,  142,   93,  254,  156,  282, -740,  -41,  234, -320,  591,   95,   45, -271,  130,  603, -193, -387, -354,   25, -348, -161, 1126,   12,  563,   14, -793,  228,  807,  322, -250, 1090,  333, 1019, 1046, -824,  235,  423,  -53,   55,  458,  372, -361,-1247, -259, -614, -583,-1062, -551, -378,  125,  448,  307, -133, -298, -106,   48,  410, -649, -509, -391, -225, -807,
    -552, -166,  281,  408,  258, -231, -139,  -10, -960, -899,  -35, -273, -126,  276,  353, -263,  -11,  333,  246,  207,  448,  209,   27, -239,  537, -297, -359, -197, -160,-1036, -642,  699,  111,  185,  219, -192,  489,  982,  894,  939, 1043,  328,  287,  174, -363,  275,  310,  -69,  540,  557,   15, -375, -767, -160, -242, -384, -725, -424, -517, -174, -192, -232, -615, -153, -276,  579,  808,  212,  -55,   26, -361, -668,
    -284,  379,  103, -749, -137,  141,   53, -146, -662,  318, -101, -499, -565,  385,  392, -167,  907,  186,  220,  253,  283,  447, -183,   80,  852,   97,  398,  267, -108,  707, 1008,  -47,   70,  578,  629,  152,  482,  839,  628,  194,  226, -239, -741, -382, -339, -500, -264,   77,  472,  138,  270,  702,  -26, -265, -300, -223,   40,  404, 1121,  386,  155,  232,   99, -156,  365, -374, -534,   28, -218, -551,  161,  436,
    -185,  259, -638, -213, -252,  196,  215, -152,  741,  411,  155, -701, -552, -389, -375,  -21,  -98, -823, -491, -208,  416,  602,  339,    0,  488,  237,  752,  846,  528,  762,  485, -443, -345,  166,  -20,  315,  834, -244,  -51, -328,   79, -427, -688,  371,  371,  116,  175,   31, -254,  240,  330, -341, -408, -408,  346, -277,   92,  166, -112, -342,-1212, -880, -180,  461,  197, -434, -256,  336,   40, -532,  440,   92,
    -673, -320,  351, -902,  157,  133,   98, -566, -280,  722,  245,  154,  145,  172,   -3, -212, -103,  302,   22, -409, -678,  242,  110,  -95,  135,  151,   91, -284,  625,  277,  730,  288,  681,  589,  741,  289, -131, 1060, 1060,  147, -104,  -46,  114,  355,  107,  -63,  -57, -332, -767,   44,  -78, -392, -128, -784, -223, -244, 1115,  146,  599,  716,  -30,  487,  263,  -97,  156, -238,  707,  341,  304,  -60, -161,  134,
   -1066, -414,   10, -602,  433,  258,  681,  137,  352,  -26, -102,  917,   24,  323,  162, -835, -532,  359,   81,  528,  583,  126, -412,  356, -621, -254, -353, -498,  271,  -20, -189,  510,  910,  825,  654,   95, -444, 1315, 1139,  290,  534,   -2,  887,  926, -421,  -70,  208, -406, -515,  467,  341, -225, -843, -322,-1016, -378, -360, -666, -309, -245,  498,  278,  292, -860, -144,  289,  220,-1184, -868, -524,  -27, -152,
     -18, -210, -215,  -92,  388,  319,  586, -473, -245,  303,   -4,  821,   70,  430,  146,  164,  361,  368, -307, -210,  519, -131, -573,   77,  -28,    4, -115,   57,  278,  668,   75,   -7, 1031,  822, 1417,  698, -491,  871, 1095, -155, -592, -248,   69,  496,  323, -182, -151,  182, -635,   73,  150, -221, -132, -274, -244, -145, -276,  -88,    7, -603, -489,   78,  492, -613,  172,  331,  116, -637,-1237, -579,  -54,  410,
     653, -325,  234,  -18,  142, -276,   41,  111,   61,  124,  -60, -219, -796,  328,  186,  288, -109,  -33, -875, -905,  354,  361,   -8,  168, 1018, 1052,  425, 1117,  -11,  458,  177, -884, -770,  -20,  565,   32, -281,  332,  814,  184, -335, -401, -241,  561, 1098, -201, -329,   44, -651,  394,   77, -218, -847, -174, -414, -443,   60, -332, -509,-1001, -298, -161,  211,  368, -348,  379,  461,   67, -544, -519, -160,-1187,
     214,  224,  171,  789,  147, -154,  406,  253, -377, -120,  291, -676, -295,  381,  377, -578, -810,   21,  334, -344,  -99,   77,  179,  -72, -299, -624, -201,  252,   96, -317, -595, -267,  204,  545,  502,   64,  114,  682,  876,  506,  206,  322,   66,  741,    6, 1065,  670,   25,  -27, -492, -297,  477,  516,    7, -604, -415,  355,  997,  493,   -6, -197,   82,  228,  238,  607,  189,   97,  594,  -90, -265, -309,    1,
    -429,   20,  313,  -76, -184,   45,  207, -669,  194,  185,  692, -361, -185,   28,  172,  147, -877,  376, -300, -638, -627,  108,  208,  203,  372,  168,   42,    9, -383,  -59,  -98,  136,  261,  690,  551,  607,   63, 1131,  972, -155, -278,   79,  180,  270,  307,  719,  294,  647,  381,  707,   -9,  137,   80, -313,  -67,  355,  559,  528,  100, 1029,  -41,  367,  464,   32, -372, -108,   66, -767, -275, -343, -802, -167,
     207,  212,  363,   -2, -233,   77,  227,  449, -340,  -31, -872, -867, -266,  375,  283, -142,  391,  288, -134, -554,  -50, -185, -287,  217,  153,  247,  306, 1046,  -75,  377,  266, -421, -171,  249,  184,  100,  906,  857,  990,  513, -203, -350, -300,  543,  697, -657,-1051, -147,  181,  815,  595, -279, -705, -332,   34,  -14, -159, -524, -425, -714, -185, -690, -197, -256, -349,   26,  494,  543, -358, -164, -116, -716,
    -184, -349,  289,  408,   39, -548, -115,  477,  845,   34,  314, -269,   95,  195,  435,  120, -134, -237, -197,  -17, -471,  565,  302,  377,  541,  140, -145, -587,  181, -126, -198,  338,  670, 1364,  840,  987, -187, 1129,  831, -525,   58, -129,    1,   20,   55,   97,  677,  287, -659,   81,  317,  162,  408, -159, -532,-1257, -544,  -10, -128, -307, -574,  513,   10, -376, -287,  154,   47, -656, -175, -253, -272, -248,
    -239, -455, -875,  -11,   -7,  412,  620,  365, -718,  166,  464,  699,    9, -442, -434, -523, -174, -685,  207, -179, -165,  268,  246, -217,  373, -592, -452,  127,   23,  201,  183,  445,  383,   10,  142, -341, -354, -124, -325,  754,  864,  730,  250,  475, -452,  562,  793,  555,  331, -225, -497,  281,   91,  303, -490,   17, -298,  -97,  201,  128,  484, -233, -774,-1159, -284,  280,  239, -284, -218,  296, -448, -381,
     566,  112,  347, -532,  284, -426,  166,  599,  905, -172,  -13,  365, -867,  207,  275,   52, -637,   72, -389, -975,   71,  636,  316,  469,  873,  867,  139,  567, -396,  252,  -86, -442,   20,  631,  800,  912,  394, 1209, 1290, -551, -489, -389, -239, -560,  570, -228,  -34,  174,-1120,  196,  297, -331, -188,  -86, -520, -662, -245, -260, -663, -518, -847,  362,  239,  461, -192,  324,  422, -466, -565,-1041, -350, -842,
    -389, -161,  585, -537,   91,  177,   75, -667, -180,  323,  -23, -353, -827, -265,  236,  508,  -92,  296, -603, -565, -492,  112,   72,  -88,  725,  367,  -88,  452,  256,  605,  571,  -73,   38, 1126, 1148,  310, -388,  539,  410,  105,   93, -601, -486,  198,  841,  444,   -1,  578,  566,  902,  222,  679, -239, -246, -143, -305, -528, -457,  -73, -422, -467, -263, -281,  317, -544,   36,  238,  288,  964,  -97, -652, -980,
    -633, -895,  -91,  458,   57, -100, -759,  -92,  295,  516,  585,  250,   -1,  201,  288,   75,  427,  -55, -873, -643, -163, -608, -116,   20, -407,  376,  265,   46,  829,  764,   17,   13,   76,  466,  453,   57, -151,  221,  148, -150,   52,  227,  350, -364,  -59,   24,  758,  839,  707,  349,  140,  115,   99,  203,  270,  418, -455,  -96,  -81, -475, -179, -293, -228, -114,  112,  172,  357,  727,  423,  294,  189,  110,
    -787,-1207,  -84,  235,   84,  -55,   -7, -208,  327,   39,   52,  344,  -79, -354, -385,  -75,  232,  -74, -861, -677, -198,   13,  -15,  -18, -582, -628, -187,  321,  150,  143, -387,   47,  294, 1010, 1025,  165, -205,  -39,   64,  -69,  312, -166, -718, -642,  -38, -274,   85,  164,  420,  435,  218, -110,  468,  619,   66,  401, -337,  166,  161, -435, -215,  213,  132, -194, -109,  160,  433,  445,  334,  133,  678,  482,
    -490, -317,  314,  110, -225, -176,  220, -338,  -76,-1273,-1196,  -54, -426, -652, -629, -434,  117,  309, -110, -313, -310,  214, -472, -356,  -59,-1104,  123,  257, -114,  -41,  221,  312,  178,  190,  194,  -15, -123, -463, -500,   54,  375,  128, -931, -178,  118,  172,   80,   36, -725, -610,  429,  650,  604,  224, -318, -196,   59,  605,  712,   51,  -67,  -95,  -42,  -63,  510,  339, -437, -612,  -86,   34,  132,  530,
     263, -111,  307,  764,  243,   80,  507,  793, -167,  330,  470, -304,  384,  927,  869,  396,  623,  276, -134,  360,  706,  503,   59,  222,-1087, -314,  -80, -291, -191, -281, -225, -835,   84,-1464,-1540,  247, -154, -969, -919, -318, -275,  -38, -220, -893, -727, -154, -747, -281, -496,-2021,  214,  926,  642,  584, 1251,  745,  102,  612,  444, -187, -489,-1708,-1714, -243,  961,  270,-1666, -469,  485, 1096,  376,  677,
    -421, -743, -636,  110,  583,  330, -224,-1464,  786,  530,  744,  658,   84, -129,  -60,  251,  240, -660, -821, -445,-1297,   14,  381,  611,  781, -736, -800,  462,  622,  588, 1128, 1517,  202, 1843, 1908,  276,  715,  627,  472,  512,  365, -809, -808,  816, 1455, 1105,  638,  649,-1401, -945, -603,   13, -280, -678, -264, -377, -160, -781, -870, -295, -752, -445, -442, -600,  -22, -498, -944,-1345, -360, -165, -808, -320,
     167,  610,  446,  261,  857,  639,  -11,   -2,  -66, -387, -393,   12,  231,  594,  552,  211,  274,  443,  643,  163,  -24,    6,  629,  801,  -14,  266, -126,  -19,  228,   59,   11, -395, -190,   30,   49, -256, -113,  213,  253,  -11,   19,  -76,  312,   32, -441,  -70,   58,  152, -522, -207,    2,  578,  349,  -85,  -80, -549, -411, -316, -374, -451,  -80, -345, -250,  -81,  547,   27, -205, -470, -595, -151,  -75,  304,
     346,  554,  469, -355, -169, -547,  394,  455,  121, -602,   63,  503,  162, -107, -302,  151, -751, -747,   42,  140, -492, -384, -186, -526,  159, -505,  266,  557,  515,  127, -157,  539, -500,  179, 1122,  653,  867,  559,  297, -268, -375,   69,  131,  727, 1164,  827,  151, -158,  281, -487,-1126, -687, -663, -212,   50,  126,  949,  726, -381, -989, -112,  123,  546,  682,  317,  765,  514, -453,  -23,  321,   -5,  114,
     197,  100, -694, -813, -558, -233, -347, -443,  456,   34, -679,   60,  115, -319,  -90,  104, -359,  483,  608,  353,  509,  375, -453,  -26,  726,  165,   72, -261, -136,  181,  792, 1179,  582, 1068,  225, -469, -190,  374,  638,  899,  636,  280, -370,  163,  514, -197,   73,  463, -461,  464,  740,  232,  154,   18,  294,  -23,-1048, -431,  732,  930,  681,  574,  131, -141, -583,-1061, -540,  346,  115,   67, -108, -658,
    -117,   -6,   87, -881,-3124,-1525, -156, -510,  321,  949,  481,  -57,  -16, -470,  848,  843, -813,-1381,   14,  821,  379,  261,   67,  112,  381, -657,  -49,  773,  580,-1042,  130,  431, -196, -787,   11,  558, 1311,  603, -408,  -78,  617,  624,  603, -189,  544,  705,  560,   75, -747, -497, -651, -212, -481, -403,  231,  244,  914,  303,-1474,-1191,-1470, -507,  298,  193,  341,  882,  -34, -170, -261, -165,  -90, -225,
     234, -434, -400, -306,  302,  281,  363,  565,  316,  241,  154,  112, -225,  723,  751,  590,  219,  688,   45,  212,  464, -684, -767, -329,  -56,  -12,   96,   33,  -25,  554,  720,  257, -222,  651,  739, -489,  -40,  173,  552,  482, -273, -942,  156,  805, -327, -184, -193,  214, -597, -285,  -71, -513,   93,  -53,    0,   23,  942,   75,  -37, -518, -599, -465, -307,  183, -661, -390, -280, -718,   65,  141, -512,-1673,
     231,   73,  667,  231, -439, -826, -740,  495,  151,   67,  196,  268,  581,  732,  735, -153, -340, -397, -429,  238,  521,  369,  340,  307,  792,  247, -849, -173,  127, -273, -279, -380, -504,  616,  583, -343,  545,  599,  240,  -90,   -9,  130,   -3,  -47,  170,  732,  517,    2, -733, -332, -409, -680,-1578, -655,   80,  -38, -595, -117,   90,  999,  270, -256, -475, -619, -498,  -38, -288, -617,   20,  -59,   74,   99,
     791,   17,-1329, -908,   47,   14,  223,  262,   27,  536, 1030,  437,  910,  809, -344,   97, -931,   37,  -99, -234, -585, -202,-1479,-3353, -133,  674,  650,  667,  152,  545,  707,  573,  379, -183, -885, -209, -107, -278,  631, 1211,  777,   16, -491,  564,  627,   29,-1306,  557, -201, -104,  853,  287, -250, -135, -218, -328,-1021,-1467,  150,  940,  257,  378, -177,-1319, -116, -437, -580, -896,   71,  126, -456, -534,
     361,   81, -612, -238, -285, -167, -319,  179, -424, -140, -506, -408, -377,   55,  -59, -721,  -97,   40, -433, -141,  569,  578,  695, -141,  127,  730,  605,  295,  -23,  652,  542,  531,   47,    3,  769, 1331,  789,  607,  432,  283,  586, -123,-1015,  232,  413, -632, -386, -346, -208, -306, -131, -495, -376, -335, -521, -358,  -70,   23,  767,  295, -317, -547, -100, -131,  415,  -12,-1061, -258,  -83,  316,  188,   39,
    -897, -307, -108, -536,  137, -450, -281,  247,  905,  257,  150,-1056, -710, -487, -265,  399, -819, -788, -555, -394,  -27,  272, -803,-1535,  285,  153,   26, -161, -504,  426,  143, -193,  993,  308,  315,   18,  -55, -165,  691,  630,  316,  386, -434,-1251, -438,   79,  297,  673,  -76,  111,  321,    3,   -8,  667,  350,  -52,  185,  648,   -3, -279, -278, -541, -136, -118,  -90, -209,  237, -556, -250, 1102,  488,  281,
     207,  636,  300,  658,  342,   82,  557, -805,  802,  252,  756,  165,  124,  -21, -701, -946, -373,  316,   77,-1131, -161,  689,  913,  110, -277,  145,  133, -708, -662,-1121,-1297, -682, -469,   58,  782,  849,  220, -289, -400, -568,-1553, -421, -277,-1177, -583,  580,  712, -809,  276, -193, -518,  169, -525, -745, -815, -807,  322,  101,   76,   -1,  -97, -108,  829,  995, -307,  613,  521,  -13,  366,  328, -115, -929,
    -760,  -74,   34,  694,  200, -365, -121, -812, -892, -294, -319, -946,  169, -443, -395,  228,  609,   -4,  -92, -849, -746, -192, -318,  160, -137,   40,  232,  225,  -18,  486, -241, -188,  645,  276,  217,  491,  -78,  546,  539,  105,  183,  215, -120, -155, -230, -163,  563,   -5, -791,  -98,  505,  231,  407,  532,  314, -316, -104,  153,  243,  -51,  -14,   94,   55,  -98,  137,  440, -128, -756, -306,  417,  563,  331,
     807,  215, -340, -996, -782, -753, -444,  467, -671,  131, -455,-1357, -502, -218, -714,-1170, -289, -976, -508, -393,  -25,  553,  602, -775,  334,  759,  485,   76, -566,  -48,  471, -107,    6, -382,   29,  298,  158,  760,  435, 1141,  -70,  155, -247,  162,  117,  -66, -151, -413, -146,  427, -291, -377,  383, -222, -324,  -25, -530, -182,  555, -525,   81,  630,  247, -144,  574,   71,  313,  729,  471, -241,  -66, -557,
     732,  475,   80,  149,-1161,  348,  738,  624,  261,   18, -107,  341,   17,  375,  116,  243,  -26,  -63,  -97,  149,  373,   45, -417, -978,  217,  719,  -48, -598, -274, -393, -155,  -23,  -56,   52,  704, -167, -495,  916,  664,  352,  851,   87,  -90,  728,  438, -471,  383,  308,    9,  296,  362,  522,  723,  296,  276, -115, -785, -835, -136,   28, -675,-1319, -877, -983,  -39, -432, -501, -536,    9,  249,  -32, -152,
    -394, -452, -796, -901,-1636, -905,  295,  -39, -986,   98,  243,  868,  420, -238, -363, -686, -505,  -92, -306, -959,  217, -360, -382,  137,-1137, -409,  408,  375,  691,  251,   -5, -446,   47,  379,  287, 1050,  775,  729, -124,  -70, -131,   29,   21,  144, -348,  149,  457, -434, -654,  225, -161,  -31,  297,  536, 1042, -322, -377,  -12,  690,  287,    5, -141, -546, -155,   -7,  252,  142,  -90,  -43,  487,  684,  -55,
     197,  -99, -100,   -6,-1003, -398,   98,  350,  236,  -93,    8,  270,  214,  106,  319,   41,  162,   70,  480,  764,  706,  785,  407,-1092,  773,  -52,   80,  911,  381,  312, -463,  499, -181,  616,   52,  -87,  266,  695,  887, -539, -631,  -42,  713,  231,   54, -144, -409, -233, -612, -455, -487,  -45, -187,  -17,   54,   20,   22, -184, -850, -787, -950, -995,-1279, -702,  529,  436,  344,   46,  -97,  266,  373,  631,
     -59, -531,  -22,  -58,  -99,  752,  616,  613, -289, -435, -132, -453, -787, -180,   48, -377, -273, -717,   52,  326,  193, -243,  -90, -232,  288,-1003, -147,  607, -343, -496, -662,  406, 1307,  809,   49,   68,  333,  503,  595,  760,  192,  531,  720,  151,  533,  610,  672,   15, -245, -999, -116,  425,   54,  229,  281,  -54,  247,  733,   70,  -86, -108, -130, -512, -285, -450, -131, -280, -228, -371, -528, -333, -443,
    -347, -480, -948, -392, -770,  498,  531,  -17,-1325, -502,   44, -782,-1286, -808, -223, -509, -909, -321,  177,  866,  510, -405, -617, -721,  280, -156,  178,   54, -375, -175,  -48,   72,  144,  138, -348,   18, 1060,  416,  694,   90,   51,  385,  701,  345,   14,  510,   13, -509,  693,  335,   35,  549, -556, -120, -242,  446, -544,  541, -112, -550,  -98,  257,  555,    5, -500, -360,  364,  -97,   77, -267, -159,  379,
   -1025,   35,  330, -335,  144,  957,  711,  -61,  104,  726,  241,  786,-1084, -713,  -62,  -20,  672,  271,  625,  279, -807,  556,   36,  341,-1177, -344, -440,-1644, -686,  715,  526, -589,  773,  818,  116, -381, -814, -363, -270,  107, -655,  159,  204, -319, -641,-1401,-1028, -604,   61,  494,  603, -352, -796,  -43,  463,  428,   53,  121,   93,  322,  944,  655, -232,  -80,  114, -564, -247,  346, -692, -825, -669, -514,
    -285,  174,  746,  522,  742,  280, -393,-1394, -948,  179,  228, -962,  -53,  355,  392,  -37,  480,  765,  263, -247,-1325, -342,  236,  649, -560, -261,  167,    2,  -35, -619, -622, -427, -614,  489,  520, -610, -713,  674,  657, -761,  -49,  248, -161, -604, -667, -748, -718, -188,  745, -326, -738, -518,-1028, -839,  175,  873,  -48, 1561, 1539, -187,   68,  467,  449,  163, -480, -651, -346,  793,  930,  -54, -832, -933,
     -52,   77,   97,  658, -242,   92, -326,-1384, -487, -474, -554, -596, -230,  583,  644,  -54,  593,  100,  -75, -121,-1310, -271,  124, -257,   66,  561,  651,  164,   13,  825,  298,  216,  279, -269, -231,  328,  -26,  378,  333,   14,  186,  579,  482,   14,  202,  471,  953,   -2, -887,  114,  884,  418,  155, -819, -631, -174,-1336, -776, -736,-1350, -178, 1468, 1413, -285,  289,  829,  164, -920, -144, -656, -798,  115,
   -1733, -913,   11,  -42, -878, -438, -291, -734,   -5,  249,   77,  948,  498,  425, -230,-1192, -406, -484, -296, -769, -628,  150,  499, -122, -376,  582,  389,  455,  889,  374, 1027, -681,  518,  493,  503, -187, -441,  160, -796,  600,  444,  134, -146,  243,  361,  865, 1368,  -41, -478,  507,  625,    2, -310, -928, -448,  252, -807, -558,  303,  559,  799,  179,  169, -331,-1311, -231, -270,-1504, -557,  371,  259, -483,
     509,  117,   43,  227, -282,  590, -101, -760,   65, -107, -102,   78, -178,  386,  379,  -53,  186,   76,   55,  582, -763,  -67,  543, -393, -124,  377,  736,  548,  685,  372, -129, -289, -844, -182, -152, -923, -217,  319,  401, -163,  562,  748,  377, -292, -463,  -64,  372,  676, -351,  117,  404, -186,-1170,-1326, -879, -165,-1277, -542, -531,-1324, -733, 1760, 1700, -741, -262,  410,  142, -297,  -87, -951,-1287,-1210,
      13, -357, -238,  323,  508,  -77,  273, -438,  512,  356,  386,  573, -212, -169, -548,-1288,   72, -362, -506, -780, -599,  687,  737, -533,  109,  792,  142,  621,  297,  386,  633,  -67,  524,  360,  996,  351, -182, -752,-1111, -370, -632, -179, -280, -510,  672, 1147, 1149,  241, -187,  151, -123,-1076,-1625,-1790,-1550, -883, -814, -230,  526,  694,  168, -232, -252, -204,-1763, -516, -411,-1108, -605,  651,  714,-1336,
    -655, -150, -483, -436, -236,  443,  168, -492,  980,  112,  119, -124,-1260, -242,  375,  497,  -39,   73, -860,-1674, -659, -301, -336, -798,  307, -111,  222,  532,  -75, 1262,  684,  411,  -83,  507,  475,  406,  467, -770,  176, -494,  335,  296,  490, -278, -583, 1154,  470,  874,-1345, -232, -124,-1295, -403,  247,  324, -555,  360,  243, -471, -816, -219,  165,  104,  611,  -56,  590,  541, -456,  316, -385, -876, -285,
    -629, -446, -389,  129, -525,  742,  697, -471,  490,  349,  325,  455,-1311, -564, -190, -346,  378, -151, -385,   90, -425,  304,  -56,  588, -454, -279, -134, -710,  179, 1077, 1073,  628,  386, 1008,  387,  540, -315,-1080, -653, -196,  572,  100,  733,  133,  -95,  685,  364,  332,-1036, -414, -473,-1863,-1122,  682,  549, -686,  538,  520, -211, -763, -224, -258, -254,   73,-1073, -153,  197, -169, -712,-1596,-1635,-1548,
     342,  101,  144,   37,  -72,   47,   16,   73,  551,  608,  -45,  856,  412, -180,  -67,  439,  554,  271,-1180, -754, -498,  171,  -58,-1070,  292,  156,  288,   89,  102,  192,  -86,  225, -205,  138,  -95, -282, -167, -802, -494, -305, -834, -209, -119,  876,  243,  187, -114,-1208,  175,    3,  284,  132,  108,   71, -197,   60,   57, -196,  -23,  559,  799,  348,  607,  462, -858,  474,-1079,  232,  443,-1019, -391, -769,
     166,  -10,  135,  238,  578, -563,   38,   63, -186,  -65, -100, -571, -230, -278, -215, -571, -151, -680, -299,   71,  206,    2, -188,  -18,  -38, -222,  115, -118,  168,   20,  308,  228,   42,  465,  259,   33,  761, -144,   -3,  -79, -465, -561, -173, -163,   17, -203,  -88, -361,  252, -171,   52,  -28, -362,  144,  248,   50,  446,   68,   85,  190,   24, -127,  264,  372,   69, -689, -470, -408,   91,  361,  381,  189,
     870,  538,  502,  -88, -422,  193, -147,  592,  321, -144, -887,  -76,  260, -114,  365,  455,-1048,  256,-1081,  608, -297, -884,  -82,-1319,  186,  413,  666,  467,  486, -527, -358,  125, -353, -600,  -99,   78,  520,  368, 1180,  296, -459,  718,-1089, -494,  724, -139,   49, -267, -126,   58,  186,  271,  -34, -129, -216, -313,  236,  370, -250,  395,  737,  294,  734,  182, -809,-2043,  439, -337, -127,-2048, -857, -809,
     210,  493,  124,  406,  -38,  466,  584,  175,   49, -136, -206,  562,  457, -482, -340, -147, -899, -249, -237,  106,  324,  199,  -97, -484,  -12, -122,   77, -140,  112, -639,  136, -180,  127,   96, -386, -942, -167, -609,  -16,  237,   71, -872,  127, -397, -656,  -78, -385, -252,  144,  -81,  335,  152, -320, -330, -148,  109,  230,  139,  316,  264,  911,  338,  483,  322,  -78, -754, -459, -815,  437, -245, -320, -568,
     291,  -33,  -80,  173,  -56,   18,   -6,  352, -137,  364,  180, -170,  701, -671,  111, -212,-1331, -594, -877, -856,  -14, -614, -270,-1155, -118,  175, -428,  340,  205,  684,  -53, -163, -124, -628,  112,  597,  249,  546, -295,  -48, -279, -221, 1048,  986,  609, -558,  -93,  -46,  -78,  290,  -18, -200, -309,  595,  501,  184,  603,  490, -455,   84,  361,  510,  541,  724, -321,-1283,-1149, -563, -817,-1796, -984,-1052,
      16,   -7,   10,   -5,  562,  -58,   -9,   -5,  -69,  -75,  -42,  -72,  -24,  -56,    0,  -32, -140, -159,  -94,  -63,  -34,   87,   94,  -51,   82,  -50,  -36,   32,   27,  -21,   10,   67,  -15,  -70,  -57,  -90,  111,  209,   -3,    3,  -82, -168,  -73,  -67,  -18,  102,   63,  -18,   78,  -30,  -44,   91, -147, -187,    4,   79,  115,  133,  -41,   33, -175, -178,  -36,   -2,   64,  -54, -112,  -76,  -37,  153,   44,   38,
     -39,  -46,  -42,  -66,  -77,  163,   40,    1,  -35,  -51,  -80, -108,  -63,   15,  -11,  -24,  -56,  -97,  -90,   51,   14, -109,  -74,  -43,  -12,  -36,  -26,  -13,  -63,  120,   23,    8,  -20,  -27,  -40,  -84,  112,  119,   12,    4,  -25,  -59,  -64,  -11,  276,  -62, -102,  -19,   52,   90,  -20,   33,  -43, -205,  -18,   -9,   32,   69,  -58,  -53,    1, -140,   -8,   13,   -7,  -62, -111,  -62,   84,  407,  -79,   -4,
    -685, -437, -262,  896,  272,   59,  -80,  756,  -53,  345,  360, -104, -824,  716,  606, -653,  883, -257, -479, -710,  804, -107,  129,  341, -369, -483, -395, -313,  100, 1133,  519,   66,  305, 1179, 1252,  469, -560, -397, -547, -736, -403, -306, -412, -331,  158,  585, 1036,    0, -409,  114,   -3,  114,  153,  883,  834, 1002, -212,  442,  499, -362, -622, -886, -872, -506,  180,   -3,  150, -436,  912,  695,  762,  160,
      64, -127, -143,  -85,  -61, -102,  -85,  -16, -171,  -99,  -71,  -48,  -32,   16,   10, -104,  -84,  -47,  -54,  -45,   11,   87,  185,  -87,   -5,  -67,  -76,  -33,  -19, -163,  -50,  329, -112,  -37,   -3,  -19,   15,   54,  137,  125,    1,  -22,  -41,  -11,   14,   57,  149,  -68,  -85, -127,  -79,    0,    4, -136,  530,   96,  -66,  -70,   91,   51,   25,  -13, -199,   24,   62,  -19,  106,   81,  -16,  -37, -224,  -21,
    -266, -776,-1016, -156,  453,  965,  451,  -19, -414,  355, -196,  -15,  291, -386, -482, -286,  256,  187,  377,  211,   -8,   53,   90,  800, -870, -509,-1518, -730, -979,  -48,  224,  214,  245,  420,   61, -243, -277, -281,  401,  415,  125, -148, -303,   71,  243,  142,  204,  246,   62, -806,   93,  440,  745,  673,  256,  111,  172, -289,  290,  364,   58, -655, -418, -364,   13, -172,   -7,  169,  273,  514, -318, -120,
     596,-1133,   22,-1138,-1479, -364, -760, -224,  -66, -808, -160,  323,  428,  391, -196,  287, -138,  536,  458,  844,  560, -195,  260, -417, -471,-1453,  822, -475, -136,   91, -154,  696,   54, -120, -694, -389,  290, 1173,  332,  498,  463,  705,  451,  254,  171, -309, -474,  474, -338,  658,-2422, -649, -679,-1014,-2102, -148,  351, -300,  283,  182,  214,  676,  317,  743,  304,  257,   25, -151, -358, -199, -108,  -31,
      41, -117, -258, -518, -402, -175,  186,  229,  386, -118,  -72,   10,  -97, -251, -497,  381,  360,  118,  364,  194,  147,  480,  389, -139, -261,   21, -313, -147, -283, -336,  -47, -437, -630, -232,  -36,   99,  125,  -54, -459,  -14,  -53,   54,  -86,  -32, -156,   54, -565,  189, -704, -213, -488,  -58, -438, -304, -388,  203,   26,  203,   51,  254,  353,  385,  261,  867,  110,  261,  -44,  119,   86,  -74, -271, -396,
    -739,-1142,  183,  571,-1102, -107,  216, -483,  904, -130,  592,  551,  413,  -58, -174,  447,   21,  140,  117,  314,   86,  -31,  118,  -71,  881,    5, -255, -889,-1179, -348,  311,  276, -294,  -51,   70, -203, -286, -523, -817, -192,   84,  339,  113,  283,  218,  -55,  227,  134,  207,-1169,  388, -793, -743, -579,-1034,  425,  538,   77, -277,   72,  449,  564,  358,  783,   70,  329,    3,  201,   80, -217,   97,   89,
      44, -339,-1163,  -12,  163, -209,  114,  176, -735,  -93,  -74, -187, -960, -353, -403, -315,  333,  132,  -47,  166,   92,   82, -613,  609, -119,  -44,-1114, -658, -559, -203, -142,  125,  189,  350,  820,   69,  -52,  -22, -112,  788, -160,  101, -328,  -60,  250,  437,   -4,  171, -545, -477,-1052,   39,  251,  488,  302,   56,  201,  111,  144,  501,  451,  313, -111,  112,  -48,   37, -167,  270,   46,  246,  143, -386,
    -789, -833, -876,-1528,-1258, -349, -632,    9, -179,  124,  256, -174, -216,  229, -523,  732,  147,   -3,  -34,  296,  360,  -13,  -24,  -74,  947, 1155,    8,   46,  255,  -93, -605,  546,  535,   92, -674, -174, -104, -155,  592,  203,  346, -438,   79, -158, -192,  -86,  722,  231, -508,-1027,-1592, -297,-1053,-1192,-1710, -745,  111, -434,  475,  678,  776,  547,  442,  340, -233,    2,  206,  -85,  198,  505,  613, -305
};         /**< Weights of SVM classification models, based on HOG_360 descriptors. An individual model is trained for each feature point, and is used for main algorithm, during fine step. (If all values 0 => the considered descriptor is disabled). */

static const INT16 Frontal_MIDDLE_SVM_HOG_360_fine_posRoll[] = {
    -245, -718, -819,  -21,  -51, -249, -491,  133, -405, -109, -195,  488,  240,  -59,  162, -179,   80,   63,  205,  159, -214,  701,  641,-1047,   47, -686,  219, -141,  338,  112,  420, -207, -459,   56,  472, -694, -649,  214,  -49, -575,-1028,  763,  158, -436,-1089,  215,  348, -392,  -82, -424,  -33,  461,   27,  208,   46,  633, -622,  -70,  711,  342,    7, -821,  -23,   28,  381,  -38, -255, -114,  631,  488,  618,  -75,
     484,-3220, -335, -451,-1005,-1004,-1030,-2256,-1080,-1797,  367,  471,  226,  845,  587,-1207, -128,  384,  -85,  115,  827,  637,   69,-1150,  149, 1045,  307,  592, -172, -123,   47, -587, -732,  363,  284,  121,  139, 1205,  744, -681,  -65, -518,   89,  644,  342,   46, -447,  229, -610,  311,  652, -656, -910, -303,   14,-1619, -667,  662,  479,  -50,  116,  162,  445,  293,  -42, -306, -166, -184, -140,  276,   76, -523,
   -1533,-1355, -199, -597, -559,  -77, -403,-3162, 1035, 1297,  270, -269,  194,  667,  344, -363, -622, -568, -434,    6, -405,  -43,  213,-1156, -334,  840,  613,  551,  432,  898,  526,-1630, -692, -376,  332, 1410,  965,  101, -195, -431,   39, -191, -234,  703,  752,  448,  239,-1160, -870,  329,  383, -624,  -73,  329,  486, -520,  118, -237, -253, -612, -270,  -88, -289, -309, 1097,  131, -497, -178,  310,  401,  536,  675,
     -46, -197, -918, -166,  185, -258, -262, -306,-1173,-1302,  564, -278,  164,  597,  529,  147,-1135,  308,  582, -395, -637,  451,  239, -148,   83, -487, -511,  294,  364, -160, -188,  261,   21, -286,  249, 1012,  134,  103,   14,  228, -326,   -5,  486,  568,  579,  385,  561,   34,  356,   82,  -28,  158,  182,  304,   41,  364,  176,  358,   35,   94,    8, -255, -607,  298,  766,   72, -464, -185,  181,  372,  290, 1168,
     127, -202,-1540,-1512,  125, -822, -499, -523,   33, -168,  -80, -897, -423,  316,  368,  346,   35,   87, -585, -219,  293,  504,  -55,  598,  456,  384,  392,  482,  284,  443,  637,   73, -573,   63,  303,-1085, -770, -128,  347, -195,  234,  799, -187, -691,  318,  202, -157, -353, -700, -110,  430, -348, -241, -231,  154, -899,  178,   73,  558,   97,  286,  231,  147, -213,  189,   30, -428,  -65,  146,  507,  234,  298,
      66, -264, -400,-1124, -196,  361,  104,  729, -131, -189, -665,  -95,   -8, -103, -188,  210,  208, -426,  -56,  235,  352, -170, -104,    5, -308, 1064,  162,-2119, -424,  320,  573, -242,  414,  239,  -85,  275,  490,  137,  149, -439,  423,  133,  729,   23,  323, -394, -111,  -53, -201,  138,  580, -370,   34,  424,  243,  225,  388, -227, -489, -180,  779,  913,  808, 1003,  394,  188,  133,  292, -189,-1107, -601, -303,
    -419,  251,-1220, -601, -887, -830, -426,-1482,  444,  447, -326,  646,  112,  350,  323, -239, -486,  -20,  311, -894,-2098, -553,  157, -745,  759,  641,  555, -757, -649, -210,  982,  853,  279,  474,  443, -235, -262,   66,  997,  407, -659,  503,  872,  -83, -303,  436,  288, -662,  675,   10, -467, 1222, -481, -244,  228,  770, -117,  144,  251, -632, -806, -372,   12, -260,  401, -123,  344, -189,   91,  626,  646,  410,
   -1956, -362,  -35,  -80, -984,  -19, -519,-1681,  391,  704,  436,  303, -380, -218,  524,  215, -196,  371,  827, -887,-1729, -209,  616, -193,  713, -603,  184,   -9,-1079,  102,  771,  941, 1192,  118, -512, -263, -319, -145,  214,  938, -179,   64,  503, -720, -976, -369,   18, -225,  144,  567, -475,  178, -937, -224,  210,  320,   67, -329, -409,  931,  268,  686,  574,  476,  -65, -116, -147,  678,   34, -235,  231,  401,
   -1081, -165,  804,  -76, -394,  615,  302, -359, -846,  319,  166, -786,  539,  163,  379, -278, -918,   44,  260,  448,  175,  270,  174, -150,  184, -427, -105,  157,   43,  169,  223,  964,  552,  590,  476, -665,  462, 1157, 1565,   56, 1346,  392,  664, 1062,   73,  345,  461,  765,  507,  125, -439,   57,   26,-1218,-1025,  558,  -76,  129,  -86,   13,   84,  838, -387,   70, -424,   44,  628, -365, -234, -306, -887,-1127,
   -1152, -211,  547, -144, -225,  349,  616, -269,  960,  349,  -23,  459,  504,  431,  739, -138, -329, -137,  229, 1053,  375,  230,   95,  521,  605, -416, -420, -275,   64,  148,  104, 1722,  452,  735,  628,  -63,  204, 1076,  921, -526,  280,  212,  865,  491, -148,  -71,  451,  213,  390,  208, -478,  -87,  -73,-1089, -785, -271, -928,   13,  -30,  158, -178, 1067,-1003, -831, -739, -265,  134, -551,   16,  -42, -492,-1020,
   -1652, -390,  616,  646, -254,  368,  294,  366,   38,  267,  247, -413,  300,  486,  760, -465,  327,   18,  256,  924,  358,  287,  459,  -52,  110, -250, -436,  -87,  176, -239, -202, 1141,  788,  163,  162,  -20,  438,  868,  811, 1328,  701,  701,  678,  -97,  -18,  598,  642, -516,  370,   22, -309,  332,  150, -947, -368, -235,  512,  409, -219, -318,  -86,  415, -963, -743,-1574,  -65,  113,  -42,  -17,   43,-1134,-2567,
    -726, 1030,  490, -968, -491,  383,  324, -446,   50, -211,  -77, -391,   44,   88, -208, -454,  714,  354, -100,  153,  497,   54,  228,  234, -412, -160,  191, -193, -421,  -77,  464,  110, -129,  459,  394,  610,  906,  890,  595,   73,   65,  433, -394,  263, -388, -545, -333,  532,  685,  417,  256,  291,  163,  380,  477, -647,  691,  161,  710,  898,  162,  -57,   77,  -55, -484,  -98,  419, -190, -619, -783,  -14,  341,
    -105,  550,  346, -835,  -62,  330,  -34, -884,  587, -195, -423, -104,  419,  -64,  175,  128, -331,  159,   19,  255,  579,  659,  188, -509,  151,  146,   97,  725,  370,  392,  277,   -1,  236,  390, -137,  265,  339,   89,   89,  247,  -35,  244, -638,  376,  188,-1351,  247, 1064,  477,  462,  834,  704,  428,  452,  668, -272, -493, -220,  375,  -21, -901,-1037, -291,  296, -364,   -5,  135,  228, -296, -307,  189,   57,
   -1301,  387,  629,-1439, -171,  246,  465, -241, -803,  524,  121, -202, -221,  210,  322,   19,  366,   99,   84, -145,  170,  -73, -233,  179, -173, -148,   -4,-1103,  677,   23,  158, -493,  737,  633,  989,  738,  284, 1061, 1514,  112, -330,  464,  389,  986,  659,  213, -311,  -49,  -30,  173, -115, -182, -306, -351, -198,  928,  833,  317,  326,  363,  349,  566,  132, -579,  -55,  -84,  795,  220, -342, -934, -305,   91,
      13,   51,  348, -730,  -39,   97,  769, -535,  634,  308,   91, 1104,  270,  605,  498,  593, -416, -202, -165,  327,  468,   89,  -62,  445, -159, -280,  -82,  -96,  542,  515,  222,   88, 1204, 1227, 1282,  473,    7,  512, 1092, -380,   41, -328,  438,  607,   53,  195,  438,  434,  140,   56, -337, -444, -645, -495, -887,  303,-1166,  -42,  382,  155, -128,  466, -890,-1750, -874,   88,  191, -826,  279, -236,  -25, -272,
    -242,  241,  187, -205, -421,  206,  546, -281, -133,   32, -485,  325,  464,  445,  -35,  -16,  396,  198, -639,  -20,  263, -494,  -90,  558,  828,  276,   78,  422,  522,  435,  650, -237,  382,  575, 1230, 1242,  279,  535,  892,   77, -367,  -61,  236,  305, -519,   21,    1,  427, -948, -143,  -18, -100, -273,  195, -264, -541,  242,   35,  262, -382,  -81, -399, -256, -110, -257,  562,   77, -935, -549, -478,   45,   76,
    -618, -203,  406,   28, -446,   87,  419,   23,   16,  301, -212, -466,  519, 1033,  435,  534,   97, -970, -495,  216,  696, -651, -685,   28, 1113,  268,    5, 1190,  839,  564,  536,   63, -379,  685,  939,  456, -407,  277,  870,  195, -497,   81,  -72,  304,  531, -400, -451, -404,  241,  716,  -23, -194,  -64,  217,   18,  -27, -171,  252,  208, -438, -338, -178,  148,  440,   90, -132,  253,-1217,-1512,-1712,  232,   77,
     198,  200,  610,  782, -124, -477,  510,  175, -775, -683,  501, -790,  110,  224,  190, -761, -789,   -6,  213,  129, -482,  485,  203,   62, -498, -570, -306,  368,  -52, -255,  -83,  147, 1058,  434,  473,  104, -296,  449,  827,  711,  937,  744,  437, 1092,  287,  413,  609,   88,  542, -512,  194,  481,  639,  488, -167,  -51, -191,  278,  157,   70,  237,  242, -295, -333, -274,  671,  289,  211, -251,  185, -859, -162,
    -118,   64,  887, -345,  461,  253,  429, -387,-1520, -194,   67,-1577, -790,  356,  195,  377, -171,  274,  122,  -91,  607,  257, -314,   98,  427,    5,  279, -217, -451, -175,  274,  227,  108,  347,  630, 1022,  579, 1493, 1557,  174,   84,  253,  306,  252,  139, -173,  -42,  501,  139,  175,   87,    1,  350, -330, -198,   38,  988,  824,   73,  910,  126,  289,  490,  144, -285,  418,  295, -203, -555, -912, -423,   -9,
    -636,  387,  324,-1622, -478,  405,  343, -161,  398,  -43, -270, -841,  667,  522,  271,  241,  375,   83,  150, -196,    8, -856, -563,   19,   24, -359,  173,  950, -188,  346,  561,  364,  -17,  460,  121,  205, 1143,  864,  636,  837, -159, -753, -345,  974,  377,-1021, -537, -125,  399,  820,  237,  465,  252,  480,  402,  -75, -117,   53,  563, -199,-1148,-1594,   59, -260, -230, -148,  -36, -268,-1001,-1006,  -66,  -62,
     128, -405,  486, -149, -471, -260,  349, -103,  425,  -17,  142,  756,  340,  630,  612,  163, -319,  -37,   42,   85,   88,  224,  118,  433,  354, -507, -370,  139,  371,  201,    2,  576, 1171, 1385,  844,  566,  176,  551,  763,   60, -201,  242,   37, -573, -628, -116,  222, -183,  129, -207,   60, -149,  654,  544, -225, -748, -666,  678,  355,  222,  -29,   70, -447,  139,-1002, -424,  138,  158, -114,  340, -411, -279,
     -18,  441,  269,  125, -339, -142,  386,  335,   41, -727,  185,  166, -374, -246,  257,  270,  783,  330,  443,  585,  -77,  588,  777,  262,  170, -200, -211, 1020,  360,  174,   96,  578,  115, -216,  132,  -68,  594,  578,  202,  332,  377, 1097,  380,  247,  125,  368,  189,   -6,  451, -553, -162, -636, -363, -346, -481,  181,  608,  393,  149,  -49,  602,  838, -220, -998, -426,  -39,   47, -412,  -12,  165, -658, -256,
     141, -422,  503,  -38,  226,  139,  539, -158,  -55,   45,   56,  248, -200,  684,  505,  540, -550, -396, -220,   47, 1086,   45, -395,    2, 1382,  328, -306,  258,   -6,  282,  369,  352,  153,  928,  925,  897,  468,  954, 1191,   28,  -51,  159,   60,-1204, -700,-1154, -236, -207, -202,  215,  115,  -46,  621,  210, -204,   60, -342,  618,   58,  175, -198,  521,  -69,  226, -336, -339,  395,-1001,-1042, -893,  -19, -158,
    -971,  240,  672,-1449, -217,  214,  255,    9, -229,  333, -145, -792, -116,  491,  436,  354,  386,  -64, -281,   48,  576, -350, -579,  -11,   40, -245,  219, -267,  230,  273,  433,  -94,   68,  521,  864,  263, -176, 1135, 1227,  832, -109, -404, -256,  411, 1192, -439, -532,  329, 1039,  560, -129,  508, -181,   74,  301,   87,  -84,  679,  579,  832,  225, -131,  318,    7, -397,  -90,  246, -991, -556,-1676, -252, -304,
     359, -954, -424,  431, -106,-1879,-1135, -559,  620,  992,  -68,   -4, -240,-1463,  591,  428,  400,  267,  136,  -84,  443, -743,  -31,   62, -164,  349, 1166, 1145,  713,  887,-1076, -488,  -11,  116,  548,  147,  573, 1249, 1215,  709,  101,  573,  726,  285,   90, -181,  454, 1178,  380,  602,  265, -198, -135,   97,  -18,  454, -180,  -40, -343, -222,  381,  718, -239,  -39,  704,  345,  125,  375, -112, -574,  204,  131,
     187, -942, -556,  412,  294, -842, -231, -117,  640,   71,-1031, -315, -420,  -26,-1312, -341,  319,   43, -235, -477,  250,  -19,  -44,  -63, -131,-1123,  172,  679,  246, -296, -410,  108,  401, 1092, 1113,  588,   14, -336,  268,  -97,  419,  549,  -22, -122,  565, -220,  613,  947,  254,  296,  532,  230,   87,  510, -574,  425,   80,   59,  425,  368,  626, 1306,  193,   59, -115,   64,  429,  -82,   -1,  153,  488,  765,
     137,   14, -654,  700,  292, -496,   95, -189,  518, -564, -714, -262, -656, -396,-1174, -614,  -41,    7, -121, -321,   11,  643,  438,  191, -592, -189, -140,  -78,  -59,  -43,  100,  -18,   22, -265,   56, -325,  -64,-1520, -946,  158,  483,  350, -903, -976,  269, -145,-1035, -475,  267, -301,   55,  449, -143,  326,  410,  163, -103,  229, 1051, 1080,  280, -351,-1139, -721,  270,  750,  522,  192,  239,  603,  484,  906,
      31,  -23, -251,  429,  661,  722,  725,   52,  687,  -50,  -20,   39,   32,  129,  107,   15,  -17, -225,   77, -487,  403,  522, -179, -437, -492,   74, -704,  637,  357, -122,  244,  443, -370, -790, -639, -523, -499,-1407,-1150, -885,  296,  170, -413, -272, -178,  546,  -99,  363, -222,  100, -274, -135, -476,  123,  441,  161, -128, -618,  245,  616,  602, -163,  183,  361,  746,  972,  231,    1, -209, -846,-1937, -512,
    -297, -413,  -49,  -13,  319,  309,  207, -351,   51,  475,   34,  208, -233,  237,  486,  718,   37,  -29, -302,  813,  512,  350,   68,  343,  783, -284, -275,  245,  782,  463,  527, -352,   52,  690,  239, -154,  256,  759,  959,  255,  789, -376, -351, -301,  403,  405,  132,  235,  150,  -19, -215,  329,  101,   16,  450, 1069, -488, -774, -774,  246,  297, -685, -322, -196,  242, -369, -553, -705, -604, -644, -963, -558,
     180, -398, -174,  747,  763,  931,   72,  401,  398,  581,  302,  366,  488,  465,  768, 1370, -229, -176, 1008, 1355,   14,  195,  397,  877,  183, 1193,  640,  258, 1192, 1429,  298, -396, -346, -100,  203, -246, -278,  -14,  137,  289,  656,  -74, -472,-1470,-1533, -216,  257,  496, -334, -198, -389,   17,  -50,   34,  340,  -18, -562,  356,   67,  608,  510,  125, -272, -769, 1104,  358,  239,  202,  -34, -105,  709, -263,
      68, -429,  -46,   48,  -14,-1490,  363,  -30, -226,-1377,  233,  848,   19, -410,-1647, -224,  -71,  113,  235,  562,   30,  390,  521,  512, 1070,  524,  838,  687,  270,-1210, -435, 1040,  970,  843, 1249,  132,  294,  578,  991,  888,  128,   -9,  151,  143, 1170, 1985,  542,  471,  712, -889,  177, -278, -881, -998, -132, -130,  294,  628, -274, -298,  404,   43, -376, -387, -466,  256, -137, -397,  140,   53,   16, -320,
     -55, -287, -942, -257,  -93, -551,-2478,-1073,  954,  911, 1097,  538,  743,  -91, -601, -540, -604,  284,   13,  122,  599, -261, -582, -934, 1036,  918, -497, -857, -407, -600,  939,  991,  542, 1077,  551, -382,  309,  118,  672,  848,  292,  170,  228, 1240,  696,   83,  532,  -20, -321, -326, -170, -312,  459,  290,  426,  595,    8,  745, 1182, 1036,  461,  359,  643, 1476,-1117,-1295, -497, -616, -300,   44, -130,-1225,
     114,  237,   43, -123, -633, -846,  -85, -206,  304,   15,  709,  421,  182, -289,  593,  808, -240, -174,  234,  793,  528, 1077,  222,  -85,  675, -879,  458, -172, -570, -669, -147,  657, 1326,  280,  415, 1003, 1243,  316,   70,  274,  -35, 1046,  322, -485,  536,  273,  293, -243, -144,-1455, -534,  433, -319,-1133, -165, -186, -245,   -7, -975,-2169,-1120, -286,  356,  258, -508, -214, -504, -428, -473, -596, -141,  166,
     189,   89, -794, -635,    2, -229,  329,  408,  776,  674,  689,  528,  577,   85,  297,  607,   55, -630, -239, 1295,  945,  221,  232, -202,  710,  288,  238,  121,  704,  832,  637, 1342, -104,  888, 1435,  524,  116,  490,  794,  985,-1284,-1136, -345, -265, -453,  281, -347, -525,-1455, -107, -132,  333,  440,  640,  -10, -915,  576, -575, -257, -684, -900, -990, -202,  504,  602,  426, -446,-1839,  422,  279,  183, -444,
     107, -384,  919,  715,  187,   96,  -92,  580,    8, -249, -114,  484,  811, 1237,  215,  -13,  273,  432,  297,   82,  175,  167,  567, 1207, 1161,  804,  199,  539, 1262,  229,  175,   46,  295, 1815, 1011, -197,  580,  345,  222, -283, -150, -338, -391, -670,  178,  444,  -10, -546,  235, -124,-1037,-2305,-1660, -629,  469,  324, -957, -719,  -45,  154, -322, -306, -202,   59, -415,  263,   90,  695,  651,  151,  136, -763,
     251, -126, -486,   -2,  415,  302, -151, -453,  223,  860,  819,  166,  701,  237,-1201, -958, -960,  -18, -714, -548, -782, -785,-1158, -934,  201,  397,  147,  127,  418,  917,  562,  673,  659,  422,   77,  945,  616, -689,  685,  891,  259, -757, -672,  733,  325,  341, -221, -234,  425,  276,  563,  149, -543,  -96,  566,  995, -449, -800,  482,   57, -328,  132,   77,  203,-1965, -519, -756,-1430, -226,  183, -486,-1713,
    -759,  -49, -741, -299, -501,   -6, -755, -826, -422,  246, -404,-1126,   71,  215,   99,-1190,  139,  -15, -669, -194,  745,   24, -284,  302,  418,  523,  237,  202,   31,  281,  561,   60,  469,  246,  865, 1586,  587,  577,  381,  555,  519,   89, -542,  142,  170, -443, -218, -299,   91,  694,  203, -377, -764,   15,  568,  192, -270,   97,  760,  626, -465,-1253, -403,  -46,  -86, -316, -894,  186,  156, -301,  193,  406,
     332,   56,  277, -284, -564,    3,  311,  759,  415,  -62, -602,-1361, -435, -228, -635,  -23,-1460,  121,  115,-1620, -361,  437,    8,-1204,  121, -373, -173, -761,   94, -223, -192,  196, 1108,  878,  271,  348, -930, -207,  919, -183,  590, -189,  114,  130, -137,  451,  356,  327, -607,  131,  294,  723, -122,  962,  392,-1375,  133,  173,  375, -875, -795,   44,  646,   19, -140,  666,  119, -448,   64,  415,   70,  173,
     518,  -75,   -8,  928,  283,  589,  235,-2028,-1136,  204,  917,  234,  604,  483,  123, -726, -507,  674,  533, -821, -323,   86,  533,  151,   16,  221,  375, -153, -237, -639,  241, -980,  351, -185,  128, -297, -747, -374, -181, 1228, -131,  335,  394, -171, -354,  443,  821, -945,  -54,  -85, -311,-1231, -461, -627,-1922,-1068, -478, -163,   93,  776,  143, -476,    0,  534,  378,  226, -128,  394,   28, -420,   10,  116,
   -1008,  163, -111, -167,  472,  393, -147, -171,  484, -599, -271,-1042, -379,-1390, -452,   56,  730,  782,   13,-1520, -907,  352,  482, -184, -655,  -63,   37,  725,  438,  624, -149, -851,  231,  443,  398, -384, -156,  446,  696, -399,  378,  322,   49,  -69, -335,  -28,  781, -142,-1061,   36,  232,  280,  295,  424,  508, -926, -302, -338,  475,  498, -354,  451,  273,   26,  111,  429,  412, -828,   87,  446,  379,  144,
      37,   82, -432,  -53, -240, -232,-1022,   -1,-1653, -534, -453,-1276, -597,    1, -406,-1123, -645,  233, -105, -775,  243,  158, -485, -970,  790,  945,  -66,-1338, -730, -430,  172,  165,   10, -297,  314,  389,  -92,  689,  493,  212,  947,  268,  144,  562,  104, -188, -208,   87,  320,  474,  282, -668, -463, -178,  666,  -25, -104,  477,   53, -812,  144,   98,   45,  199, -286,   91,  641,  935,  413, -353, -575,  129,
     447,  297, -548,  762,   -8,  -86,  155,   33,   42,  -31,   77,  496,  -19,  560,  337, -700,  546,  314, -493,  -49,  470, -301, -525, -171,  280,  764,  481, -138,-1294,  -73,  505,  -87, -628,  265,  809, 1054, -167,  197, -223, -298,  115,  -76,   99,  703,  553, -640,  -41,  -89,  -63,  544,  235, -510,  782,  591,  588,  749, -358,   33,  -47, -495, -990, -572, -376, -427, -311, -789, -793, -835, -959, -513, -239,  274,
     -12,  592, -209,    8,  169,  107,  133,  -33,-1264, -553, -400,  220,  567,  -59, -855, -448,  807,  143,  169, -739,  -34, -917,  329, -160,-1584, -915,  344, -144, -788, -555,  -11,   64, -247,  185,  392, 1035,  845, 1510,  553, -752, -439,  395,  462,  133, -535,  310,  706, -928, -319,  828,  232,  218, -204, -341,  373,   94, -402, -463,   21,   -1,  635,  554,  343, -394, -616,   -5,  640,  221, -117,  216,  218,  536,
      86, -135, -250, -353,-1122, -565,  113, -168, 1055,  231,  382,  750,  513,  654,  693, -397, -969, -138,  603,   83,  184,  643,  179,-1014,  665,  272,  234,  838,   56, -394, -109,  450,  871, 1186,  748, -464, -724,  -62,  570, -454, -319, -264,  145, -154,  162,  609,  107,  650,  380, -182,    2, 1101,   76,  167,   39,  627, -390, -410, -539, -753, -182, -455,-2153,-1149, -258,  190,   73,  423,  421,   66,   33,  -88,
    -420, -456, -118, -923, -605,  160,  656,  422, -369, -566, -376, -319,-1084, -501,   23, -428, -679, -565,  599,  630,  602,  675,  587,  439, -123,-1145,   68,  858, -689, -727, -576,   96, 1304, 1246,  274,  205,  527,  968,  807,  863,  322,  328,  359, -155,    3,  147,  150,-1454,  162, -403,   22,  570,  289, -178, -247,  333,  254,  -84,  125,  908,  121,  -10, -667, -190,    1,  112, -497, -578,   67,   -3,-1151,-1073,
    -264,  111, -947,-1643,-1336, -607,  157,  403, -950, -880,   73,  308,   73, -691, -491, -226, -398,  -75,  349,  796,  575,  881,  455,-1387,-1034, -213,  117,   65, -751,  142,   93, -715, -285,  751,  232,  421,  392,  459,  372, -371, -944, -273,  394,  493,   62,  584,  226,   16,  139, -746, -111,  647, -828, -872, -421,  574, 1058, 1293,  432,   76,  324,  185,  506,  798, -115, -281,  183, -493,   23, -490, -503,  100,
     146,  190,  133, -161,-1541,  -59,  699,  280,  609,  635,  136,  315,-1588, -341,   17,  -53, -715,  -12,  500,  669,   45,  381, -260,  123, -606,  320,  889, -523,  761,  688,  462,  436,  203,  815,  -13, -642,  256,  484,  137,  -68, -798, -501, -552,-1132,-1422,-1621,-1173, -681,  195,  108,  143, -705,-1904, -352,  542, -189, -284,   51,  682,  709,  390,  738,  172, -901,  619, -315, -314, -256,  554,  283, -196,  311,
   -1003,  -11,  296, -128, -409,  757,  328,-1068,  232,  626,  606, -451,  138,   90,  733,  853,  144,  530,   64, -617,-2464,-1009, -601,  153, -397,  -29,  525,  710,  912,   -8, -360,-1038, -739,  336,  566, -853, -708,  863, 1185, -339,  -77,  233,  347,  908, 1233,   52, -740,-1140, -536, -490, -292, -326, -786,-1084, -722,  119,  878,  531,  206,  -93, -749, -430,  723,  443,  -43, -395, -217, -327, -522,  139, -231, -616,
    -803, -514, -414,  -75,  366,  -95, -518, -417,  376,   35, -189,-1541,-1494, -562,  609, -728,  677,  645,  115, -637,-2161,  414,  736, -135, -978,  118,  332,  688, -215, 1239,  656,-1931,  301,  225,  607,   57, -587,  607,  918,  117,  354,  691,  130,-1169,   40,  241,  487,  777, -430, -115,  643,  415,  812,  406,  331, -316, -429, -169,  413, -169, -501, -278,  120,  352, -198,   66,  294,  292,  476,  710,  348, -790,
   -1381, -610, -104,  123,   11, -500, -624,  -91,-1047, -330, -315, -158,  239,  563,  306,-1416,  411,  358,   -2, -778,-1388, -268,  951, -563,-1571,   47,  667,  538, -260,  152,  285,-1302,  146,   33,  447,  914,  397, 1134,  407, -287, -881,  206,  361, -616,  -43,  586,  601,  204,  527, 1052,  606,   11, -109, -282,  557,  859, -337, -624,  382,  190,  515, -339, -436,  124,  -19,  109,  172, -237, -547,   12,  693,  -68,
    -708, -319, -352, -167,  116,  200, -142, -629,  478,  443,  121, -371, -909, -342,  618, -455,  600,  404,  251,  853,-2287, -158,  556,  489,  296,  481,  372, 1192,  404, 1340,  439,-2098, -482,  499, 1100, -300,   40,  484,  690,  819, -224,  704,   37,-1530,  162,  -68, -153,  147, -859, -354,  214, -356, -117, -318, -261,-2054, -181,  -25,  273, -904,-2061, -526,  302,  968, -510, -244,  212,  735,  253,  321,   -3,-2206,
     469, -435, -122,  319,   30, -413, -186, -125, -700, -449, -135,  406,   54,  748,  -10,-1289,  -12,  604,  539, -804, -391,  -12,  751,  -26,  332,  947,  541,  713,  335,  232,  511, -753,  555,   15,  473,  719,  504,  336,  108,-1762,-2323,  370,  667, -414,  -10,  564,  500,  329,  855,  773,  232, -426, -672, -759,   33,  325,-1358, -894,  -13, -713, -531, -721,-1267,-1351,  425,  218,  -11, -168,-1253, -469,  495,  738,
     204, -609, -329,-1263, -647, -666, -116,  541,  683,  676, -414,-2342,-1548, -227,  168, -461,  -21,  140,  554,  -42, -373,  641,  546, -523, -104,  258,  167, -223,-1126,  785,  731, -553,  557,  360,   45, -231, -131,  -17, 1171,  153,  346,  715,  541, -548,  259,  512, -100,  931, -825, -315,  772,  805,   40,  457,  100, -721, -242,   33,  210, -995,  108,  675,  555,   84,  159,  434,  192,  333,  210,  -73, -218, -345,
     283,  -14, -395, -947, -808, -387,  134,   82,  497,  444, -123,  862, -848, -160,    4,  101,  330,    9,  412,  878,  215,  589,  534, -111,  154,  477,  444,  -74, -493,  505,  762,  309,  675,  766,  274, -309,-1916, -229,  706,  189, -805,  211,  403, -123, -794, -130, -800,  334, -857,  109,  856, -403, -342,   64,  101, -178, -439,  256,   -5, -180,  653, 1055,  527, -338, -305,  -18,  -36, -521, -391,-1022, -905,-1512,
     445,  724,  336,  593,  366,   22,  155,  141,  -27, -302,-1015,  137,  424, 1325, -188, -502, -235,   75,  184, -271, -883, -627, -957,-2724,  346,  331,  683,  -62,  -32, -172,   81,  193,  -65, -640, -398, -112,   57, -709, -636,  249, -563,  864, -264,  754,  283, -819, -601, -303,  138,  136,  123,    1,  -27, -576, -835,  -73,  184, -191, -222,  363,  211,  610,  211,  163,  347,    6,  102, -635,  644, -308, -330,  534,
     235, -265, -149, -717,  193,  245, -447, -470, -167,-1493,-2034, -859, -352, -414, -861, -590, -122, -725,  265,  493,  276,   -5,  347,  198,   69,   -6,  194,  332,  565,  -22, -207,  298,  430,  999,  267,    7,  622,  -77,   91,  -65, -417, -686,-1250, -492,  153,  405,  244, -133,   74, -181,   77, -340, -205, -114,  151,   83,  171, -264,  262,   19, -140,   59,   54,  298,  234,    0,   25,  195,  104,  192,  186,  166,
     525,   81,   42,  115,  171, -621, -191,  221, -350,  151, -827,  201,  152, -918,  229, -146,-1604,  258, -423, -128, -254,  230, -459,-1541,  427,  182, -144,  394,  -78, -317, -198,  155,  183, -139,  243, -327,  760,  310,  259,  588, -762, -252,  241,-1453,  456,-1342,-1820, -459,   74,   79,  154,   53,  141, -457, -168,  108,    9,  291,  -31,  556,   80,  593, -381,  270,  493,   21, -384,  534,  483, -118,  112,  139,
     112,  150,   67,  564,  201,   20,  430,  110, -850,-2117,-1954, -438,   10,  129, -828,-1043,  -31,-1259,   27,  135,   21,   84, -202,   82, -174,  218, -245,  541, -121,   27,  437,  202,  426, -207,  227,  -74,  705,  256, -126,  179,  190, -706,-1354, -989, -326, -690,-1105,-1017, -113,  220, -213, -316, -251, -244,   83, -153,   77, -259,  -21, -463,   11, -137,   80,  224,  449,  -68,  143, -908,  284,  577,  376,  543,
     139,  357,  -21, -108,  426,  -18, -479,  386, -301, -623,  -63, -736,  803,  -89, -331, -579,-2229,-1803,-2130, -119,  -78, -266,-1334,  225,  201,  263, -165,  292,  -79,  430, -295,  195,  489,  185,  -34,  279,  324,  233,  412,  120, -518,-1133,-2210,   62, -547, -744, -896,-1476,  -27,   97, -124,  -29,  -50,  219,   64,  -49,  -33,  526,   25,  479,  -28,  919,  707,  261,  346, -262, -486,  184,  506, -295,   35, -102,
     245, -362, -583, -711,   62, -263,  109,  202, -642,-1029, -359,  -92,  157,  420,  608,  509, -480, -336, -481, -528,   16,  -17, -488, -740,  267,  537,  445,  408,  656,  352, -124,  -12, -227, -401, -288, -256,  348,  635, -126,   74,  370,  153, -610, -769,   18,  182,  356,  349,  218,  -86,   64,   76,  105,    5,  185,  142,   57, -220,   70,  167,  -25, -387,  -69,  119,  387,  272, -621,   54, -158, -463,  -99,  -15,
    -263, -340, -630, -595, -135,   88, -109, -249, -298, -171, -161, -367,  -21,    8, -109,   13, -309, -319,  -52,  735,  420,   56,   23,  -78,  -12,  -37, -202, -193, -178,  139,  -14,  256,   58,  118,   56,  132,  568,  432,  255,  -45, -108,   29,   74,  -22,  165,  385,  -99,   -9,  106,   12,   -3,   10,  134,  129,  -40,   -9,  131,   28, -246, -155, -126, -217,   89,  -62, -203,   67, -258, -373, -266,   -1, -273,  -75,
    -172, -225,  110,  120, -688, -233,  -29,  -79,   15, -354, -663, -714,  630,  634,  423, -391,  937, -680,  120, -699,  206, -468,  319,  571,  373, -241, -132,  539,  549,  529,  290,  785,  167,  734,  812,  472, -396,   -9,  579, -517, -556,   41,  -62, -852,  298,  383,  459, -187, -896,  166,  -30, -311,  394,  650,   41, -409, -496, -332,  338, -436, -373, -405,   50,  -64,  293,  311,  245, -555,  282,  381,  172,  -95,
    -492, -796, -596, -488, -563, -391,   14,   54, -633, -671, -314, -244, -146, -179,  122, -164,   78, -276,   90,  -63,  273,  184,  220,  188,  690,  139,  -69, -328,  383,  198,  -43,  128,  201,  367,  425,  347,  233,  529,  369,  581,  -50, -418,  -38,  293,   96, -176,  -92, -217,  564, -140,  -42, -708, -488, -698,  307,  422, -518, -143,   10, -182, -553,  506,  365,    5, -110, -693,   52,  -20, -344,   54, -362,   46,
     424, -117, -604, -263,  294,  718,  242,  291, -131, -433,  244,  427,  209,  -20,   94,  456,  240,  315,  369,  304,  324,  -75,   98,  389, -792, -667,-1206, -637, -377, -394, -111, -384, -115, -543, -218, -374,  279,  143,  420,  201,  302,  222,   27,   64,   44, -262, -200,   75,  -12, -998,  -84,   44, -287,   93,  266,  405,  -45,-1203,    8,  398,  303,  222,  116,  -26,  339,   58,  -10,  132,  -22,  -42, -623,  -51,
     275, -839,   71, -370, -153,-1005, -943, -297,  238,  297, -124,  393,  227,  325, -170,   54,   29, -119,  -44,   23,  154, -228,   30,   91,  306,-1178,  556, -894, -923,   92,  691,  -67,  339, -359,  112,   68,  243, -155, -110,  529,  -67,  143,   54,  -30,  126,  385,  181,   27, -666,-3045,  474,-2333,-1484,-2659,-1125,   36,  363,-1046, -185,  322,  359, -223, -748,  498,   88,  342,  309,  309,  256, -580,  474, -184,
      81,-1702, -440, -183, -206, -256,   40,  220,  407,  161,   82,   85,   73,  412,  284,   35, -157, -221,   88, -238, -219,  466,  277, -363, -250,-1321,-1292, -888, -424, -697,  112, -271,  634, -118, -218,  229,  193, -469, -105,  469, -218, -260,  -85,   96,   97,   83,  -58,  145,  127,  -74, -796, -119,   56, -847, -128,  -17, -498, -149,  -33,  550,  217, -155, -134,  314, -235,   99,   65,  114,  240,  114,  174,   72,
     525, -679,  150,  246,  -11,  137,  734,  442,  466,  464,  501,  459,  324,   80,  162,  327,   -2,  311,  148,  162,  102,   55,   56,   19, -398, -106, -476,  -49,-1613, -774, -623, -354,  -39, -463, -296, -164,   26, -501,-1176, -109,  -77,   29, -176,  140,   39, -350,    4,  -73,  145,  -32,  356, -580,-2641,-1513,  204, -905,  822,-1378,  479,  159,  165,  537, -454,  737,  133, -213,  -58,  204,  278,  160,  473,  183,
    -422,-2226,-1820, -649, -214,-1018,  260, -260,  393,   86,  152,  490,  208, -343,   -5,  428, -137,  -23,   58,   -2,   73,   35, -293, -128,  327, -219, -663,  364,  123,    7, -467,  114, -291, -247,  219,  186,   86,   14, -118,  345,  -28,  278,  148,   66,   99,    9,  237,  279,  -69,  -57,-1064, -819, -201,  274,  333,   13,  -10, -402, -188,   24,  147,  129,  227,  331,  326,  270, -111,   79,  123,  107, -255, -196,
      52,-2752,  391, -107, -160, -511, -596,  597,   88,  256,  305,  217,  285, -260,  -28,  142,  -40,  -85, -154, -160,    7, -399,   -6, -118, -390,-1899,-1832, -708, -791, -326, -729, -193,  476,  533,  514,  390,  483, -147,  258,  328, -182, -118,  294,  178,  -19,  341,  702, -187, -318,-2527,-3663,-2024, -319,-1009, -124, -168,  667, -960, -580,   -1, -221, -366, -221,  123,  195, -196,  269,   50,  -41,  468,  656,  150
};

static const INT16 Frontal_MIDDLE_SVM_HOG_360_fine_negRoll[] = {
    -170, -639,   87,   27,  570,  -27,  533,  262, -651,   39, -121,   70,  355,  290,  227, -386,-1118,-1715, -242,  122, -477, -454, -806,   83, -665, -154,  789,  225, -318, -110,  225,  366, -938,  324,   82, -532, -237,  304, -185, -715,  495,  371,  399,  444,  117,  683,  489,  359,  -98, -421,    5,  199,  258,  189,  513,  135,   54,  562,   92,  122, -225,  141,  213,  206, -338,  432, -137, -658, -896,  184, -187, -277,
    -999,  298,  -96, -515, -826,  135, -576,-2252,  886, -400,  542,  514, -132,  334,  284,  568, -544,-1275,  224, -475,-1554, -429, -819,-1509,  -72,  881,  489, -723, -597,  315,  453, -407, -226,  481,  546,  359,  357, 1006,  108, -150,-1061,  604,  559,  695,  902, 1023, -155, -575, -234,  283, -155,  430,  307,  628,  621,   32, -610,  232,  191, -129, -183,   -9, -411, -835, 1284, -532,   16,  690,  787,  233, -184, -478,
    -765,  806,  336, -266, -180,  545, -250,-1793,  381,  388,  698,  424,  226,  557, -129,  -27, -154,   17, -433,-1895,-1760, -526,  -59, -866, -725,  492,   55, -230, -201,   21, -404, -889, -325, -543,  195, 1246,  946,  244,  -84, -374,   70,  159, -633,  644,  948,  698,   60,-1224,  639, -159,  -88,  -83,  345,  196, -269,   39,  972, -427, -317,  -19,  466,  533,  677,  203,  197, -485,  628,   79,  214,  169, -238, -843,
     214,  -33, -466,  210,   -1,  -98, -159,  361, -110, -598, -151, -132,  225, -195,  -98,  -18,-1043, -427, -293,   68,  712,  112,  365, -161,   34,  683,  107,  419,  -44, -135, -413,  337,  288,  -81,  257,  431, -447,  164,  163,  448,-2233,  161, 1052, -312, -230,  579,  316, -361,  314,  118,  175,  382, -307, -665,-1071, -198, -213, -482, -226,  396, 1014,  777,  907,  779, -384,  591,  128, -194,  220,  252,  417,   21,
     161,  226,  131,  172, -907,  630,  693, -269,  473, -189, -305, -500,  -98,  150,  -71,  241,  -12, -842, -581, -278,   93, -420, -250,  -25, -467,  163,  772,-1038, -442,  364,  218,-1132, -690,  487,   99, -528, -621,   -8,  243, -621, -130,  182, -708,  -43, -183,  413,  132,  322,  -92, -230,  -15,  389,  -61,  627,  499,  645,  359,  663,  -97, -606,   40,  -59, -864,    1,  467,   -7, -409,  -66,  660,   53,  220,   35,
    -374,  586,  247,-1251, -157,  226,  453, -660, -270,  544,-1121,-1230,  185,  507,  629,  197, -191, -876, -250,    5, -356, -225, -250,  180,  560,  481,  -53, -318,   63,  561,  371,  568,  997,  233, -246,   42,  171,   82,  127,  140,  304, -509, -432,  113,  331, -183, -274,  373, -179, -457,   39,  763, 1235,  261,  361,  167,  102,  -22,  352,  112,  222, -599, -239,    2,  147,   28,  113,  359,  337,  -56,  304,  188,
     153,   19,  403,  -84,-1144,    1,  589,  795,  474,  299,-1840, -694,-1136,  667,  918,  325, -481, -309,-3433,  345,-2150,-1025,-1025,-1092,  639,   69, -548, -104,  265, -447,   26,  295,  156,  229,  394, -620, -631,  825, 1301,  120,  554,  321, 1044,  212, -649,   18, -164, -206, -148, -187, -278,  -54, -496,   91,  300, -156, -115,  487,  636, -720,  428,  451,  161,  151, -596,  688,  340, -619,-1701,    0, -280, -924,
     -14, -447, -564, -661,-1164,  175,  -41, -449, -239,  301, 1300, 1037, -199,  381,  718,  253, -648, -186,-1353,-1324,-2867, -401, -106, -571,  680, -230, -232,   57,-1138,  231,  412,  744, 1384,  358, -375, -726, -470, -184,  115,  978,  585,  604,  846, -425,-1583,  509,  896,  421, -197, -509,   78, 1131,  661,  516,  375,  298, -567, -249, -248,  139, -288, -272,  -61, -254, -637,  390,  329, -877, -420,  490,  334, -106,
      49, -308, -110,  381,  -56, -618, -302,  574, -808, -132,  365, -227,  379,  440,  463, -106,-1380,  679,  219, -973,   31,  263,  235, -256,  469, -265, -370, -105,  315, -528, -453, 1205,  258,  869,  476,   14,  829, 1209, 1167, -168, -290,  217, -273,   68, -143,  426,  258,  220,-1026,  245,  -43, -378, -203, -271,-1691, -593,  862,  550,  660,  -48,   32,  315, -120,  224,  444, -127,  571, 1019,   53,  316,  107, -166,
     221, -487, -978,   99,   42, -654, -648,  719, -514, -218,  307,   20,  570,  416, 1021,  508,   32,  414, -208, -663,   23,  422,   74, -457,  290, -112,   55, -552, -368, -461, -408,  522,  454,  965,  730, -340,  207,  829,  292, -401, 1180,  -18,  231, 1120,   30,  527,  544,  806,-1235,  295, -127,   77,  134,  118,-1607,-1623, -356,  173,  264, -136,  352,  176, -156, -268, -243,  -12,  712,  222,   10,   47,  202,  -83,
    -196,  161,  119,  389,    9, -583, -777,   26, -884, -284,  -74,  395,  229,  275,  488,  634,-1522,  339,  388, -646, -152,  351,  427, -454,  967, -377, -754, -145,  -81, -484,-1013,  378,  191,  147,  483,   63,  878,  636,  871, 1175,  912,  159, -390,    9,  359,  556,  332, -240, -254,  -17, -176, -272,  -90, -114, -971,-1002, -146,  573,  105,  -96, -265,   39,-1647,-1182,  460,  235,  801,  388,  -55,  393,  505,  286,
     181,  230,   -5, -833,  172,  222,  507, -505, -893,  489, -740, -687, -796,  191,  200,   51,  892,  650,  290,  199,  221,  535, -522, -115, 1138,  409,  694,  923,   55,  609,  465,  267,   92,  500,  478, 1044,  747,  849,  423, -231,  354, -313, -593, -461,  159,  -73, -282,  -94,  188,  295,  682, -249, -158, -764,  176, -213,   82,  189,  290, -235, -412, -387,  243,  232,  550,  220, -517,  599,   13,  -89,  460,  699,
     578,  448,  317,  800,  215,  760,  581,  -79,  228,  198, -736,   19,  248,  250, -280, -334,  136,  277,  447,  -32,  345,  386, -145, -351,  256,  405, 1113,  382,  -17,  188,  381,  103,  -82,  135, -204,  138,  354,  211,  563,  601,  977, -231, -220,  160,  565,  108,  163,  369, -402,   61,  -11, -435, -278, -714,  185,   -5,  -59,  127,  372,  612,-1018, -145,  798,  585, -593, -146, -595,  456,  206, -463, -361, -338,
     -86,  108,  264, -159,  169, -270,  327,  673,-1593,  105, -189,-1530,  423,  190,  303, -898, -404,  924,   87,  -64, -418,  450,  317,  530,  220,  255,  230,   32,  540,  -23, -108,  173, 1012,  701,  388,  194,   86, 1499, 1474,  511, -141,  272,  -28,  426,  248,  297, -240, -433, -105,  255,  416, -266,  -82, -432, -854, -557,  901,  158,  898,  988,  185,  479,  270,  134,  -19,   36,  156,  149,  -10, -153, -312,  384,
       3, -188, -374, -551,   60, -408,   39, 1128,  259,   78,   63,  -91,  508,  501,  684, -203,  -45,  511, -466,  154, -173,  543,  145,  250,-1173,   74,  200,   45, -227, -263,-1185, -682,  965,  920,  925,  179,    5, 1184, 1012,  450,  221, -329,  281, 1363,  349,  372,  274,    6, -996,  410, -328, -375, -205,  -89, -851,-1071,  120,   37,  636, -298,  265,   29,  479, -218,  -58,  116,  212, -214,    4, -183,  267,  637,
      59,   34,  -20, -287,  438,  133,  273,   89,  749,  136,  -14,  420,  146,  599,  590,  304, -129,  504, -383,  139,  -74,  351, -244, -441, -552,    6,  241, -174, -233,  243, -108, -695,  559,  883, 1398, 1196,   69,  757,  561,  182,  143, -389, -506,  361,  567,   10,  164,  369,  188,  164, -431, -933, -358, -423,  372, -112,  243,  360,  707, -690,  135, -464,   60,  -15, -167,   68, -199,  116, -762, -216,  554,  642,
    1093,  241, -126, -284,  518,  112,  248,  367,  383,  -48,  314,  973, -175,  731,  409,  464,  -91,  570, -180,-1114, -123,  640,  387, -268,  513,  816,  202,  336,  243,  473,  -61, -157,  -73,  656,  801,  479, -514,  916, 1125,  256, -344, -496, -452,  497, 1646,  106,  143,  -42, -502,  141, -299, -810,-1152, -518,  -71,  -41,   73,  -22,   32, -987, -717, -931, 1072,  -93,   16, -420,  225,  440, -337, -887,-1064,  -65,
     144,  -77,  361,  778,  233,  242,   63,  516, -399, -109, -208,   11, -478, -224,   92,  -16, -990,  483, 1022, -669, -322,  310,  362, -508,  249, -384,  402,   73,  510, -347, -555, -379,  617,  357,  452, -182,   72,  609,  901,  922, -216,  193, -172, -338,  162,  443, -102, -426, -222,  428,  -46, -455,  351,   -8, -804, -600,  959,  694,  121,  689,  -50,   91,    8,  171,  266,  271,  429,  684, -569,  464,  342,  123,
    -111,   45,   84,  385,  174, -219,  -64,  137, -209,  160,  577, -791,   84,  324,  201, -269,-1461,  627,  351,-1257, -169,  475,  254, -197, 1001,  385,  429, -319,  -77, -288,  227,  697,  785, 1027,  589,  824,   97, 1503, 1043,  265,-1136,  -22, -168, -210, -522,  154,   58,  623,  283,  788,  -73,  -62,  121, -278, -843, -364,  265,  335,  380,  885, -519,   86,  504,  350, -188, -119,  145,  -60,  919, -177, -294, -340,
     899,  256,   14,  423,  -70,  455,  288,  368, -375,  246,  277,  -16, -357,  796,  531,  238,  668,  670, -376,-1608,  357,  291,  375, -250, -134,  619,  682,  713, -372,  714,  606,  -13,  -76,  204,  245,  862, 1211,  756,  827,  387,  -42, -430, -326,  103, 1129, -214, -190,  188,  -93,   84,  -88,-1636,-2748,-1001,  109,   15, -303, -153,  455,  563, -680,-1120,  308, -105,  315, -311,   24,  346, -178, -316, -898,  131,
     -27, -600,  162,  451,  576, -102, -526,  257,  347, -495,   44, -143,   16,   -5,  470,  457, -249,  194,  252, -255, -291,  561,  206, -430,  231,  205,  -72, -434,  421,   10,   67, -514, 1231, 1219,  576,  437,  136,  932,  585,  276,  394,   65,  263,  875, -221,  625,  389,  440, -867,  114,  542, -259,   82,   -5, -422, -485, -338,  234,    6,  173, -147, -265, -363,  -24, -116,   39,  -92, -997, -490, -288,  144, -283,
     242,   37,  247, -390, -485,  178,  627,  561, -134, -469, -155,  632,   88,  182,  -58,  414, -876,  355,  549, -120, -826,  -15,  329,  -92,  383, -690,  288,  -19, 1086,  276,-1378,  212,  295,  -77,  343,  235,  210,   56,   91,  310,  739,   85,  166,  167,   12,  294,  396,  391,  210,  134,   -8, -393,   37,  158, -414, -307,    7,  389, -153, -437,  313, -259,-1002, -875,  761,  802,  425,  452, -246,  644,  461,  396,
     365, -151, -262, -406,  424,  -62,  116,  534, 1090,  101,  344,  599,  618,  483,  562,  249, -703,  372,   29,   26, -555,  767,  133,  -65,  602,  403, -320,   47,  470,  413,  219,   35,  542, 1309, 1279, 1292, -347, 1100,  494,   75, -164, -138, -333, -178,   89,  195,  548,  483, -741,  197,   89, -917, -268,  -88, -275,  240,    0,  345,  -69,-1322,-1769, -806,  491, -111, -418, -288,   73,  243,  287, -902, -481, -630,
     444,  250,   86, -816, -218,  171,  273,  189, -768,  162,  243, -749, -102,  456,  204,  495, -117,  813, -102,-1035, -404,  270,  629, -474, 1087,  634,  348, 1397,  876,  537,  365,   77, -720,  487,  644,  553,   88, 1558, 1191,  436,  253,  -46, -415,  166,  964,  166,  172,   82, -346,  598,   55, -404,-1208, -771, -245, -211,  -43,  -34,  186,  -81,  -55, -556,  679,   97,   60, -419,  137,  517,  582, -913,-1146,   -8,
    -154,  102,  244,  404,  104,   35, -668,  417,   20,  -60,  990,  611,  297,  548,-1542, -256,  431, -441, -900,  416, -479,-1004,-1847,  -91,  254,  668,  481,   64, 1104,  421, -120,   47,   60,  558,  250,   40,  623, 1151, 1151,  533, 1178, 1130,  358, -124, -443,-1032,  915,  778,  293,  108,  360,  647,  116,  183, -602, -120, -189, -298,   30, -150,  -83, -227,  721,  417, -161,  267,  628,  392,  472,    8,  151, -154,
    -507, -234,   99,  326, -169,  -30,  -51,  245, -199,-1058,   -2,  620, -346,-1314,  -41, -335,  386, -558, -783,  188, -141,  -58, -820,  259, -190,  -52,  550,  398,  888,  632, -206,  441,  544, 1148, 1132,  437, -102,  214, -452,  -12,  715,  221,-1190, -177,   43, -531, -227,  324,  -33,  354,   36, -132,  746,  438,  151,   34,  295,  482,  191,   37,   42,  191, 1280,  611,  216,  431,  315,  329,  488, -479,  537,  117,
    -231, -176,    3,  -16,  118,  469,  599,   22, -122, -743, -461,  530, -556,-1163, -296, -584,  755, -826,  120,   89, -264,   89, -511,  318,-1039, -862,  342,  429, -623,-1050, -199,  208, -318,  188, -157,  177,  198,-1018,-1303,  -88, -104, -236, -359, -634,  -59,   71,  -89,  -75,  258,  523,  862,  262,  841,  491,  563,  305, 1014, 1032,  172, -191, -651,-1172, -353,  264,  507,   99, -271,  398,  195,  475,  392,  -61,
    -487,   13, -165,  -11, -442, -190,  472,  423,  134,  103,  102,  686,   66,  159,  105,   46,  426, -328,  -57,  -24,   88,  689,  689,  661, -265, -336,  185,  279,  270, -158,  595, -188, -549, -692, -854, -335, -938,-1264,-1499, -536,  653, -688,   49, -521,  424,  308,  -36,  384,   23,  246,  958,  769, -492,-1844,-1052, -219,  584,  252, -529, -180,  451,  200, -163,  623, -127, -339,  183, -160,  152,  460,   32, -459,
     795, -302,   34,   14,  420,  117,  405,  519,  100,   80,  400,  105,  748,  524,  212, -245,   72,  -61, -371, -341, -383,  194,  295,  277, -309, -342, -287,  712,  165,  170,  396,  440,  -25,  288,  722,   79,  287,  916,  738,  285,  260, -296, -352,  781, -397,  489,  448,  813, -646, -565, -390,  272, -555, -953, -684, -584,  191, -760, -693, -583, -215, -322, -707,  240,  337, -226, -113,  230, 1086,  473,   59,  122,
    1327,  994, -257, -266,  849,  334,  173,   -3,  313,  313,  575,  339, 1322,  771,  523,  354,  730, -171, -365,  232,  371,   63,  868,  800,-1510, -520,  -67,  647,  536,  298, -174,-1437, -303,  170,  -33, -284,  261,  135,  -40, -250,  327,  699, 1190,  239, -351,  253, 1455, 1215,  234,  237,  364, 1126, -311,  671,  -56,   43,  540,   40,  304, -767,-1005, -287,   28,  474,   40, -383, -155, -237,   17,  329,   53, -155,
     133,   -9,  250, -571,-1238, -867, -296,  573,  549, 1085,  982,  944, -608, -588,  -48,  770, -287,-1057, -312,  -59,-1191,-2469, -436,  -67, 1233,  270,  199,  250,  -26,  573,  105,  691, -421,  515, 1040,  597,  913,  842,   95,  254, -778, -545,  949, 1057, 1009,  908, -582, -348, -534, -447,-1171,-1065,-1257,  -63,   51, -239, 1018, 1157,  657,  -87, 1436,  579,  353,  427, -339, -126, -301, -256,  543,  445,  277,  461,
     534,  249,  152,  -62,  484,  504,  364,    8,  820,  168,-1397, -262, -250,-1687, -448,  -45,   43,  -82, -530,   60,  -39,  337,-1484,   39,   92,  196,  -11,   71,  473,  572, 2008, 1201,  117, 1171,  849, 1069,  953, 1027,  646,  305,  544,  856,  577, 1075, 1062, -414,-1253,  111, -387, -144,  269, -468, -251,  -20,   70,  184, -277, -268,  601,  245, -452, -389,   14,  428, -209,  243, -705,  774, -118, -129, -901, -749,
    -392, -672,   24, -901, -758,-1195, -798, -742,   56,  718,  812,  157,-1175,-1255,  230,  649,   97, -447,  -94,  261, -410,  -71,  332,  437,  712, -737, -757,  238, -361, -228,  322,  294,  900,   91,  498,  661,  959,  783, -628,  619,  132,   93,  353,  231,  618,  563,  863,  327,-1313, -796, -555,-2075,-1614, -569,  195, -227,   49,  534, -794, -465,  138,   47,  111, -273,  205,  585,  269,  425,  978,  561, -106, -566,
      34,  300,  497,  241, 1231,  510,  196,  175,  523, -149, -302,   12,  -30,  234, 1216,  886,  686,  906, -322,  183,  584,  -55,  109,  176, -695, -432, -300, -166, -568,  -22,  384,  190, -232, 1026, 1805,  281, -293,  232,  399,  623,  697,  280,  893, 1166,   51,  220,  284, 1241,  583,   27,  259, -611, -868,   91,   33,  554,  164,  -51, -602, -895,  189, -136, -214, -287,-2414,-1017, -104,  268,  327,  471, -646,-1749,
    1202, -310, -621,   98, -219,  169,  166,  909,  524,  697,  559,  705,  547,  272,    0,  540, -681, -885,  140,  160,  324,  343, -120,  -64, -266, -363,-1160,-1192, -502, -368,  213, -454,  508, 1442,  921, -108,  986,  817,  553,   69,  156,  221,  284,  736, 1303,  658,  820,  760,-1930, -480,  404,  544, -395,  148,  251,  390, -613, -284, -501,  613,  410, -200, -976, -769,  304,  -68, -100,-1393, -909,   28,  660,  461,
     780,  233, -149, -242, -144,  203, 1039,  515,  407,  670,  -20,  274,  814,  579, -231,  170, -160,   37,  168,  105, -212, -124, -975, -608, -479,  330, 1038,   40, -253,  327,  316,  546,  972,  408,  240, 1291,  268,   66,  356, 1202, -115,  474, -813,  685,  602, -163, -679, -554, -479, -531, -212, -633,  119, -158, -673, -440,-2188, -942,  -10, -164,  235,  331, -259,-1132,  526, -408,-1359, -193, -160, -136, -965, -264,
     636,  597, -565, -571,  427,  582,  660,  624, -329, -386, -557, -486, -446,   21, -523,-1108, -933,  -16, -466, -419,  426,  657,  223, -567, -167,  363,  344,  370,-1477,  139,  139,   -3,  232,  274, 1287, 1316,  920,  794,  957,  553,  791,   90,-1214, -183,   58, -611, -750, -722, -576, -491,   98,  -19,-1119,-1178,  -22,   33,  935,  142,  -70,  302, -222, -567,    6,  125,  564,   48, -357,  159,  388, -187, -146,  314,
    -745,  164,  109,  808, -155,  298, -890,   59,  146, -440, -566,-1353, -509, -859, -110,  545,  -25, -212,  649,   37,  -35,  121,  141,  138,   57,  437,  301, -483, -925,  682,  309, -597, 1075,  374,  240, -215, -944,  561, 1559,  844, -160,  367, -856,-1528,  120,  -15, -635, -772,  178,  634,  -32, -554,  494,  193,  224, -115,  133,   56, -369, -379, -352,  353,  553,  683,  202,  232,  783, -324,   50,  380, -371, -267,
     678,  500,  -12, -716,  142, -258,  383,   43,  316,  108,  641,  626,   35,   25, -338,-1572, -186,  149,  188,  140,  294,  702,  -83,-1497,-1166, -599, -524, -826, -668,-1215,-1566,-1516, -595,   17,  844,  240,  -98,  164,  496,  344, -512,  875,  321, -643,  412,  425,  695,  709, -280, -310, -324,  616,  264, -196,  298,  536,  743,  704,   81, -267, -862,  177,  707,  407, -682,  151,   94,   80, -129,  560, -363,-1929,
   -1455,   46,  755,  708, -183,  457,  334, -943,-1083, -252, -579,  493,   58, -476,-1391, -279, -158, -101,  139,-1039, -242, -104,  389,  502, -209,   42,  314,  401, -188,  742,  -66, -280, -436,  355,  420,  161, -332,  729,  476, -194,  681,   10,  -98, -696, -887, -175,  599,  396, -734,  398,  434,   94,  168,  382,  416,   38,  406,  467, -377, -433,  -50,  289,  501, -347,  416,  261,  110, -984, -881,  512,  393,  307,
     742,  339,   39, -539,-1444,  398,  898,  541,  303,   42, -916, -946, -220, -461, -712,   50,-1610, -921,  169, -243,  425,  149, -493,-1344,  576,  368, -294, -827,   67,  237,  623,  129,  318,  212,  776, -313, -422,  424,  360,  291,   72,  210, -247,-1022, -718,   66,  217, -722, -504,  179, -299, -157,   99, -506, -518,   30,  148,  469, 1348, 1104,  835,  468,  156,  327,  615,  -73, -790,  103,  549, -461, -763, -886,
     157,  592, -206, -971,-1137,  147,  656,  190,  672,  399,  334, 1156, -430,  736,  642,  483, -298, -175, -169,   33, -151,  137, -533,-1052, -136,  142, -269, -378,  695,  104,  595,  184, -415,  786, 1268,  962, -377,  608,  -94, -629,  757,  191,  255,  632,  488, -137, -332,   37,  426,   54,  210, -307,  -21,   70,  108,  384, -732, -545, -431, -390,-1196,-2179, -549, -218, 1121,   50, -178,  381,  637,   80,  268,  119,
   -1555,   81,   87,-1459,-1209,   -7,  420, -331,-1427, -606,  -58,  401,  -27, -640, -194, -488, -238,  286,   58,  340,  753,  327,    0, -545,   51,  101, -203,  541,  373,  348,  390, -144,  290,  296,  893, 1144, -191,  946, -144, -876, -795, -162, -370,  120,  229, -200, -228,  164, -405,  110,  670, -101,  183,  112,  411,   16, -911,  383,  155,  143,  -38,  617,   56, -775,  690,  291,  120, -618,-1434,  400,  957, -196,
       1, -489,  252,  552, -139, -548, -296,  459,  433,  117,   47,   68, -634,  302,  557,  -21,  751, -564,  266,  415,   84,  187,  -92,   12,  701,   88,  -25,  107, -116,  -70, -673,  537, 1104,  814,  272, -657, -259, -189,  171, -140, -174,  463,  768,  264,  -90,  500,  -50,-1278, -768, -766, -848, -274,  303, -258, -504, -972, -603,  -82,   45, -393, -460, -362, -538,-1006, -412,  254,  529,  -38,  818,  602,  561,  756,
    -189, -668,  -17,  149,  309, -327,   -3,  768,-1093, -308,  256, -431,-1182,   65,  242,   58, -230, -806,  -42, -745, -810, -716,   -3, -503,  140, -529,   76,  536, -310, -188, -445,  184, 1571,  849,  254,  462,  632,  406,  587,  569,   97,  216,  539,  404,    6,  584,  276,   87,  256, -905, -267,  -47,  428,  158, -300,  151,  573,  733,   41, -326,  -48, -345,-1272, -404, -284,  236,  741,  111,  177,  553,   -6, -766,
    -797,  -35,  264, -657, -965, -563,  195,  239,-1266, -487, -606,-1688,-1100, -382,  -33, -616,  -78, -453,  140,   64,   47, -968, -200, -218,  551,  138,  275,  962,  147, -175, -155,   92,  328,  259, -311,  -66,  241,  514,  680,  -82,-1212,  -37,  944,  825,  100,  177, -429, -727,  927,  639,   74, -316,  131, -514, -361,  458, -779,   49,  499, -111,  214,   15,   94,  125, -735,  309,  469,  330, -102,  677, -170, -515,
    -820,  503,  641, -516,  257,  518,   53, -293,  332,  914,  157,-1052, -886,  155,  567,  708,  852,  -39,  -37,  543,-2096,  212,  524,  174, -265,  381,  312, -136, -787,  841,  457, -470, -253,  104, -193,  396, 1056, -185, -348, -728, -128,  425,  277,   70, -956,  210, -637, -198,  499, -119,  148,  405,  261,   15, -407,   55,  690,   71, -123, -476,  376,  -39, -470,  181,-1200, -250, -108,  -14,-1095,-1879, -652, -522,
    -627,   59,  531,  148,  217, -614,-1044,-2422, -552,  573,  615,  207,  861,  723,   81,   52,  -71,  302,  -45,-1035,-1192,  325,  767, -318,  899,  302,  243, -103,-1125, -725,   18, 1268, -951,  595,  306, -680, -226, 1194,  914, -844,  774,  516,   16, -316,-1049, -365,  -14,  905, -263, -217, -378,  -36, -591, -236,  165, -502,  -87,  190,  454,  808,  447,  700, -490, -706, -396, -286, -459, -525,    9, -720,-1097, -839,
    -798,   87,  611,  636, -120,  729,  397,-2141,-1461, -186,    7,  412, -668,  608, -516,-1411, -123, -412, -535, -892, -514, -549, -157,  370,-1230,  119,  683,  326,  819,  497,  234,  156,  119,  618,  211,  192,  -40,  865,  564, -728,  774,  375,  162, -951,-1849,  676, 1262, -172,  322,  278,  112, -205, -748,  356,  690,  431, -198,  414, -165, -388,  312,  109, -291, -524,  428,  630,  -31, -446, -234,  376,  434,  784,
       5,  518,  127, -114, -390,  507,  638, -349,-2571, -426,  664,  704, -472,  160, -283,-1603,-1140, -294, -585,  205,  602,  -90, -614, -569, -516,  531,  721,  383,  944,  -74,  485,  281, -229,   11,  336,  524,   73, 1136,   -4,  -78, -299,  176,  235, -129, -539,  744,  784,-1221,  329,  206,  466,  149, -370, -181,  -43,  215,-1028,  202,   -2, -214,  162,  555,  633,   35,  849,  794, -281,-1037, -825,  132,  482,   76,
     804,  274,  412,  570,  465,  547, -123,-2206, -301,   87,  409,  477, -458,  619, -356, -834, -207, -354, -347, -770, -681, -166,  178,  139,-1590,   27,  718, -165,  164, -136,  -59,  209, -208, 1096,  447, -501,  769,  692,  480,  -39, 1223,  423,  528,  379,-2110,  457, 1388,  399,  785,  216, -210, -505,-2126,   10,  315,  285, -943,  299,  -14, -161,  903,  300, -580,-2107, -388,  181, -315, -959,-1996, -283, -279, -158,
     861,  378,  -19,  286,  -82,  552,  554,  193,  828, -100,  473,  520,  175,   29, -149, -816, -942, -423,  -45,  253,   23,  126, -393, -845, -139,  415,  226, -805,  358, -795, -130, -762, -255,  237,  758,  694,  144,  694, -219,-1780,  -94,  454,  476,  152,  275,  747,  479, -606, -470,  -57,  -16, -383,-1599, -924, -979, -495, -211,   16,  267, -374, -238,  570, 1031,  714, -396,  872,  118, -994, -295,   87,   79, -522,
    -645,   -6,  337,  405, -630,  899, -332,-1370, -230, -338, -318,-1213,-1531,  251,  586,  264,  135,  -92, -600,-1344, -117, -633, -516,    3, -576,  363,  227, -909,  178,  541,  516,  -32,  980,  432,  -42,  171, -289,  465, 1234,  394,  496,  626,   91,-1462,-1273,  304,   85, -292, -298,  174,  143,   17,  -20,  676,  -45, -609,  168,  315, -675, -419,  182, -426, -274,  602,   76,  673, 1107,  563,  824,  548, -303, -118,
    -666,  535,  549,  -61, -119,  740,  -47, -303,  377, -144, -350, -622,-1424,  -46,  791,   28,  313,  -80, -397,  455,  -96, -147, -417,   40, -383,  686,  383,-2240,  365,  455,  547,    4,  842,  509,    3,  584,-1710,  122,  408,  582,  684,  523,  968,  348, -780,  569,  172,  278, -247,   -8,  238,  476,  890,  460, -489,-1291, -772,  -45, -937,-1361,-1300,-1257, -668, -499, -391,  239,  829,  877,  383,   67, -690, -668,
     169,  147,  310,   -9,   22,   49,   39,   98,  439,  494,  365,  468,  327,  209,  125,  287,  223,  157, -630,  512,  432,  709,   83,   24,  123, -205,    7,  -82,  -80,   -1, -348,   23, -155, -253, -463,  -53, -147,-1195, -477,   44,  -21, -492, -115, -421, -342, -665, -752,-1603,  245,  -73, -183,  104,  193,  481,  127,  290,  140,  523,-1316,  856,  763, -448,  525,  150, -612,  342,  -42,  121, -942,  218,-1497,-2841,
      12,   76,  -10, -127,  -93, -270,   73,   97,  479,  133,   61,  398,  414,  -22, -409,  194, -609,-1864,-2325, -426, -242,  272, -956, -190,   69,  143,  309,  -31,  284,  256,   45,   97,  257,  233, -288, -279,  359, -120,   -4,   89,  356, -609, -262,  331,  100, -463,    7,  141,   80, -120,  307,  336, -181, -266,  110,  139,    9, -181, -403,  -28,  347,  233,  151,  120, -795,-1132,  -47,  -56,   51,  334,  239, -191,
      27,  -64, -115,   24,   77,   20, -239,  159,  382, -112,  308,  214,   48, -217,  343,  198, -310,   41, -860,  262, -327, -971,-1031, -103,  -20,   91,  106,  -52,   46,  171,  286,  127,   96,  132, -295,  321,  516, -133, -207,  258, -985,  537,-1261,  294,  -65,  752,   17, -994,  316,  272,  393,   76, -190,  447, -565,  245,  249, -198,-1096,  403,  521, -743, -115,  327,-2244,  403,-2682, -684,    4,-1133,-2701,-1448,
    -249,   92, -251, -146, -357,  269,  506, -207,  108,   90,  285,  385,    8,  275,  403,   61, -146, -199,-2970,  143,  299,   87, -151, -128,  122,  -72, -279, -213,  172,  -61,   58,  102,  199, -226,  -31,  626,  456, -108, -533,  195, -942,-2010,-2053, -342, -356,   78, -855, -430,  113,   74,  134, -228,   73,  205,   96,  240,  581,   -6, -239, -426,  358, -130, -168,  218, -120, -894,   58,  124,  -10,  -90, -869,   66,
    -134, -215,   -3,  -38, -128,  -27, -368,   19,  182,  282,  124,   61,  158,   -3, -299,  249,  -57,  404,-2771,  123,  644, -558, -486, -109,  161,  308,  -73, -162, -180,  673,  329,  -13,  434,  528,  441,  383,  251,  242,  -65,  498, -795,-1603,-1681, -425, -259, -796, -339, -838,   46,  264, -172,  210,  142,  667,  461,  -59,  -50, -578,-1138,  734,  161, -240, -427, -216,-2069,-3698,-2808, -367, -171,  -75,-1046, -347,
     310,  382,  327,  237,  403,   66, -104,  329,  418,  230, -480, -116,  472,  148,   18,  242, -295, -605,  -88,  431,  305,  222,  704,  297,   62,   36,  245,  301,   82, -236, -225,   41, -357, -213, -586, -141,  186,  424,  173,  267, -595,-1194, -699, -793, -386, -132, -418, -366,  138,   -6,   45,  347,  -49, -628,  -17,  -17,  381,   -1,-1233,  -41,  -20,  138,  237,  316,   -3,  -57,-1015,   13,  425,  272,   46, -282,
     -37,   54, -139,    2,  112,  175,   54,  178,  -76, -117, -136, -421,  -55,  230,  -72,  -94, -244, -402, -382, -301,  109,   24, -233, -270,  184,  -33, -179,  -44, -161,  -76,  -17,   33,   30,  192,  -21,  -29,  305,  164,  189,  -23, -130, -158,  -47,  456,   42, -147,   65,    0,   13,   35, -333, -140,  -15, -304,   47, -144,  -71,   39, -119, -230,  107,  316,  166, -113, -128,  -53,  -56,  381,  417,  324, -406, -145,
    -642,  137, -630,  934,  567,  333, -417,  185, -619, -675, -361,    3, -427,  403,  619,  617,  119,  137, -233, -178,  -36,  -27, -231, -673, -749,  -57,   59, -494, -176,  479,  374,  268,  396,  808,  686,  159, -537,  542,  -16, -391,  520, -142, -237,  335,  797,  279,  532,  540, -512,  243,  275,  291, -133,  180,  337,  175, -433,  328, -309, -491,  -22,   31, -407, -390, -290,  -41,  171, -792, -390,   66,  659,  386,
     955,  -50, -379, -489,  -54,   43,   98,  479, -613,  -28,  -79, -584,  105, -132,   11,  -55, -857,-1222, -586, -299, -418, -148,   38, -215,  -63,  105,   43, -143,    4, -170,  314,  133,  523,  202,  221,  225,  -13,  485,  663,  801, -206, -374,  -60,  -35,  478,  -63,   60, -215, -657, -312,   81, -253, -270, -357,  -62, -356, -248, -330,  -39,  131,  -98,  178, -187, -123,   68,   75,   72,  129,  -32,  -52,  173,  172,
    -554, -541, -233, -497, -815, -501,  -12,  -11,  -16, -318,-1361, -667,  580,  667,  417,  181, -790, -674, -258,  269,  227,   96, -267,   54, -822, -597,  177,  397,  391,  422,  185,   20, -213, -306, -436, -224,  -12, -150,  671,  379,  469,  470,  564,  261,   -2, -129,  342,  650,   62, -595,  275,  378,  -29, -142, -486, -189,  168,   67, -235,   57,  133,  -23, -378,  -20,   60,   71,  -75,  226,  141,  180,   21,  110,
     -78, -342,  297,-1601,-1508, -350,  362, -261,  159, -894,   60, -366,  -88, -223, -823,  126,  153,   50,  127,  501,  214, -160, -713,  204,-1373,  161, -209, -716, -438,-1727,-1518,  458, -315,  211, -173,  197,  601,  205,  226,  760,  388, -100,  166,  438,  155, -123, -234,  -85,  488, -350,   51,  498,  234,  121, -106,  513,  537,  -44,  253,   38,  239, -400,  641,   52,   45,   89,   86,   58,  112, -173, -497,  147,
      58, -133, -934,  -63,   48, -227,  108,    5, -420,-1120,-1462, -889, -955, -703,   96,  -27,  495,   67,  109,  124,   71,  407,   17,  159, -823, -826, -589,  181, -905, -979, -577, -278, -101,   85, -256,  377,   88, -139,  264,  733,  536, -223,  172, -181,  218,  425,   24, -108, -878,  105,  -33,  460,  524,  240,  500,  225, -489,  -61, -207,   64,  261,   87, -134,   21, -279, -167,  170, -126, -140,   86, -243, -271,
    -243,  165,   88, -262,-2550, -919, -548, -866,  119,-1005, -313,   59, -459, -121, 1317,  435,  596,  376,  737,  439,  183,  161,   19,  347,  732, -276,  668, -598, -264, -703, -666,  266,  -81, -357, -535,  -83,  221, -611, -823,   52,  -60,  726,  293,  327,  158,    8, -103,  -25, -613,   86,   13,  330,  544, -331, -323,  638,  326, -168, -203,  198,  155,  211,  606,  203,   -4,  100,  149,  142,  -66, -833, -486,  -20,
     233, -133, -414, -247,   38,  123, -114,  159, -429, -399, -337, -216, -309, -402, -185, -233, -424, -136, -128,  135, -215, -231,  102,  168, -208, -263, -263, -238,  -46,  150,  324,   93, -196,   16,  218,  289,  -36,  -87,  -42,  548,   80,   98,   44,   64,   93, -116,  -72,  535,   45,  -23,   25,  226,  128,   53,   94,  -11,   -1,  126, -139,  146,  236,   99,   51, -149, -197,   84, -139,   20,  100,   95,  -76, -247,
    -133,-1940,-1758,-2243,  218,-1233, -244,  -57, -760, -230, -685, -301, -578, -406, -119,  770, -157,    3,  383,  170,  397, -482,  -40,  398,  123,-2377,-1156, -499,-1432, -969, -732, -562,  268,  -39,  157,  439,  182,  334,  299,  384,  312, -230,  289,  219,  159, -273,  413, -101,  193, -488, -292,  334,  -51,   65, -312,  468,  466,   32,  491,  -62,  212,  763,  961,  -14,  -12,  -62,  113,  -34,  -33,   26,  188,  -67
};

static const float Frontal_MIDDLE_evalues[] = {
   1830.4699973221814000f,757.9278119839075300f,382.9423506934768400f,300.4476721824381700f,215.2613003643543500f,117.9165642267900700f, 68.4064775367736220f, 54.4725522421482820f,
    48.2511098821965160f, 44.3409137989706540f, 35.5338614888201080f, 30.4945258826606500f, 26.4312119584807550f, 26.3172884586877200f, 20.9212829312974090f, 18.9085491039812760f,
    17.7571692405224470f, 15.5344097889490200f, 13.2787226962824740f, 12.5681681777240900f, 12.0279573236545330f, 10.1543322183541010f,  9.5519022983991455f,  8.7707442110832172f,
     7.7367816193873900f,  7.3574927026635155f,  6.9746603600665980f,  6.8443572181220862f,  6.1587994091480915f,  5.8455617884104365f,  5.5048857957798161f,  4.8367982913876890f,
     4.6120748675454335f,  4.4284837635846062f,  4.3470840555803072f,  4.1805941139978504f,  4.0987883132658078f,  3.4313382422529433f,  3.3415728313106081f,  2.9054097915146899f,
     2.7764956997048245f,  2.7208212430296066f,  2.6000450865454310f,  2.4516277927039849f,  2.3318717191648064f,  2.2388397928261115f,  2.0623642800236772f,  1.8816441656324840f
};         /**< Principal eigenvalues, corresponding to selected eigenvectors, of the covariance matrix associated with the set of 3D models. */

static const float Frontal_MIDDLE_elimit[] = {
   128.3519769068619800f, 82.5914663137491940f, 58.7067385931231200f, 52.0002793227300230f, 44.0153575843612690f, 32.5768181079907040f, 24.8124625507216120f, 22.1416568977873570f,
    20.8389056560023960f, 19.9766920232238620f, 17.8830856789140570f, 16.5665546491702930f, 15.4233883315673170f, 15.3901135839924660f, 13.7219366848006070f, 13.0451884591918200f,
    12.6417768990242050f, 11.8241146856980870f, 10.9319945237153440f, 10.6354837031287310f, 10.4044036788703470f,  9.5597588863520464f,  9.2718455921996625f,  8.8846326823200155f,
     8.3445212309926156f,  8.1374095585740083f,  7.9228746828786445f,  7.8485167364986097f,  7.4450785544769653f,  7.2532789892361045f,  7.0387479115264782f,  6.5978166557194662f,
     6.4427225462461832f,  6.3131888829862719f,  6.2548986003150180f,  6.1339503605735715f,  6.0736393389295245f,  5.5571615218811559f,  5.4839908353128628f,  5.1135787980270928f,
     4.9988459965619487f,  4.9484736219632879f,  4.8373965910300214f,  4.6973024316447702f,  4.5811401934980394f,  4.4888259194844036f,  4.3082802276793801f,  4.1151910636922260f
};         /**< Deformation limits, associated with the selected deformation directions. */

static const POINT3DF Frontal_MIDDLE_evectors[] = {
   {  0.0001886808027717f,   0.0486434557267508f,   0.0248481799310732f},{  0.0027058330833747f,   0.0571283126663376f,   0.0344290074448974f},{ -0.0577222482930587f,   0.0255895879217350f,  -0.0454200386703832f},{  0.0154015497190415f,   0.0108329771489964f,   0.1111891914869400f},{ -0.0006365671825263f,  -0.1053654696396142f,   0.0946615299911196f},
   {  0.1067652483224937f,   0.0085976271119995f,  -0.0292339592568103f},{ -0.0354010224834933f,   0.0762886907005919f,   0.0009474101388954f},{ -0.0052552676682795f,   0.0612386663474002f,  -0.0005177418541607f},{ -0.1103688647402208f,   0.0126608256937412f,  -0.0247900046930321f},{ -0.0287442156750368f,  -0.0281321052947564f,   0.0317456523433545f},
   {  0.0797344871753726f,  -0.0504329021306816f,  -0.0722565769965072f},{  0.0492266531746871f,  -0.0240297278581051f,   0.0014597004935700f},{  0.0551582219407475f,   0.1194961080069601f,  -0.0345917344806852f},{ -0.0432535634484892f,  -0.0229721439696370f,  -0.0044038035093239f},{  0.0032541844319805f,  -0.0402766673815309f,  -0.0438541820022725f},
   { -0.0841883929744288f,   0.0498268869261856f,  -0.0002802822188680f},{  0.0507582780910565f,  -0.0957343472642576f,   0.0921343149416925f},{ -0.0443710854839159f,   0.0478407335289500f,   0.0025927569834909f},{ -0.0490005041132293f,   0.0698271023305684f,  -0.0516685526078309f},{  0.0008735416966614f,  -0.1013585069678114f,  -0.0400369522754704f},
   { -0.0309613025542397f,  -0.0399146931861322f,  -0.0825617126826952f},{  0.0136949846329967f,   0.0041765901661275f,   0.0204736127138753f},{ -0.0568188960506411f,   0.0144834595503236f,  -0.0105367083494805f},{  0.0249292947381702f,   0.0030273880221979f,   0.0026851541465633f},{  0.0084955872167506f,  -0.0460532678292470f,   0.0376077812726253f},
   {  0.0520475876112650f,  -0.0602640145112648f,  -0.0715898984466854f},{ -0.0300510185841193f,  -0.0229525001051237f,  -0.0119624247960095f},{ -0.0024007425236801f,   0.1071183770755084f,  -0.0427220354531343f},{ -0.0224146986953347f,  -0.0460085434575087f,  -0.0134002138930325f},{  0.0141505599203941f,   0.0191955983310452f,   0.0109152162143819f},
   {  0.0676473156703766f,   0.0225506670919570f,   0.0489648159356735f},{  0.0114011970766605f,  -0.0253914857070474f,  -0.0020724486792475f},{  0.0487667244888877f,  -0.0112138389149428f,   0.0000000423572471f},{  0.0058203837768778f,   0.0160115756252001f,  -0.0044659578594008f},{ -0.0471167208821186f,   0.0172680900097416f,  -0.0720626282263615f},
   { -0.0520296139005020f,   0.0065385647418027f,  -0.0610428868202711f},{ -0.0659051386632927f,   0.0331639397684475f,  -0.0002201594612549f},{ -0.0286310952907082f,  -0.0213575395617327f,   0.0265784464035104f},{  0.0515082576682024f,   0.0363278594936333f,  -0.0072152967408414f},{  0.0287889786378629f,   0.0102491562756893f,  -0.0332490788575740f},
   { -0.0481321949673408f,  -0.0162620037191157f,  -0.0169909484845302f},{ -0.0484665420992217f,   0.0727967426370777f,   0.0262707577150441f},{  0.0221626997955530f,  -0.0204195603260469f,  -0.0718934207567917f},{ -0.0318204630204217f,  -0.0611512396185348f,  -0.0311815684614925f},{ -0.0016756216328265f,  -0.0342032076680936f,   0.0126371869869096f},
   {  0.0277977293226795f,   0.0426711116633249f,  -0.0338104909559136f},{ -0.0095179339311354f,  -0.0024676930237847f,   0.0297581234548220f},{ -0.0051918335957505F,  -0.1066585188751402f,   0.0014765922442929f},
   { -0.0011915352297206f,   0.0597161970267334f,   0.0131197364566606f},{ -0.0012256184912290f,   0.0752609734789468f,   0.0137276422362081f},{ -0.0366554668432068f,   0.0286093734540928f,  -0.0514242555269062f},{  0.0301342173272346f,  -0.0266368124757967f,   0.1310196481419367f},{ -0.0031476096167350f,  -0.0960377156104783f,   0.0682259736760489f},
   {  0.0657668742088846f,   0.0337993664252611f,  -0.0733116730509984f},{ -0.0178737500042763f,   0.0931504961067296f,   0.0073682117208380f},{ -0.0123600556679088f,   0.0919015278242145f,   0.0022835271441469f},{ -0.0750248098607359f,   0.0253271604471163f,  -0.0109468417350873f},{ -0.0442538046031786f,  -0.0009772958785880f,   0.0277397820887746f},
   {  0.0816131300033810f,  -0.0908633797061413f,  -0.1007463346060627f},{  0.0205915922837223f,  -0.0312851046829277f,  -0.0147222117348966f},{  0.0715723781776876f,   0.1053652254423452f,   0.0202341765181559f},{ -0.0472697200889495f,  -0.0824567722726444f,   0.0052166379816588f},{  0.0250141359802190f,  -0.0649513659659477f,  -0.0531901441614214f},
   { -0.0814760564279568f,  -0.0164774296235870f,   0.0230874947963714f},{  0.0630367818886493f,  -0.0929632504416042f,   0.0763029240974600f},{ -0.0651827009698354f,  -0.0216346257473423f,   0.0082305357640695f},{ -0.0534108604713554f,  -0.0142459889028529f,  -0.0450217876331308f},{ -0.0505976890767685f,  -0.0362210151148742f,  -0.0477594212707617f},
   { -0.0005628595012405f,  -0.1028906360958957f,  -0.0421699920965719f},{ -0.0700518972876099f,  -0.0587069473596301f,  -0.0323406475609768f},{ -0.2082507600414338f,   0.0669723654313759f,  -0.0469715420702702f},{ -0.0345860169925382f,   0.0347864313701201f,   0.0117869257915708f},{  0.0194216939338039f,   0.0053947301066592f,   0.0068675391933019f},
   { -0.0528557894258262f,   0.1011236748224108f,  -0.0461941550457178f},{ -0.1579769948566604f,   0.0629877674199429f,  -0.0196040609020222f},{ -0.0056140103031506f,   0.0858035720698182f,  -0.0273263940805332f},{ -0.1055135201666284f,  -0.0655862572440669f,  -0.0300465347649476f},{ -0.0573520095283031f,  -0.0338067289238642f,  -0.0586355365652461f},
   { -0.0700946416321087f,  -0.0121901811857809f,  -0.0002080372218234f},{  0.2003829501564539f,  -0.0152455155930489f,   0.0479587833805950f},{ -0.0313146525525379f,  -0.0170090755027521f,   0.0270210690559377f},{ -0.0574267394354588f,  -0.0123338611955972f,  -0.0157975410442610f},{  0.0991560241221715f,   0.0349583376129386f,  -0.0187269852136880f},
   {  0.0260353280517831f,   0.0078312522301181f,   0.0556494760266174f},{ -0.0696337075690255f,  -0.0028620816609423f,  -0.0238824314983420f},{ -0.0497361916955754f,  -0.0490510919635330f,   0.0206427323756962f},{ -0.0692652175042358f,   0.0769463512277844f,  -0.0360976827227381f},{ -0.0125126040434285f,   0.0090668811154786f,   0.0219995378950511f},
   {  0.0564288589705080f,   0.0017797964814474f,   0.0191345424314677f},{  0.0452129084023021f,   0.0147084059296518f,   0.0684172716784016f},{  0.0181543546588343f,   0.0047938695636882f,  -0.0681417329887145f},{ -0.0509813641347492f,  -0.0504613398447690f,  -0.0145610256729510f},{  0.0012281826411950f,   0.0096058985430283f,  -0.0350360961424627f},
   {  0.0064083679535458f,  -0.0075109795180365f,   0.0410038158332783f},{  0.0090488172074913f,  -0.0226356841192080f,  -0.0098019209504547f},{ -0.1099499080374746F,  -0.0201168438129262f,  -0.0074857026574642f},
   {  0.0031940913517856f,   0.0472181673799299f,   0.0098871162641154f},{  0.0051979814771569f,   0.0600601295742197f,   0.0084257740920355f},{ -0.0209677356370482f,   0.0166920350402264f,  -0.0479995003475145f},{  0.0192090165171111f,  -0.0191594368544644f,   0.1150580945896425f},{ -0.0027007083847786f,  -0.0618877436179534f,   0.0376678869051826f},
   {  0.0492077562640664f,   0.0292387144152658f,  -0.0761083402206367f},{ -0.0031111859347932f,   0.0771024214623186f,   0.0037711526426037f},{  0.0027467999361367f,   0.0686943026384187f,   0.0034645921747192f},{ -0.0599639938181794f,   0.0213873375903542f,  -0.0006397347346610f},{ -0.0367352587618907f,   0.0084470354379664f,   0.0109817284780858f},
   {  0.0331601609847048f,  -0.0748917314359693f,  -0.0897066999169671f},{  0.0089844276128362f,  -0.0130692917426289f,  -0.0120777117150375f},{  0.0474619026599559f,   0.0740752083263480f,   0.0398201917179257f},{ -0.0287736318071439f,  -0.0731060535179259f,  -0.0008454074003589f},{  0.0020167395206730f,  -0.0466609987491944f,  -0.0326637216719060f},
   { -0.0541268294216573f,  -0.0297010133744120f,   0.0195517372190143f},{  0.0352672021033708f,  -0.0493536179016954f,   0.0462110456730725f},{ -0.0349572035116543f,  -0.0117260065932945f,   0.0206120851059912f},{ -0.0228566299357240f,  -0.0363502321659369f,  -0.0248009670134151f},{ -0.0401333505748203f,  -0.0086358682575340f,  -0.0287332444074219f},
   { -0.0059558171733915f,  -0.0823033228807301f,  -0.0266232551060174f},{ -0.0541421731385668f,  -0.0363896116943558f,  -0.0246064588915353f},{ -0.1212454219080515f,   0.0179530471755963f,  -0.0510895660230616f},{ -0.0280852775630640f,   0.0447339500162056f,   0.0295157092479543f},{  0.0074754712690352f,   0.0191225241817371f,   0.0090335845932941f},
   { -0.0425659506288545f,   0.0803064524019795f,   0.0145637636880315f},{ -0.0845728535775337f,   0.0593141644593937f,   0.0155013849228131f},{  0.0267548072405106f,   0.0499724885191442f,  -0.0066300001040517f},{ -0.0570699108890313f,  -0.0363767604309522f,  -0.0242332112365523f},{ -0.0402430870964635f,  -0.0236273436247595f,  -0.0420813942870025f},
   { -0.0630055370398069f,  -0.0228764910992391f,  -0.0053809641996493f},{  0.1104186372169285f,  -0.0064654551979437f,   0.0084146926452849f},{ -0.0341311822244408f,  -0.0254308168603319f,   0.0377214822310597f},{ -0.0359590474853799f,  -0.0166965684167105f,  -0.0080844469268970f},{  0.0671926284369326f,  -0.0180153583773580f,  -0.0126045704488511f},
   {  0.0099343573939152f,  -0.0219772847260799f,   0.0694075551502473f},{ -0.0381545051763172f,   0.0079621030679106f,  -0.0482401302381718f},{ -0.0019953052332809f,  -0.0241080178427587f,   0.0109293763586530f},{ -0.0276214745796946f,   0.0710019664331236f,  -0.0094225679840608f},{ -0.0288027383213094f,  -0.0119211691424946f,   0.0206281911088642f},
   {  0.0294671946637703f,   0.0239728720489354f,   0.0231930769828544f},{  0.0576269178046556f,  -0.0237374341195775f,   0.0546669654202644f},{  0.0068951358544863f,   0.0076242335121822f,  -0.0442017174696332f},{ -0.0187086750846339f,  -0.0209695144009757f,  -0.0020703870897914f},{  0.0073152330791544f,   0.0276904898097287f,  -0.0244815291124718f},
   { -0.0037343543928644f,  -0.0225162824672875f,   0.0470312417441182f},{ -0.0039960902145733f,  -0.0028493907273505f,  -0.0444874950296202f},{ -0.0703581697153168F,   0.0114619019939302f,   0.0126600014137163f},
   { -0.0072891544516116f,   0.0377661726840924f,   0.0406959308513381f},{ -0.0073824516150087f,   0.0428871314881472f,   0.0624558785472609f},{ -0.0745880236538673f,   0.0147079872226728f,  -0.0369839607403353f},{  0.0308997516233839f,   0.0626880892490074f,   0.0774253483016981f},{  0.0017655627077236f,  -0.0788882951067505f,   0.1056624248061782f},
   {  0.1189428491060110f,  -0.0201058271726256f,   0.0234817446158226f},{ -0.0409654236520050f,   0.0534642695452658f,   0.0004605909591660f},{ -0.0085103358978015f,   0.0313259485523278f,   0.0033928603880597f},{ -0.1021250788225500f,   0.0115376798056619f,  -0.0221346673435679f},{ -0.0208957641993164f,  -0.0483104620270358f,   0.0321096336570623f},
   {  0.0752739941517382f,   0.0146117003356738f,  -0.0133194747309211f},{  0.0542374046831036f,   0.0170219772078760f,  -0.0005773691790167f},{  0.0343792258356138f,   0.1023760092457483f,  -0.0853095285652505f},{ -0.0390199876978266f,   0.0193486110137664f,  -0.0271477475141675f},{  0.0003474175466438f,  -0.0094934979504274f,  -0.0150901813671964f},
   { -0.0921301779024351f,   0.0572310062299820f,  -0.0325881697715603f},{  0.0296224717157926f,  -0.0959396211131864f,   0.0954875902922897f},{ -0.0304932669781591f,   0.0777034403214808f,  -0.0076282913744648f},{ -0.0497647096514087f,   0.1295916534813480f,  -0.0687835137290937f},{  0.0196549055558653f,  -0.1350559686995031f,  -0.0485785764492284f},
   { -0.0454740846671606f,  -0.0033109726254425f,  -0.1340977645470788f},{  0.0499629553621788f,   0.0626085594497200f,   0.0504622994496707f},{  0.0071706144376055f,  -0.0482475319122313f,   0.0226291718723110f},{  0.0780282897878563f,   0.0140021045286916f,  -0.0132817433390802f},{  0.0198717945325553f,  -0.0681804625640905f,   0.0894855237223103f},
   {  0.0968399498628476f,  -0.1373865069577989f,  -0.0192592445524499f},{  0.0235071055427848f,  -0.0524031118337839f,  -0.0023771091931396f},{ -0.0213741311864019f,   0.1162431670966803f,  -0.0460593259370947f},{ -0.0146789367158264f,  -0.0634996918635462f,  -0.0346544692367326f},{  0.0451729450157684f,   0.1267080908901061f,   0.1027055637237832f},
   {  0.1635464967583639f,   0.1189958091711139f,   0.0478126537394309f},{  0.0057202072194912f,  -0.0314716535177545f,  -0.0493211554444510f},{  0.0661494607939035f,   0.0081302469270854f,  -0.0518004541581474f},{  0.0094688206139080f,  -0.0122232069302517f,  -0.0210624911698642f},{ -0.1338081895313850f,  -0.0407383616650884f,  -0.0980316452756769f},
   { -0.1244528300948478f,  -0.0659862627512756f,  -0.2270718880287352f},{ -0.0762970913402120f,   0.0022070052779962f,  -0.0452899048740733f},{ -0.0119159848232360f,   0.0037511863701642f,  -0.0697461735477476f},{  0.0861171067080835f,  -0.0059579404765852f,   0.0268573246769396f},{  0.0121500235718885f,  -0.0195069122247931f,  -0.0739608184835021f},
   { -0.0880737263270730f,  -0.0502868551802186f,  -0.0362946093252738f},{ -0.0755323245199866f,   0.0511958919872517f,   0.0251246445802481f},{  0.0408448140453165f,  -0.0223002116891024f,  -0.0186839938952918f},{ -0.0042493428359870f,  -0.0484659596148205f,  -0.0352795774694077f},{ -0.0402832907733790f,  -0.0655650685736731f,  -0.0071724213047557f},
   {  0.1105379047783633f,   0.0399586915530209f,  -0.0626038697519803f},{ -0.0339220870156467f,  -0.0068584292850835f,  -0.0038068627806474f},{ -0.0567499573394510F,  -0.0889037063033406f,  -0.0350875181570829f},
   { -0.0002338744232407f,   0.0477830787495300f,   0.0264825083235392f},{ -0.0028979600648620f,   0.0555888525235341f,   0.0351164914530643f},{  0.0592717322717066f,   0.0244562538974874f,  -0.0449863212629722f},{ -0.0146260783525855f,   0.0153347951619882f,   0.1092517811785933f},{ -0.0010810079818553f,  -0.1051996718718909f,   0.0938957819825823f},
   { -0.1029569341144169f,   0.0090271258465699f,  -0.0303643824481330f},{  0.0341396671886310f,   0.0768796912493911f,   0.0047574924947987f},{  0.0216494091058578f,   0.0581804288807327f,  -0.0016581877525681f},{ -0.0819296600610914f,   0.0331005622679776f,  -0.0035690846182653f},{ -0.0653625158570194f,  -0.0212176851586409f,   0.0502965882959522f},
   { -0.0973026155961562f,  -0.0481448188821545f,  -0.0821571674151325f},{ -0.0442920068456384f,  -0.0196160185475946f,  -0.0098937568590662f},{ -0.0603999984888645f,   0.1127260568758032f,  -0.0082374536243588f},{  0.0507439070217022f,  -0.0241268069533673f,  -0.0286973709613321f},{  0.0205675283167433f,  -0.0009555764585649f,  -0.0757985112940310f},
   {  0.0469358138086262f,  -0.0095856010515719f,   0.0417820762493884f},{  0.0935183194550070f,   0.1287305518906474f,  -0.0697541823980044f},{  0.0247054681925970f,   0.0167631934361739f,   0.0153100431833171f},{  0.0478843415436640f,   0.0096853873069144f,  -0.0891948696216330f},{ -0.0103505892163602f,   0.0407446667166759f,   0.0709656333897130f},
   {  0.0261778241621540f,   0.1045637108939004f,   0.0023338706650589f},{ -0.0154379563340663f,   0.0225153726790303f,   0.0361743478081439f},{  0.0575007435022657f,   0.0088632017497284f,  -0.0248674720936062f},{ -0.0334952933231061f,   0.0162957092927807f,   0.0065545645519079f},{ -0.0107963889389552f,  -0.0491566160648205f,   0.0214202605260215f},
   { -0.0421951531725050f,  -0.0754449414542447f,  -0.0494392575689500f},{ -0.0359908610953503f,  -0.0218897915622417f,  -0.0415951898669572f},{ -0.0052161250365995f,  -0.1095641032707647f,   0.0548391609937938f},{ -0.0077902875489779f,   0.0293606957112799f,   0.0254630534259796f},{ -0.0272558106430633f,   0.0476617511081996f,  -0.0051507624099087f},
   { -0.0677172654986869f,   0.0146397064205907f,   0.0602253388469452f},{  0.0004167005665078f,   0.0200224167522986f,   0.0211597069563096f},{ -0.0455312024317270f,  -0.0081752691387599f,  -0.0134793868361582f},{ -0.0162727621645479f,  -0.0100068421901159f,   0.0400886868397553f},{ -0.0760110847556120f,  -0.0281315326060067f,   0.0346095536371047f},
   { -0.0558364760724025f,  -0.0097060888339792f,   0.0423784341307016f},{ -0.0678694769481581f,  -0.0073410808378566f,   0.0745216387858774f},{ -0.0033007747685974f,  -0.0099697267649412f,   0.0187391643699090f},{  0.0794723376080851f,  -0.0282563229265200f,   0.0164059455753619f},{ -0.0102429635804165f,  -0.0136120730760395f,  -0.0586618770584861f},
   {  0.0142228406598263f,  -0.0595019594249416f,  -0.0483483433198807f},{ -0.0102852873367202f,   0.0067175855767684f,  -0.0507673910090625f},{  0.0500352938391581f,   0.0594643613112683f,   0.0243493287491898f},{ -0.0524004679998286f,   0.0660323429784909f,   0.0147420682878564f},{ -0.0074765878722673f,   0.0061216033331993f,   0.0342866055759726f},
   { -0.0261796629703037f,  -0.0274573368335312f,  -0.0340215878959719f},{ -0.0076810705090066f,   0.0056662918524497f,   0.0118721219050059f},{ -0.0141050918408915F,   0.0810093181576122f,  -0.0384179347321865f},
   {  0.0072318619068643f,   0.0380281743362038f,   0.0420323869913043f},{  0.0070910866366203f,   0.0427274890943617f,   0.0632901066904863f},{  0.0745419087548581f,   0.0149767963735054f,  -0.0362085564914327f},{ -0.0286023791919133f,   0.0639375938176446f,   0.0775298066567121f},{ -0.0031767456661639f,  -0.0798204915584004f,   0.1044289370756623f},
   { -0.1144126901379025f,  -0.0176777864399437f,   0.0264084621052259f},{  0.0391257411923821f,   0.0564065658903272f,   0.0001319205047937f},{  0.0239828310201024f,   0.0315049244425154f,   0.0005459610158260f},{ -0.0731759250921698f,   0.0275927156850240f,  -0.0121342418634234f},{ -0.0625683388072428f,  -0.0405570056635484f,   0.0407155244995047f},
   { -0.0895417585676189f,   0.0120203064264788f,  -0.0149265482181435f},{ -0.0495745257334506f,   0.0177912353727653f,  -0.0131992760820023f},{ -0.0431799546112281f,   0.0991775048759296f,  -0.0576360708079993f},{  0.0433707857821036f,   0.0136200597768601f,  -0.0441270451861812f},{  0.0184483449731236f,   0.0261630588844930f,  -0.0423295925993640f},
   {  0.0612080826473275f,  -0.0071443202648252f,   0.0186517705912710f},{  0.0760816589335527f,   0.1320310680828817f,  -0.1076962752858981f},{  0.0124284614850036f,   0.0452297254167527f,   0.0120525603992118f},{  0.0451590101275337f,   0.0653965537388701f,  -0.1055044343652101f},{ -0.0199805548352783f,   0.0177277178775374f,   0.1084639948125945f},
   {  0.0542772928226229f,   0.1454077651173998f,  -0.0032398741272901f},{ -0.0436820252372601f,   0.0734772523184824f,   0.0696383990181648f},{  0.0018687793488057f,  -0.0542369746617277f,   0.0092685591839456f},{ -0.0726828909362234f,   0.0310865304648606f,  -0.0251630823114146f},{ -0.0137436655477695f,  -0.0714296123533475f,   0.0668648450437534f},
   { -0.1039376609898300f,  -0.1392647143813716f,  -0.0131974134878136f},{  0.0028401410191836f,  -0.0655361311671776f,  -0.0329272489211426f},{ -0.0204996230961666f,  -0.1107905900550009f,   0.0587178366409386f},{  0.0054540224889259f,  -0.0047032329092327f,  -0.0081174681237150f},{ -0.0328915474300493f,   0.1392440426022039f,   0.0751543008838969f},
   { -0.1358259520180191f,   0.1080145616996747f,   0.0414289435618231f},{ -0.0170323893124406f,   0.0244319785559515f,   0.0598976432671625f},{ -0.0382077794328316f,  -0.0049744238050825f,  -0.0778546217585980f},{ -0.0487572590560905f,   0.0340522516327191f,   0.0305544590988392f},{ -0.0936430520858568f,   0.0464744025950776f,   0.1756932477097411f},
   { -0.0698710515914545f,   0.0247603673235908f,   0.0048983553938087f},{ -0.1490702632099040f,   0.0534877630189792f,   0.1669468916152796f},{ -0.0335698531425653f,  -0.0011544070497714f,  -0.0387857838455232f},{  0.0997228002273908f,  -0.0097551605772643f,  -0.0350554412230025f},{  0.0021552353027379f,  -0.0358253389847663f,  -0.1106584181781964f},
   {  0.0210214516951817f,  -0.0637672077293324f,  -0.0156829477851071f},{ -0.0381783137963392f,   0.0060601412065734f,   0.0148696709208116f},{  0.0912172873875033f,   0.0324526906756857f,   0.0232226647504242f},{ -0.0613067087811980f,   0.0817543890886418f,   0.0178032023542296f},{  0.0404491464559856f,  -0.0026835365551691f,   0.0110944153026282f},
   { -0.0869090343146748f,  -0.0302168494524963f,  -0.0712528460766780f},{  0.0028983952268550f,  -0.0191054379983969f,  -0.0159936713517207f},{ -0.1040247907553742F,   0.0903375887636896f,  -0.0013783767910323f},
   {  0.0008867246812078f,   0.0595269197431136f,   0.0136536784554389f},{  0.0006945416549485f,   0.0751094256208573f,   0.0124849072332637f},{  0.0367854378142898f,   0.0276791505895066f,  -0.0515217545761728f},{ -0.0315442225686693f,  -0.0259535382285123f,   0.1325987692372705f},{  0.0017182293405081f,  -0.0957960689092224f,   0.0658520080724395f},
   { -0.0581144360041807f,   0.0381111154239837f,  -0.0773923016620426f},{  0.0197690401669139f,   0.0940342377347426f,   0.0119092968207895f},{  0.0271381186067294f,   0.0933729088990401f,   0.0020810386409912f},{ -0.0701736653349401f,   0.0185742857916011f,  -0.0035008879652749f},{ -0.0251132865118534f,  -0.0059055942425054f,   0.0374756084749565f},
   { -0.0972029963714078f,  -0.0888059032743688f,  -0.1148466194900185f},{ -0.0087733746978398f,  -0.0263054308135425f,  -0.0237346786314496f},{ -0.0793994424830267f,   0.0981610655200433f,   0.0439779906406869f},{  0.0494474288975967f,  -0.0832058507187807f,  -0.0151786609755388f},{ -0.0049016932855441f,  -0.0378912692524846f,  -0.0780479134904957f},
   {  0.0386931626773657f,  -0.0670101344780364f,   0.0542799808875645f},{  0.1064139549341596f,   0.0841081013321545f,  -0.0281158114804809f},{  0.0387177760731277f,  -0.0529251343759941f,   0.0188800114399104f},{  0.0505723787577292f,  -0.0701767939093913f,  -0.0772454993426346f},{  0.0249844160885574f,   0.0997007888423936f,   0.0359997725782467f},
   { -0.0427159641312541f,   0.0162747474815144f,   0.0255501288492314f},{  0.0726938170893430f,  -0.0475329395725732f,  -0.0279234621762337f},{  0.2287080037064750f,   0.0625757084820888f,  -0.0651480503139089f},{  0.0310674544897044f,   0.0515091227438228f,   0.0248126399476588f},{ -0.0328243629606108f,  -0.0078656514456886f,  -0.0078885405294634f},
   {  0.1203912031169926f,   0.1241173120053986f,  -0.0325031780237965f},{ -0.1260938996621044f,   0.0122503718354676f,   0.0012963406886112f},{  0.0016763254827270f,  -0.0821450913072608f,   0.0263658888040550f},{ -0.0955469692525321f,   0.0522595070253757f,   0.0673230310658275f},{ -0.0206597965082238f,  -0.0009646627824806f,  -0.0545383792076916f},
   {  0.0548267954131182f,  -0.0391480764001614f,   0.0110822531409612f},{  0.2344671304080339f,   0.0097963366256656f,  -0.0517671686567083f},{  0.0356883049253349f,  -0.0253583209393647f,   0.0260370562819716f},{  0.0238820438469978f,  -0.0200183930492728f,   0.0106739996799265f},{ -0.0072210715116375f,  -0.0001622181558672f,  -0.0474882056030551f},
   {  0.0269168191430019f,  -0.0398753805046985f,   0.0664954812260894f},{  0.0510031229861016f,  -0.0418963361576869f,  -0.0447254784345350f},{  0.0894096648961871f,  -0.0018599693393641f,  -0.0083658048625973f},{ -0.0353963131113645f,  -0.0811978032958023f,   0.0382592930088017f},{ -0.0272444719562365f,  -0.0075478410067044f,   0.0194931177593296f},
   { -0.0478569153301711f,  -0.0072427702482432f,  -0.0409705705383153f},{  0.0081416012477181f,   0.0199760198974213f,  -0.0444891398909677f},{ -0.0495648726598810f,  -0.0015372101302967f,   0.0578993905937244f},{ -0.0050001074197059f,   0.0403651218534253f,   0.0333875712331477f},{ -0.0321470364915257f,  -0.0086023297202365f,  -0.0121328753106285f},
   {  0.0437462156198627f,  -0.0090910143224698f,   0.0307652695218146f},{ -0.0227287368167684f,   0.0355548043362305f,  -0.0237082030617954f},{ -0.0927338036097299F,   0.0117325046766907f,   0.0192046982671454f},
   { -0.0031599082844977f,   0.0479913971962836f,   0.0110176591225643f},{ -0.0050125439981310f,   0.0612333587321933f,   0.0087670922540262f},{  0.0229350403296090f,   0.0169720524517307f,  -0.0490169167917456f},{ -0.0210168126300856f,  -0.0169842569038385f,   0.1183825029626016f},{  0.0013006890955055f,  -0.0640672723368616f,   0.0401979257124132f},
   { -0.0444511434697884f,   0.0338076583327731f,  -0.0779309158894508f},{  0.0042902978572686f,   0.0778075135522852f,   0.0094610653865329f},{  0.0112742361651900f,   0.0732593102919950f,   0.0042993379726581f},{ -0.0663260903774332f,   0.0065411138128944f,   0.0021939555412150f},{ -0.0227349213984099f,  -0.0009882548355524f,   0.0186035147363883f},
   { -0.0498994221945073f,  -0.0751353920049394f,  -0.1031993386090761f},{ -0.0015115551359549f,  -0.0105979027243688f,  -0.0178253445677802f},{ -0.0551308142954669f,   0.0732544112486492f,   0.0526339139011316f},{  0.0363502811683501f,  -0.0723362964430168f,  -0.0168818244005498f},{  0.0087561711320006f,  -0.0289738615542456f,  -0.0513221527657649f},
   {  0.0314008735412941f,  -0.0568022444182608f,   0.0383153750007095f},{  0.0640588837862679f,   0.0458908494123629f,  -0.0069094405660828f},{  0.0255207427774508f,  -0.0294069842592372f,   0.0212187544283132f},{  0.0318003916627423f,  -0.0681155441924454f,  -0.0539594436357858f},{  0.0075238945202081f,   0.0810958617459678f,   0.0280815133972301f},
   { -0.0355618558871611f,  -0.0064607495880950f,   0.0184973614109777f},{  0.0567461835708414f,  -0.0350379296410585f,  -0.0247889354649387f},{  0.1416385360651921f,   0.0241454721573312f,  -0.0624031504483634f},{  0.0230490722012275f,   0.0546420803506459f,   0.0414656308370587f},{ -0.0216029072981868f,   0.0047239473878423f,  -0.0051987719793032f},
   {  0.0821245301062097f,   0.1028945082432383f,   0.0266450814976847f},{ -0.0788846470087306f,  -0.0003486344867038f,   0.0038026660932613f},{  0.0310471476799930f,  -0.0468993893026174f,   0.0063966451784919f},{ -0.0533483056780643f,   0.0209851009177451f,   0.0456307100721438f},{ -0.0046714377661940f,  -0.0085555204863839f,  -0.0426701122658338f},
   {  0.0566791420101787f,  -0.0470165942098223f,  -0.0008259195165412f},{  0.1509774909500158f,   0.0204333469356891f,  -0.0229722205848472f},{  0.0375779379976994f,  -0.0346813360949738f,   0.0380805578367929f},{  0.0273700675779104f,   0.0096922206909033f,  -0.0103260663101656f},{  0.0002802643464650f,   0.0115856774906033f,  -0.0374723263997175f},
   {  0.0294462404607030f,  -0.0275308935759481f,   0.0786723019669536f},{  0.0425287134767639f,   0.0036259372093636f,  -0.0662257303492293f},{  0.0325708424333162f,   0.0179479440973722f,  -0.0020774244791196f},{ -0.0354516986282873f,  -0.0717183372540837f,   0.0126739855661171f},{  0.0052109330875146f,  -0.0231898331348780f,   0.0120556405536684f},
   { -0.0110667410420063f,   0.0288663407714176f,  -0.0261106806800287f},{ -0.0135223126801613f,   0.0037879907873511f,  -0.0203265985259632f},{ -0.0408612328227751f,  -0.0131578386542557f,   0.0408077573567606f},{  0.0130259952929841f,   0.0046191187901208f,   0.0304080066133118f},{ -0.0239222859097932f,  -0.0034086692992290f,  -0.0170780341838636f},
   {  0.0336145720782929f,  -0.0079110531463857f,   0.0401396908542071f},{  0.0006752967653438f,   0.0341246365738409f,  -0.0492605105918529f},{ -0.0635303510602547F,   0.0013706919222133f,   0.0314071013355326f},
   { -0.0160508275029825f,   0.0218171221714703f,   0.0516067806200568f},{ -0.0186279345412969f,   0.0554056943396768f,   0.0792766281417487f},{ -0.0699164180819984f,   0.0371820689663254f,  -0.0347996244201900f},{  0.0530564336191302f,   0.0627384067013498f,   0.0503117254671312f},{  0.0171857138456477f,  -0.1094051125524691f,   0.0864447010416425f},
   {  0.0769011363918665f,   0.0069522638009285f,   0.0413915546425317f},{ -0.0159136461093838f,   0.1038138705503230f,   0.0206405752118808f},{ -0.0349081149071254f,  -0.2681472279285009f,   0.0550904224034249f},{ -0.1118271617725961f,  -0.0812118750521557f,  -0.0056749881085930f},{ -0.0251968761196157f,   0.1104183466184513f,  -0.0031553012373070f},
   {  0.0345567691451944f,  -0.0008447972085786f,   0.0000389351562991f},{  0.0129482379967882f,   0.0210736814275292f,   0.0012758859181420f},{  0.1226392806837397f,  -0.0505692580949529f,  -0.0686891247836862f},{  0.0000906172371413f,  -0.0926884558668754f,  -0.0290826481714146f},{ -0.0269936610612532f,  -0.0069337226767692f,   0.0515735549059657f},
   {  0.0409777737759186f,   0.0433405368811775f,  -0.0712743572554165f},{  0.0975538958483924f,  -0.0758809538186329f,   0.0432401014770122f},{  0.0215465850711391f,   0.0086380203137245f,  -0.0303067442230260f},{  0.0070052054493856f,   0.0707039942036985f,   0.0674439420448565f},{  0.0357928020726773f,  -0.0561721900499250f,  -0.0443727757989732f},
   { -0.0215061659224267f,  -0.0178825048122368f,  -0.0252655778258059f},{  0.0450199112589895f,   0.0021331136919672f,  -0.0385847108289444f},{  0.1112538318319367f,   0.0091969838934499f,   0.0352803583755754f},{ -0.0597967693317665f,  -0.0201512090251501f,  -0.0234912106434948f},{ -0.0897364165444678f,   0.0149931995511264f,  -0.0139330187529057f},
   {  0.0254483871143805f,  -0.0117519232955337f,  -0.0151772179902834f},{  0.0025497925663768f,  -0.0243328896543897f,   0.0141283004663419f},{  0.0439018335419077f,   0.0221078312431156f,  -0.0038207180230135f},{  0.0518084337409104f,  -0.0200843830229367f,   0.0093908954724547f},{  0.0566936137848176f,  -0.0060786987788948f,   0.0754234728203179f},
   { -0.0790721562390786f,  -0.0146108661460200f,  -0.0170060636886797f},{ -0.1227571554010951f,   0.0040393546833056f,  -0.0528743133315737f},{  0.0045939295290867f,   0.0295034924505480f,   0.0125310696043460f},{  0.0177549609229274f,  -0.0390020578875008f,  -0.0065822891268883f},{  0.0432861903543104f,  -0.0259552420312531f,   0.0112594681974026f},
   {  0.0528102631756007f,  -0.0093967344029921f,   0.0040787954455648f},{  0.0056129184854365f,  -0.0205407259023315f,  -0.0126833468196856f},{  0.0029694505261085f,  -0.0082560542387571f,   0.0593573440369719f},{  0.0690459794246282f,  -0.0315059506835512f,  -0.0131036351454444f},{ -0.0188234211830830f,   0.0037725673260404f,  -0.0155042107835053f},
   {  0.0635951894591218f,  -0.0287245086397245f,   0.0910611454962964f},{  0.0393167928471373f,  -0.0169593191235316f,   0.0690107499866078f},{  0.0562371846286835f,   0.0135286637894807f,   0.0466082462477917f},{ -0.0722307788118565f,   0.0133773039522155f,  -0.0496856349476558f},{ -0.0355335221990830f,  -0.0156758136545967f,  -0.0131918886982214f},
   {  0.0095138927149181f,   0.0200546884026650f,  -0.0836953413616572f},{ -0.0775208842951377f,   0.0157172156244699f,   0.0606663211651929f},{  0.0066845241227022F,   0.0361893328578447f,   0.0623575453465031f},
   { -0.0174911179596166f,   0.0303066112518632f,   0.0593337578160191f},{ -0.0251209113148264f,   0.0277752183000911f,   0.0872721582211727f},{ -0.0718510832848550f,   0.0126112415729453f,  -0.0212977319260082f},{  0.0573018402379849f,   0.0914858917837846f,   0.0245306867621503f},{  0.0219497987056946f,  -0.0507101207977471f,   0.0615401997366521f},
   {  0.0699470708857796f,   0.0004928931085089f,   0.0622718852754280f},{ -0.0255316261526047f,   0.0240696361498261f,   0.0215966279264241f},{ -0.0111632687257844f,   0.0035768241846419f,   0.0684895904930920f},{ -0.1034742694918895f,   0.0027329792924634f,  -0.0028263739228485f},{ -0.0403319448325435f,  -0.0344198858826969f,  -0.0080922439762409f},
   {  0.0331507513911360f,   0.0694211381473788f,   0.0085258405180727f},{  0.0144311459963979f,   0.0230808725946835f,  -0.0064585394722911f},{  0.1238540407315107f,  -0.0167944739550033f,  -0.0769738299680281f},{  0.0149095488215217f,   0.0681253871762244f,  -0.0284037116252518f},{ -0.0223763037052479f,   0.0085527908132248f,   0.0535156220098870f},
   {  0.0367765341909417f,   0.0459501065834568f,  -0.0733560786424496f},{  0.0981237683632994f,  -0.0677740992395419f,   0.0365879883722335f},{  0.0307806611588402f,   0.1330051353108711f,   0.0139878001331016f},{ -0.0048618132208696f,   0.0094124785415737f,   0.0951999950874920f},{  0.0352373650556336f,  -0.0942624420490355f,  -0.0733387466383647f},
   { -0.0187018710890447f,   0.0273129007996388f,   0.0064066641700898f},{  0.0559734984446098f,   0.0560314751897055f,  -0.0293311917396126f},{  0.1168430368608942f,  -0.0006782964994042f,   0.0573300207515951f},{ -0.0640775308844421f,  -0.0163034665763832f,  -0.0533137748231141f},{ -0.0700136968115987f,   0.1862253197982861f,   0.0418030340652166f},
   {  0.0299953448087473f,   0.0757523906611399f,  -0.0042694575170056f},{  0.0118076698027032f,  -0.0066838353161117f,   0.0195278083141503f},{  0.0464308354025539f,   0.0211876434247662f,   0.0073515517618325f},{  0.0584161153124208f,   0.0257857652860708f,   0.0547158830894775f},{  0.0306168652314717f,  -0.0743599972059989f,  -0.0090752505184021f},
   { -0.0856631391841936f,  -0.0239991495796857f,  -0.0834954907978779f},{ -0.1219600738163860f,   0.0252861799275742f,  -0.0612496775913531f},{ -0.0044438073320106f,   0.0166464363078745f,  -0.0173155668793057f},{  0.0183047619192908f,  -0.0345862854473915f,  -0.0034926004868256f},{  0.0527952452108251f,  -0.0230901368589842f,   0.0128034749710650f},
   {  0.0536801430764183f,  -0.0256829712147463f,   0.0659504245729347f},{  0.0229326776257669f,  -0.0227818423249111f,  -0.0429176937006111f},{  0.0119292391613637f,  -0.0721101467062443f,  -0.0492806800057607f},{  0.0597947644886946f,  -0.0444968125373749f,  -0.0208502782018304f},{ -0.0188450121584436f,   0.0259441655864036f,  -0.0442947851035413f},
   {  0.0684361322051132f,  -0.0447005735227783f,  -0.0878089896377948f},{  0.0347178643476336f,  -0.0196193587643984f,   0.1030965770187204f},{  0.0423505177238314f,   0.0181471832120697f,  -0.0305204429803468f},{ -0.0722970244605844f,   0.0064600735684278f,  -0.0129011324811361f},{ -0.0212389590257151f,  -0.0063574149100658f,  -0.0777916469427278f},
   { -0.0116822877041412f,   0.0122355244778436f,   0.0148998893351356f},{ -0.0421933456275930f,   0.0087446757906019f,  -0.0108384516648266f},{ -0.0076765992736986F,   0.0442831920533584f,   0.0359933956923716f},
   { -0.0199776612251685f,   0.0276932558974699f,   0.0558534586606893f},{ -0.0259894541503775f,   0.0300507295579966f,   0.0848401635490966f},{ -0.0802692460796159f,   0.0118173853692620f,  -0.0376962734562259f},{  0.0643366606669247f,   0.0931540575471151f,   0.0505824667149167f},{  0.0189956298088913f,  -0.0601751704397087f,   0.0900042061991720f},
   {  0.0800284538844602f,  -0.0083995879988753f,   0.0596204405530692f},{ -0.0196428180079406f,   0.0364060637665745f,   0.0298639129969653f},{ -0.0212440807105537f,  -0.0216708733099696f,   0.0543286268408608f},{ -0.1096218494864359f,  -0.0086447871196154f,  -0.0139767231329610f},{ -0.0338352931595771f,  -0.0271720301966808f,  -0.0033789932780183f},
   {  0.0327667093087305f,   0.0488480234885504f,   0.0140338810566584f},{  0.0176444890034809f,   0.0220397565726071f,  -0.0161536858879265f},{  0.1266495601479429f,   0.0018144676344081f,  -0.0695468474724030f},{  0.0051861964991782f,   0.0565567450077363f,  -0.0303602099518620f},{ -0.0182399717698244f,  -0.0188424503463914f,   0.0449485078566244f},
   {  0.0290863337116818f,   0.0403702998637840f,  -0.0400258596243615f},{  0.0848732473982167f,  -0.0725418374410932f,   0.0648370050398266f},{  0.0434716537649215f,   0.1000158079862072f,   0.0287233106108439f},{  0.0048238122559262f,   0.0332077023751774f,   0.0436946105209974f},{  0.0368470218453157f,  -0.0940522677861894f,  -0.0438323274399021f},
   { -0.0178297923863104f,   0.0182276153227790f,  -0.0491387174021107f},{  0.0670523267798072f,   0.0326879364145005f,  -0.0035231563505477f},{  0.1369927691924627f,  -0.0279595817275754f,   0.0887774633170665f},{ -0.0577184184005901f,   0.0033885326296742f,  -0.0588405832329995f},{ -0.0713791008331468f,   0.0907615581514079f,  -0.0022830479034830f},
   {  0.0233853134765200f,  -0.0024963286221654f,   0.0097567757505427f},{  0.0233779593008566f,  -0.0290847838511196f,   0.0273672453517392f},{  0.0535739651118286f,   0.0327347112931483f,   0.0115513544091351f},{  0.0589847834999825f,  -0.0077901049670718f,   0.0317861416857728f},{  0.0557637872263467f,   0.0192384575395451f,   0.1098344130190947f},
   { -0.0605960381583013f,   0.0347343401727676f,  -0.0837795706574739f},{ -0.1236716375620395f,   0.0037927886142619f,  -0.1110222726620346f},{ -0.0006327824539284f,   0.0265137611971999f,  -0.0575474108303682f},{  0.0031012219991652f,  -0.0233614662627516f,  -0.0351922339094199f},{  0.0408161696065269f,  -0.0306901183946644f,   0.0598130585750875f},
   {  0.0347827666494689f,  -0.0705399481471920f,  -0.0155518848859989f},{ -0.0152424885028631f,   0.0150977529380792f,  -0.0591519861136218f},{ -0.0258268949261131f,   0.0176063110820296f,  -0.0730443265771057f},{  0.0439823490941461f,  -0.0371725649103885f,  -0.0242540490755312f},{  0.0089835845886577f,   0.0362516956276614f,  -0.0169691570384045f},
   {  0.0778145942313597f,   0.0153513891460192f,   0.0733795186600475f},{  0.0690695203990439f,  -0.0443839863515597f,   0.1952419806392642f},{  0.0816031789712445f,   0.0148061629866444f,   0.1079902485840940f},{ -0.0600129210475705f,  -0.0117455531137311f,  -0.0414373307741551f},{ -0.0664914296325378f,  -0.0124336431118780f,  -0.0991712740920814f},
   {  0.0179653678050608f,  -0.0138862468711620f,  -0.0547868144596352f},{ -0.0621202138261764f,   0.0376417782856488f,  -0.0157422266405183f},{ -0.0020594149735299F,   0.0496043278474223f,   0.0691155789001180f},
   { -0.0083447282038931f,   0.0177308460166126f,   0.0530768527289114f},{ -0.0207550698127924f,   0.0480864683189530f,   0.0801229137912069f},{ -0.0347768300686185f,   0.0251871195860847f,  -0.0271971831438930f},{  0.0135768618322786f,   0.0550814901825802f,   0.0342496232468452f},{ -0.0033575747418243f,  -0.0877237451458153f,   0.0475342356585592f},
   {  0.0799903376351124f,   0.0015920960932543f,   0.0341728883054766f},{ -0.0241491147572473f,   0.0961571243518733f,   0.0119884459969319f},{  0.0356398319451742f,  -0.2489071709567304f,   0.0642101988197554f},{ -0.0926562851210762f,  -0.0773666261175691f,   0.0216415184236412f},{ -0.0532464832185223f,   0.1085044004239146f,  -0.0188847814386129f},
   {  0.0339591025032020f,  -0.0144161377298962f,  -0.0055453151337486f},{ -0.0018217678999155f,   0.0229807496811876f,   0.0027135812776834f},{  0.1044560511975923f,  -0.0431750157134634f,  -0.0526258308509185f},{  0.0254127059155518f,  -0.1032223110044469f,  -0.0286186044748866f},{ -0.0200503256890013f,   0.0169661775223104f,   0.0557807732547141f},
   {  0.0146117706215704f,   0.0254327578833859f,  -0.0937793654778337f},{  0.0770017434189375f,  -0.0646198503644332f,  -0.0133930983762554f},{  0.0385410799597037f,  -0.0128267924964764f,  -0.0674142644485285f},{ -0.0224961222180902f,   0.0454223444128505f,   0.1071890538697042f},{ -0.0047172153724745f,  -0.0318210482395688f,  -0.0531244696128077f},
   {  0.0153344668845180f,  -0.0390387695494771f,   0.0019365609680762f},{  0.0305562413643212f,  -0.0040613380937376f,  -0.0580542905570156f},{  0.0524566308662015f,   0.0122234458231488f,  -0.0104697811927773f},{ -0.0709049260801185f,  -0.0258840270916835f,   0.0143975176547831f},{  0.0405693071534886f,  -0.0066769194831010f,  -0.0250016780386293f},
   { -0.0375836695110078f,   0.0552643937305476f,  -0.0083969772967251f},{ -0.0235149150508363f,   0.0131585697668845f,   0.0278963919573792f},{  0.0586588864807316f,   0.0078576005841534f,  -0.0109879832361608f},{  0.0904332085930041f,  -0.0150142969895387f,  -0.0165969271821482f},{ -0.0567936166721463f,   0.0037924481724775f,   0.0310374167493666f},
   { -0.0751724655264353f,  -0.0228340894487361f,   0.0242527400085649f},{ -0.0795891719921882f,   0.0152121645417287f,   0.0221256444153397f},{  0.0049514429922421f,  -0.0041719105723035f,   0.0689204926881015f},{  0.0506702613315711f,  -0.0361656453584933f,   0.0222593579813587f},{  0.0243792203510982f,  -0.0321879254480016f,  -0.0619837444984970f},
   {  0.0424577307211576f,  -0.0075920162622318f,   0.0501038307664896f},{  0.0917239971130183f,  -0.0127750176541896f,   0.0020018962634020f},{  0.0509334759793430f,   0.0268776184229228f,   0.1079081920498684f},{  0.0577355916761595f,  -0.0268049667248090f,  -0.0205350865659745f},{ -0.0286733387199739f,  -0.0249407710815053f,  -0.0417740724791663f},
   { -0.1221136358976691f,   0.0084883855102936f,   0.0655632031917370f},{ -0.0614802616685971f,   0.0072364628577238f,  -0.0103015767327841f},{ -0.1265276027661870f,   0.0280945536003557f,  -0.0232867314623114f},{ -0.0529709461526440f,   0.0107348443025107f,  -0.0065107046368122f},{  0.0370905952187779f,   0.0261320750572334f,   0.0351201718115327f},
   {  0.0237417519669210f,  -0.0492421171466440f,   0.0067919610444504f},{  0.0465392378620280f,   0.0151917861277389f,  -0.0153710043404532f},{ -0.0416257383302479F,   0.0362794869337113f,   0.0198404011810853f},
   { -0.0076758161303505f,   0.0167924934915152f,   0.0552284080104862f},{ -0.0109677764705121f,   0.0178371587657310f,   0.0822590192607552f},{ -0.0209787448736842f,  -0.0048203024132502f,  -0.0208124993791289f},{  0.0060781851104255f,   0.0748039816080424f,   0.0095814126313737f},{ -0.0105905731668397f,  -0.0259439391869170f,   0.0188465266995154f},
   {  0.0772130921237112f,  -0.0160581769164885f,   0.0417645081753781f},{  0.0034481725354226f,   0.0264301741732632f,   0.0156461600139363f},{ -0.0072180994276379f,  -0.0224284600913225f,   0.0431147056824798f},{ -0.0952497675377175f,  -0.0055482573186549f,   0.0044618362531681f},{ -0.0189255965088964f,  -0.0047381086007241f,  -0.0111335075238033f},
   {  0.0102995753710777f,   0.0154704059388122f,  -0.0070106683454888f},{ -0.0139527605354026f,   0.0222629049942399f,  -0.0000951133584954f},{  0.0706643502482295f,  -0.0007458091369169f,  -0.0455484209441352f},{ -0.0005167352747643f,   0.0227992635672993f,  -0.0495313545354587f},{ -0.0327579104982960f,   0.0225536166144173f,   0.0626260322022759f},
   { -0.0178014567740707f,   0.0215251108670525f,  -0.0685024085530331f},{  0.0416468649989986f,  -0.0476987384332269f,  -0.0071267674452849f},{ -0.0149127837362061f,   0.0790891594152653f,  -0.0606286688806911f},{  0.0021909322268463f,  -0.0192262903711665f,   0.1005997620618399f},{ -0.0116450630641640f,  -0.0458906733608402f,  -0.0395647200193418f},
   {  0.0219445260878123f,  -0.0073198685219763f,  -0.0070418568911321f},{ -0.0101584538386336f,   0.0388587513339261f,  -0.0315064162902505f},{  0.0214544871069198f,  -0.0063693255197627f,   0.0012471721108019f},{ -0.0602606856580889f,  -0.0112469261519212f,  -0.0051451079703275f},{  0.0100598753421974f,   0.0816646675963298f,  -0.0267860511874624f},
   { -0.0760340660053386f,   0.0843820072138820f,  -0.0005776938670260f},{ -0.0137939219633776f,   0.0175018749198925f,   0.0334965858162094f},{  0.0453096189348971f,   0.0027548022102561f,   0.0051439357350205f},{  0.0707290665120421f,  -0.0043162573609742f,  -0.0020051860924577f},{ -0.0628303578835343f,   0.0013637764283341f,   0.0189686547596033f},
   { -0.0478593162050307f,   0.0024745657895114f,  -0.0056737593273398f},{ -0.0514820894185365f,   0.0120407932560663f,   0.0105880023876139f},{  0.0282407361651759f,  -0.0442752994379193f,   0.0553100022194889f},{  0.0382729545579166f,  -0.0340480365480167f,   0.0343814669752758f},{ -0.0112608615636845f,  -0.0222594174051998f,  -0.0529052618565646f},
   {  0.0338779331019917f,  -0.0402553200178264f,   0.0680619323583533f},{  0.0894286080674730f,   0.0090144831442516f,  -0.0137687722645854f},{  0.1140032126807034f,   0.0294482154196939f,   0.0593019150026187f},{  0.0645458456598788f,  -0.0396912391513743f,  -0.0253483130024922f},{ -0.0511197021609706f,   0.0099333951848080f,  -0.0523945271836647f},
   { -0.1240686296862020f,   0.0553470715790570f,   0.0524785020030829f},{ -0.0632357594810803f,   0.0033767866458194f,  -0.0106331411295357f},{ -0.1265500111838644f,   0.0541607375106541f,  -0.0483887609745410f},{ -0.0259865125811135f,  -0.0072652079574555f,  -0.0133324066058188f},{  0.0455264270627769f,   0.0491893326578201f,   0.0439193771195764f},
   { -0.0088623071617333f,  -0.1158196659698188f,   0.0836058992459169f},{  0.0808413432196727f,   0.0624903825310210f,  -0.1126150056725579f},{ -0.0886475915952235F,   0.0378674625465611f,   0.0373342574479459f},
   { -0.0122959664920322f,   0.0182104255514657f,   0.0525384838170168f},{ -0.0184533108462704f,   0.0639109869784011f,   0.0742677038534121f},{ -0.0536411492831032f,   0.0440888737195908f,  -0.0308703380802296f},{  0.0385953249115298f,   0.0476746366589400f,   0.0486251288233813f},{  0.0105374151299823f,  -0.1240765949962797f,   0.0764249470117885f},
   {  0.0782469475046403f,   0.0102812228489859f,   0.0297892519188537f},{ -0.0191677748877319f,   0.1254647526079736f,   0.0060261762276157f},{ -0.0037663617213047f,  -0.3549226420287334f,   0.0883524522253807f},{ -0.0988601901384110f,  -0.1070673562011212f,   0.0220875035238137f},{ -0.0440799872923220f,   0.1614230854733386f,  -0.0279103585753755f},
   {  0.0332571426759829f,  -0.0247891152599950f,   0.0048488169041308f},{  0.0067851396908717f,   0.0227405484511265f,   0.0084035111086702f},{  0.1141193776276891f,  -0.0638515257269134f,  -0.0642800170225295f},{  0.0136301284786148f,  -0.1447994226928132f,  -0.0080362819974962f},{ -0.0203023747289204f,   0.0059686041868253f,   0.0500456179112358f},
   {  0.0335187659849580f,   0.0331911123091488f,  -0.0862773149111397f},{  0.0913769319975236f,  -0.0699701755941032f,   0.0105696614957811f},{  0.0277164138737082f,  -0.0349483437976353f,  -0.0572063681563210f},{  0.0004442871463364f,   0.0777949133601801f,   0.0825294290554391f},{  0.0167650168885803f,  -0.0345310167410589f,  -0.0572527092762333f},
   { -0.0037599639983094f,  -0.0415059719245511f,  -0.0007951239524441f},{  0.0392188525497860f,  -0.0155041384440979f,  -0.0547950237928235f},{  0.0840298882559431f,   0.0232370572368696f,  -0.0104863333284823f},{ -0.0679209226451004f,  -0.0293439845952935f,  -0.0010767366438067f},{ -0.0283999880509337f,  -0.0216341055217823f,   0.0015007625374817f},
   {  0.0009553848500086f,   0.0045586120003405f,  -0.0126376888095875f},{ -0.0138373065669203f,  -0.0045486980429616f,   0.0225579313542466f},{  0.0514945074272864f,   0.0147898880914646f,  -0.0155666610520891f},{  0.0685599566934210f,  -0.0089116444721722f,   0.0007199415658625f},{  0.0046632087689689f,  -0.0272241808816713f,   0.0331032824071267f},
   { -0.0960073029514449f,  -0.0347411281692521f,   0.0209457437835816f},{ -0.1067407325682192f,   0.0103745280731076f,   0.0036393043472996f},{  0.0016038923357007f,   0.0239136412483502f,   0.0610172239389289f},{  0.0412239747268669f,  -0.0291819491028429f,   0.0184417649844434f},{  0.0450431492364610f,  -0.0304215781953357f,  -0.0364555156932140f},
   {  0.0727851994555191f,   0.0139458255703767f,   0.0177582469176394f},{  0.0443812139917017f,  -0.0279845334120282f,   0.0183240869774028f},{  0.0297244210711244f,  -0.0003940005977396f,   0.1229992699536434f},{  0.0601556791509907f,  -0.0257462096689167f,  -0.0145422521726190f},{ -0.0310143699802650f,  -0.0256204427253948f,  -0.0319630588586115f},
   { -0.0421746773960066f,  -0.0289185556673411f,   0.0805887789481084f},{ -0.0042576254205996f,  -0.0116934774498432f,  -0.0086819250730574f},{ -0.0220774955656818f,   0.0078832093347890f,  -0.0034514949371693f},{ -0.0595940782145467f,   0.0229982692696701f,  -0.0274899698521843f},{ -0.0055635949328986f,  -0.0046818581191194f,   0.0404210610981811f},
   {  0.0242151111691694f,   0.0091243232744924f,  -0.0595323131654254f},{ -0.0253023900912837f,  -0.0038435035888897f,   0.0614205459395089f},{ -0.0077047879764517F,   0.0262171501361970f,   0.0412139716307010f},
   { -0.0155787129264586f,   0.0296936480152915f,   0.0605784533666668f},{ -0.0233453124611930f,   0.0260345643337518f,   0.0896205824047577f},{ -0.0616453107792816f,   0.0142170721652643f,  -0.0125248351492474f},{  0.0466334538539069f,   0.0877740918496284f,   0.0103997449958442f},{  0.0167446767678416f,  -0.0485090916805741f,   0.0448238807074346f},
   {  0.0698261779453057f,   0.0021161340027817f,   0.0646390224551754f},{ -0.0259925283001538f,   0.0176650018196893f,   0.0196825657182711f},{ -0.0070018994308499f,   0.0066924280386290f,   0.0704651222636130f},{ -0.0992801391985665f,   0.0053727068905247f,   0.0102806399966218f},{ -0.0431140580490342f,  -0.0331872545506868f,  -0.0091115121670762f},
   {  0.0287644409138803f,   0.0685353778035548f,   0.0045079209606904f},{  0.0134029687757383f,   0.0223972005053441f,  -0.0062915282984081f},{  0.1153500459501046f,  -0.0188843019674623f,  -0.0831789820813241f},{  0.0135739091357797f,   0.0676166422532893f,  -0.0283763733629838f},{ -0.0227152091555946f,   0.0249856566078519f,   0.0539200805647523f},
   {  0.0320570556358087f,   0.0439936004602046f,  -0.0881173899046960f},{  0.0986559158610604f,  -0.0614411822215076f,   0.0103882459364858f},{  0.0196784752746201f,   0.1362147270232109f,  -0.0071539283285683f},{ -0.0059562572287152f,   0.0001016202708216f,   0.1081577155964035f},{  0.0270736682841406f,  -0.0846698236104035f,  -0.0801707784548182f},
   { -0.0094844536862992f,   0.0249407677482654f,   0.0264463067112969f},{  0.0410053096187616f,   0.0610185305620311f,  -0.0423117580470086f},{  0.0948799218163048f,   0.0077953970501228f,   0.0347299705589319f},{ -0.0653039411822152f,  -0.0185984890513675f,  -0.0430133514794078f},{ -0.0509347049222306f,   0.2067606370388075f,   0.0631737681536732f},
   {  0.0126332839692892f,   0.1012936671163929f,  -0.0183344474062024f},{ -0.0002852422618206f,   0.0038905886941586f,   0.0201255070394975f},{  0.0383623642603583f,   0.0166794305912245f,  -0.0051752163051829f},{  0.0589869197369182f,   0.0332634566911599f,   0.0450206213571504f},{  0.0109434811440875f,  -0.1057603447400097f,  -0.0532925549094496f},
   { -0.0929830096706077f,  -0.0364784399214577f,  -0.0705146385193108f},{ -0.1219199728643507f,   0.0231102090000257f,  -0.0196399479645714f},{ -0.0044540517184572f,   0.0099557841890606f,   0.0063459772205928f},{  0.0392036857289653f,  -0.0384535981418174f,   0.0167803288782534f},{  0.0546407731013708f,  -0.0276541159722059f,  -0.0247946259742882f},
   {  0.0684488452336652f,  -0.0079448679505677f,   0.0919006704510536f},{  0.0445224253479251f,  -0.0331684806266208f,  -0.0362542716248269f},{  0.0527925812798153f,  -0.0867858349556118f,  -0.0158223622892505f},{  0.0601314854922435f,  -0.0484798395519529f,  -0.0191539259888192f},{ -0.0413708717856015f,   0.0252914724976879f,  -0.0602249385869732f},
   {  0.0139872726533447f,  -0.0403312146816547f,  -0.1376228709432781f},{  0.0018817083356469f,  -0.0187618646760908f,   0.0400473643709122f},{  0.0028961974090588f,   0.0157315590374068f,  -0.0810385230251974f},{ -0.0666773586039670f,   0.0108085570797639f,   0.0182722562044969f},{  0.0037046520455073f,   0.0126291196474018f,  -0.0570728775846437f},
   { -0.0107845401361008f,   0.0080817742274364f,   0.0510639621127586f},{ -0.0189959499475588f,   0.0024141339926591f,  -0.0229990205724970f},{ -0.0215020699721789F,   0.0315106150139658f,   0.0127066868522976f},
   { -0.0136733546154538f,   0.0284058350665952f,   0.0601084576838253f},{ -0.0222053053631612f,   0.0238515479675163f,   0.0904297386069777f},{ -0.0483026862356907f,   0.0072725676851067f,  -0.0101274308988489f},{  0.0317508526809250f,   0.0895881300451649f,   0.0015208065648845f},{  0.0087791071365832f,  -0.0373545788251521f,   0.0327668006403814f},
   {  0.0718993419308224f,  -0.0014148958716234f,   0.0632154550463899f},{ -0.0252528363950417f,   0.0141730687265181f,   0.0191983015632919f},{  0.0016462524776385f,   0.0161092324889699f,   0.0709238732218348f},{ -0.1034945096646110f,   0.0048358615264651f,   0.0177943971437191f},{ -0.0417164164348661f,  -0.0361492507525059f,  -0.0078717808740290f},
   {  0.0240100207693523f,   0.0669151466503898f,   0.0011337127504809f},{  0.0047780670478908f,   0.0302734665157707f,  -0.0099405259762737f},{  0.1052745941682770f,  -0.0194177989033950f,  -0.0824549044745705f},{  0.0123677063641395f,   0.0653696666336040f,  -0.0287649172738008f},{ -0.0213861403749986f,   0.0369722439582356f,   0.0564288380905680f},
   {  0.0216293827883041f,   0.0385880527163701f,  -0.0967914986053677f},{  0.0904956081321277f,  -0.0579460184122653f,  -0.0077995947359941f},{  0.0231796855228499f,   0.1326223348481192f,  -0.0148796429782776f},{ -0.0152229071377998f,  -0.0052461814978267f,   0.1115044936651217f},{  0.0146520062767796f,  -0.0801338194967847f,  -0.0792824172260388f},
   { -0.0004162747974895f,   0.0211613064012185f,   0.0313629849083187f},{  0.0354529010799896f,   0.0600908176101581f,  -0.0387834503455665f},{  0.0776577448403338f,   0.0151874790937458f,   0.0255885805196868f},{ -0.0670181192439625f,  -0.0184297743875585f,  -0.0297179229125653f},{ -0.0172202544794648f,   0.2007057708146339f,   0.0777861910210931f},
   { -0.0177680791163163f,   0.1280129437279899f,  -0.0209299201222690f},{ -0.0128220248465524f,   0.0181269207199141f,   0.0228402704356204f},{  0.0465387499871862f,   0.0151041261139021f,  -0.0091867640260631f},{  0.0721525024894967f,   0.0330798004079974f,   0.0363780563463916f},{ -0.0115238939712873f,  -0.1012521725905721f,  -0.0709333484567711f},
   { -0.0828421218141880f,  -0.0419554019123903f,  -0.0572798270676327f},{ -0.1087813033280319f,   0.0183038003731262f,   0.0116188900206874f},{ -0.0029271707207571f,  -0.0035858914945696f,   0.0193864139152949f},{  0.0423302311049426f,  -0.0454328526960754f,   0.0256453598199996f},{  0.0436645078517234f,  -0.0246779987968212f,  -0.0547896247580715f},
   {  0.0555726420043039f,   0.0034030997520980f,   0.1043818440306489f},{  0.0691037067037593f,  -0.0387198925890591f,  -0.0397284049806367f},{  0.0625374062344912f,  -0.0851701734497605f,  -0.0188883860815148f},{  0.0511313827307843f,  -0.0553352468576577f,  -0.0214322980770803f},{ -0.0403666831683712f,   0.0251888848869427f,  -0.0634234597665941f},
   { -0.0441157738442494f,  -0.0387492714510311f,  -0.1573837792633649f},{ -0.0171538300004226f,   0.0037452085589344f,   0.0136921571369512f},{ -0.0424169329773851f,   0.0203470501365405f,  -0.0993447902162711f},{ -0.0604623095472284f,   0.0083072937644443f,   0.0376917335684772f},{  0.0257598956953291f,   0.0236706516737048f,  -0.0488568111630470f},
   { -0.0037037165118859f,  -0.0093132208228684f,   0.0915681302091737f},{  0.0192677948312355f,  -0.0125617621656249f,  -0.0512758829687058f},{ -0.0328770713634739F,   0.0323479014979624f,  -0.0003623537255284f},
   {  0.0177125376987352f,   0.0304969745561252f,   0.0592802624083899f},{  0.0249755576565915f,   0.0277566984081125f,   0.0880929962673458f},{  0.0721593412556769f,   0.0127137885982839f,  -0.0204499328508155f},{ -0.0550205874502518f,   0.0935677985911498f,   0.0235173309108825f},{ -0.0234290957646773f,  -0.0499008335904447f,   0.0581779243463909f},
   { -0.0631749999889256f,   0.0011356313293092f,   0.0626097873338024f},{  0.0218456905751000f,   0.0240362694144045f,   0.0215014162516652f},{  0.0279010396781476f,   0.0078265982568125f,   0.0605053651884122f},{ -0.0960963642944770f,   0.0123900037743692f,   0.0113928526133573f},{ -0.0564129695463992f,  -0.0327208204801346f,   0.0047312158251777f},
   { -0.0528686964013134f,   0.0730693619559442f,   0.0117012926722785f},{ -0.0090664620123317f,   0.0243490423635753f,  -0.0128229832315256f},{ -0.1156469787327227f,  -0.0171764908401665f,  -0.0735642203988676f},{ -0.0139782349896203f,   0.0697317936716913f,  -0.0343395897084774f},{  0.0444445649327953f,   0.0396278728108775f,   0.0424368660009996f},
   { -0.0779204325673313f,   0.0012207845126710f,  -0.0436045681998261f},{  0.0424196573036963f,   0.0901367149346551f,  -0.0838044241533497f},{ -0.0478523930270274f,   0.1112340966752068f,   0.0169328126085594f},{ -0.0079992316982191f,  -0.0250187733239823f,   0.0772147969095909f},{ -0.0013256016599388f,  -0.0139899884082436f,   0.0287941642967860f},
   {  0.0401124681632857f,   0.1030468932429484f,   0.1082195177208059f},{ -0.0487674638310319f,   0.0651226462337599f,  -0.0115781280643402f},{ -0.1303670142272275f,  -0.0033951378585260f,   0.0612635953997177f},{  0.0599986017827390f,  -0.0151884965621560f,  -0.0577384641650985f},{  0.0521454928803234f,   0.1812139810285945f,   0.0414903137534673f},
   { -0.0072242881114053f,   0.0666294891551336f,  -0.0106639137283979f},{ -0.0133724765801849f,   0.0224039093513880f,  -0.0175904370057891f},{  0.0669411532112979f,  -0.0043164841825801f,  -0.0060925316883948f},{  0.0680822050483294f,   0.0601727071504376f,  -0.0099608325595736f},{ -0.0007683613076190f,  -0.0581498603826053f,  -0.0366926351653657f},
   {  0.0871489997251316f,  -0.0171413823443083f,  -0.0737429063573743f},{ -0.0898692067777131f,  -0.0026284516727552f,   0.0377912676527383f},{ -0.0258884539921504f,   0.0063616977205648f,   0.0041473672775162f},{  0.0519556046482805f,   0.0421953230343447f,  -0.0263357135010659f},{  0.0267608922371725f,   0.0516147521949979f,   0.0023026382296790f},
   {  0.0131907111222197f,   0.0189112238521644f,   0.0583590812971891f},{  0.0994411777546833f,   0.0151422903927300f,  -0.0756894252289457f},{ -0.0270283476710528f,  -0.0759605272472500f,  -0.0608512991089616f},{  0.0123457837806138f,  -0.0061470087337266f,   0.0524345914020148f},{  0.0348540914216756f,   0.0335644666816596f,  -0.0452975424376597f},
   { -0.0651392970715158f,  -0.0180511693315792f,  -0.0961806060740884f},{ -0.0418493705951352f,   0.0155078745820205f,   0.0350569568893150f},{ -0.0461266152184171f,  -0.0168810980780915f,   0.0520939915905051f},{ -0.0693003939804568f,  -0.0004059813157943f,   0.0612476110787602f},{ -0.0050128457823457f,  -0.0052212176003870f,  -0.0646500485684416f},
   {  0.0295817729345926f,   0.0234955426026620f,   0.0305890618457286f},{  0.0222985661926841f,  -0.0072871241025782f,  -0.0217282005857641f},{ -0.0286769772384723F,  -0.0286582291126304f,  -0.0680161236434539f},
   {  0.0085725606591285f,   0.0175505102787121f,   0.0535075217399633f},{  0.0197242539550887f,   0.0473608962967815f,   0.0804999783927038f},{  0.0354901180596586f,   0.0242030339225720f,  -0.0259264083875092f},{ -0.0118062792050410f,   0.0583582313637516f,   0.0326143949332708f},{  0.0031872413227687f,  -0.0861106014944011f,   0.0460687514966164f},
   { -0.0721367902273631f,   0.0027557935063746f,   0.0334602579043296f},{  0.0165081723258682f,   0.0958728627863287f,   0.0111920413731834f},{ -0.0016801525681481f,  -0.2433812828566327f,   0.0623851004727837f},{ -0.0980822098080784f,  -0.0644922017284529f,   0.0090920040199080f},{ -0.0513842931763478f,   0.1105465835096281f,  -0.0217979365628530f},
   { -0.0505480893428074f,  -0.0107052125596314f,  -0.0062181855913954f},{  0.0054878002059902f,   0.0246084087580794f,   0.0002025556252508f},{ -0.0941091102664046f,  -0.0419143360741754f,  -0.0497997499423967f},{ -0.0120981103368971f,  -0.1004604369515827f,  -0.0325889861150219f},{  0.0398199278850532f,   0.0413879896354233f,   0.0504869434219702f},
   { -0.0534563124633481f,  -0.0134358312468908f,  -0.0798390217761140f},{  0.0399625002546168f,   0.0643648762964200f,  -0.0587209811607463f},{ -0.0462051015694765f,  -0.0267205353088571f,  -0.0699741160196853f},{  0.0092660909979558f,   0.0186081704161804f,   0.0832341441485599f},{  0.0310110777541044f,   0.0440966651042831f,   0.0334700983060456f},
   {  0.0102627672623572f,   0.0360723683544256f,   0.0807686485967140f},{ -0.0231603605955080f,   0.0022698059446827f,  -0.0402032517507781f},{ -0.0646777050496523f,   0.0115925936937159f,  -0.0166418901498124f},{  0.0646092337011578f,  -0.0259670607481575f,   0.0081774860577593f},{ -0.0365688400263722f,  -0.0050569264747559f,  -0.0367637659725207f},
   {  0.0659462790632481f,   0.0491958358401352f,   0.0094075183659533f},{ -0.0029944580208156f,   0.0274856986452281f,  -0.0397564975212076f},{  0.0688730013250306f,  -0.0182301255827557f,   0.0191393097919210f},{  0.0290331138883364f,  -0.0026484110122092f,   0.0039585784890064f},{  0.0636779676234589f,   0.0088120353561319f,   0.0313120120451238f},
   {  0.0665282652121546f,  -0.0175776972208670f,   0.0259133932607730f},{ -0.1112949662989375f,  -0.0130027855082663f,  -0.0155758596713378f},{ -0.0309204590433062f,  -0.0149099735387677f,   0.0667075734644965f},{  0.0005442720256454f,   0.0350152091083822f,   0.0387235960214325f},{  0.0609316021056901f,   0.0245251278193118f,  -0.0526079124775611f},
   {  0.0426696485650844f,   0.0219877396601496f,   0.0507697042319685f},{  0.0452207482744394f,   0.0113497331603656f,   0.0191344812068654f},{ -0.0706580300569457f,   0.0103589701427666f,   0.0888221844111599f},{  0.0003104533153627f,   0.0432779159109349f,   0.0590381138442221f},{  0.0378596481568228f,  -0.0123098055299694f,  -0.0181786035349587f},
   {  0.1070602238660409f,   0.0124353647366857f,   0.0754182456551465f},{  0.0713311252314430f,   0.0435160986078931f,  -0.0513754671466039f},{  0.0803745053388421f,  -0.0156404364282729f,   0.0088066498299759f},{ -0.0519605007164201f,  -0.0376238279505376f,  -0.0074152785912128f},{ -0.0723694450713689f,   0.0077150999306385f,   0.0342704867487851f},
   {  0.0071471979642392f,  -0.0209141562095180f,  -0.0017959814866383f},{ -0.0566311779820060f,  -0.0066446894418761f,  -0.0117610254405085f},{  0.0040156856150394F,  -0.0348384080632957f,   0.0333471799123269f},
   {  0.0113341175757377f,   0.0187428828378217f,   0.0519443224760021f},{  0.0200505639763237f,   0.0626073073633370f,   0.0756601887360281f},{  0.0555000794700425f,   0.0443274769827100f,  -0.0306005331147413f},{ -0.0365950652738889f,   0.0495819558300209f,   0.0492103293876285f},{ -0.0144353352997729f,  -0.1234367877512532f,   0.0744990146248065f},
   { -0.0726691880888604f,   0.0117818861533187f,   0.0290573405213387f},{  0.0202013323589992f,   0.1244780662088392f,   0.0077592027143342f},{  0.0033714076778637f,  -0.3453253003056160f,   0.0723710021377799f},{ -0.1013386660948649f,  -0.0983642038623150f,   0.0112331253671097f},{ -0.0414714036000083f,   0.1588763450592336f,  -0.0205841193824405f},
   { -0.0589000913331893f,  -0.0197696197916869f,   0.0012946321378411f},{ -0.0015872601136115f,   0.0226033686440914f,   0.0061187825048640f},{ -0.1085700678893252f,  -0.0647215567185807f,  -0.0589495786270572f},{ -0.0193815111095295f,  -0.1408291069775742f,  -0.0193694622803070f},{  0.0423852152817934f,   0.0315654638695431f,   0.0398910164285353f},
   { -0.0726392147852382f,  -0.0074882964375844f,  -0.0617645115488700f},{  0.0413823015914704f,   0.0753036979658973f,  -0.0752562699103468f},{ -0.0509867354036044f,  -0.0522612914903115f,  -0.0616426880150919f},{ -0.0062993749194752f,   0.0423669108292747f,   0.0646154908282011f},{  0.0132025703532283f,   0.0502173167373149f,   0.0373476684754911f},
   {  0.0168948415045163f,   0.0431412483614817f,   0.0769931355002663f},{ -0.0388158527068571f,  -0.0046881732528522f,  -0.0404924217917848f},{ -0.0975723651836116f,   0.0206182942654072f,  -0.0119716866338299f},{  0.0641045103087127f,  -0.0308089692511891f,  -0.0078123468356343f},{  0.0045016120443049f,  -0.0245946116933365f,  -0.0222956228095016f},
   {  0.0272924161062518f,  -0.0068356156362148f,  -0.0038178883472148f},{ -0.0178742473138021f,   0.0171093687202309f,  -0.0403355381045115f},{  0.0620991743663086f,  -0.0266099683168463f,   0.0247700556166304f},{  0.0521195572314368f,   0.0247185051412272f,  -0.0196057947662242f},{  0.0178037947185144f,  -0.0114487183759821f,   0.0315123544368129f},
   {  0.0888695753441668f,  -0.0245428029082643f,   0.0274181004948301f},{ -0.1015768974759057f,  -0.0142249337990156f,   0.0003097742881398f},{ -0.0330975110930661f,   0.0142716359232523f,   0.0628099442640194f},{  0.0379967503503789f,   0.0353758528198456f,   0.0248095251818451f},{  0.0536279081336227f,   0.0217747914938328f,  -0.0228213136523692f},
   {  0.0153973382801797f,   0.0321601323308423f,   0.0166480582309298f},{  0.0850829539799568f,  -0.0024302512851237f,   0.0269293058544396f},{ -0.0432676271185535f,  -0.0087542648392730f,   0.1181976816937505f},{  0.0041272279582960f,   0.0389889036024736f,   0.0559277447367627f},{  0.0389691029225179f,  -0.0094643144257075f,  -0.0197223548562573f},
   {  0.0277947270574026f,  -0.0088620543439686f,   0.1067649849614300f},{ -0.0089065569765336f,   0.0177566694117042f,  -0.0428759583628143f},{  0.0211461068245239f,  -0.0343148300621607f,   0.0386261701674245f},{ -0.0781061282784875f,  -0.0128965778860828f,  -0.0130825157653757f},{ -0.0215941357891528f,  -0.0103358520920680f,   0.0441820854888580f},
   { -0.0053650476965774f,   0.0232667882058642f,  -0.0625190001700783f},{  0.0026922392290503f,  -0.0192758133736486f,   0.0614700997807763f},{ -0.0022731480167139F,  -0.0341080300355161f,  -0.0042236196955471f},
   {  0.0194590210061158f,   0.0279916794536964f,   0.0560829937238827f},{  0.0258718039449161f,   0.0305223905974331f,   0.0848762415014976f},{  0.0803236797029770f,   0.0135347915706191f,  -0.0369197649098027f},{ -0.0606162180185761f,   0.0930184802323251f,   0.0483270346672464f},{ -0.0216109238605232f,  -0.0614007097538710f,   0.0870508660621277f},
   { -0.0723937356370068f,  -0.0062088600283456f,   0.0587813694378291f},{  0.0173921907329514f,   0.0379131052476846f,   0.0279818726467341f},{  0.0308945082295879f,  -0.0222191994608857f,   0.0531658211706547f},{ -0.0952096130508043f,   0.0099704740895748f,   0.0117114938909871f},{ -0.0604183550733498f,  -0.0181034782151945f,   0.0111139687428559f},
   { -0.0554972066231896f,   0.0532393419243215f,   0.0194377475477098f},{ -0.0117659699817135f,   0.0220815849728912f,  -0.0229416573180989f},{ -0.1201105881141322f,  -0.0028704516855962f,  -0.0629009042360688f},{ -0.0087118058528688f,   0.0549943633129702f,  -0.0340918666672517f},{  0.0385607601999313f,   0.0157300802110603f,   0.0317593589238018f},
   { -0.0680758185365370f,  -0.0077518459726112f,  -0.0046214173573797f},{  0.0337789194496838f,   0.0979905828514844f,  -0.0892910109535462f},{ -0.0608904097499276f,   0.0774220204959254f,   0.0338544584412928f},{ -0.0146032480741909f,  -0.0064492753442623f,   0.0280615272208587f},{ -0.0042001943956735f,  -0.0036210515519458f,   0.0649598656956917f},
   {  0.0407738315037016f,   0.1048079349399607f,   0.0651357547431402f},{ -0.0594392503271726f,   0.0441072416653337f,   0.0135700452360703f},{ -0.1464167702699454f,  -0.0252672472540769f,   0.0918040581162917f},{  0.0530465571179611f,   0.0014248300836084f,  -0.0643360922543798f},{  0.0507900914711036f,   0.0915189809577242f,  -0.0016428568322891f},
   { -0.0129711820108355f,  -0.0113424954342583f,  -0.0011957563694623f},{  0.0078369536039320f,  -0.0072750518857548f,  -0.0188363312258986f},{  0.0722285154234726f,  -0.0127017592900327f,  -0.0106456741414674f},{  0.0703776776739147f,   0.0229778420402260f,  -0.0747499147631825f},{ -0.0204008151881424f,   0.0267689799011576f,   0.0648483506063564f},
   {  0.0709089895612204f,   0.0349233661792960f,  -0.0699179859676993f},{ -0.0770079393151884f,   0.0117725272323701f,   0.0413941515178659f},{ -0.0235472565742150f,   0.0178923571211667f,  -0.0257501432426145f},{  0.0515701946232381f,   0.0442934312796092f,  -0.0699281299313199f},{ -0.0048906996281751f,   0.0456790472170451f,   0.0760184299121616f},
   { -0.0109670565187021f,  -0.0164519545884674f,   0.0051731370448891f},{  0.0883946205951835f,   0.0514726292323327f,  -0.0685627986706310f},{  0.0165480791296743f,   0.0030531757090756f,  -0.0748846063551502f},{  0.0225779017520728f,  -0.0023288420410560f,   0.0354030220305655f},{  0.0112587149761918f,   0.0347676503518570f,  -0.0295482483787706f},
   { -0.0810737682626762f,   0.0362738142748410f,   0.0683241855267088f},{ -0.0757143350606343f,  -0.0266751587228411f,   0.1143198336231385f},{ -0.0843705831446272f,   0.0018623725929129f,   0.1997796553124479f},{ -0.0848925567393154f,   0.0249245531947464f,   0.0678456944256101f},{  0.0344426073526162f,   0.0036431762127145f,  -0.0728242148263750f},
   {  0.0036662079305197f,  -0.0101182729698249f,  -0.0395919538786815f},{  0.0465373388429230f,   0.0242667951975535f,  -0.0188189192301001f},{ -0.0352974938089748F,  -0.0142883717587861f,  -0.0637782565642626f},
   {  0.0136345035081148f,   0.0290307721559407f,   0.0596943621400509f},{  0.0216441338112716f,   0.0223559575631361f,   0.0913763591275031f},{  0.0487730141630340f,   0.0072847703783758f,  -0.0096534475229755f},{ -0.0292558866851425f,   0.0909965025952462f,   0.0019530576117579f},{ -0.0098273817190076f,  -0.0357515341680873f,   0.0297712718869888f},
   { -0.0654429734862794f,  -0.0006075500207976f,   0.0630569103582450f},{  0.0209729657359646f,   0.0136248761782978f,   0.0207238409171750f},{  0.0174612906250714f,   0.0269263561748387f,   0.0546834938002089f},{ -0.0985818906214210f,   0.0179706426006755f,  -0.0005797089283707f},{ -0.0577708123716572f,  -0.0366736913019463f,  -0.0043074490651444f},
   { -0.0441732774587868f,   0.0738850174850788f,  -0.0039984008218662f},{  0.0003622395270234f,   0.0297946657268260f,  -0.0113930550118696f},{ -0.0968270930208427f,  -0.0213566060535317f,  -0.0789451047778606f},{ -0.0094924704535999f,   0.0692558082281224f,  -0.0405583745683681f},{  0.0442504056186096f,   0.0625652095939017f,   0.0489748644145997f},
   { -0.0616985951187666f,   0.0021013146534189f,  -0.0808771026114136f},{  0.0473731343676800f,   0.0718259685772070f,  -0.0643706111807954f},{ -0.0407822453279076f,   0.1191330244492412f,  -0.0227418077212503f},{  0.0029229308964031f,  -0.0336869979190081f,   0.0926676131081260f},{  0.0196688745528040f,  -0.0144806986724888f,   0.0151518070495287f},
   {  0.0215720495257284f,   0.0899256864969401f,   0.1076912707428116f},{ -0.0304610310628753f,   0.0702641819599634f,  -0.0237424080961675f},{ -0.0923428757626005f,   0.0118701912034314f,   0.0211213088726084f},{  0.0652255152968694f,  -0.0201023048088436f,  -0.0340375574344499f},{ -0.0011359463793491f,   0.2039070978627455f,   0.0486977082770870f},
   {  0.0457087421112750f,   0.1213480385762135f,  -0.0100308886654480f},{ -0.0059199231524465f,   0.0364276842120984f,  -0.0318884455168805f},{  0.0602098829529282f,  -0.0064930692899970f,   0.0147691147381392f},{  0.0477165044333866f,   0.0640592353417517f,   0.0485302523257269f},{  0.0357245952408859f,  -0.0930945296655449f,  -0.0599115607467232f},
   {  0.0768253936312761f,  -0.0347553744660033f,  -0.0483680988107798f},{ -0.1104230156649378f,   0.0047494081981421f,   0.0046484178338245f},{ -0.0265925617089446f,  -0.0143952173137681f,   0.0220343577062255f},{  0.0298200766829385f,   0.0377738495784453f,   0.0209666703605755f},{  0.0549102147121852f,   0.0513065371620869f,  -0.0490267597109870f},
   {  0.0306911176653380f,   0.0410038000097092f,   0.0934571052731405f},{  0.0733645738925042f,  -0.0065089688711910f,  -0.0276284681269113f},{ -0.0667667281492386f,  -0.0989904513109661f,  -0.0270841958052323f},{ -0.0184622749830875f,   0.0071250445127712f,   0.0596612157557779f},{  0.0434754124680477f,   0.0425125554025633f,  -0.0429311890225165f},
   {  0.0475416849351672f,  -0.0267066047612489f,  -0.1283033314969983f},{  0.0131642697245385f,   0.0316886388643351f,  -0.0295161141753584f},{  0.0350949892385324f,  -0.0172457861500510f,  -0.0565271361269144f},{ -0.0518755368876981f,  -0.0301901950650376f,   0.0289051574250973f},{ -0.0448378414991504f,   0.0113086952273261f,  -0.0478305565137113f},
   {  0.0223671562258463f,   0.0075304384398949f,   0.0868515122300455f},{ -0.0349573089533843f,  -0.0299072888730151f,  -0.0516016131449480f},{ -0.0193947990308796F,  -0.0331339442089401f,  -0.0209624399326843f},
   {  0.0064088747008989f,   0.0156275531977793f,   0.0549297036423661f},{  0.0080716970946015f,   0.0157640403215073f,   0.0816292668742499f},{  0.0179072187258644f,  -0.0057791113244677f,  -0.0205730523217211f},{ -0.0045664187228693f,   0.0738428488362661f,   0.0083959550156931f},{  0.0070391412063560f,  -0.0237549370520875f,   0.0163223467002645f},
   { -0.0738714888984528f,  -0.0169026019928311f,   0.0416338001945406f},{ -0.0121053063810809f,   0.0270314207656144f,   0.0148393594919082f},{  0.0245452780971541f,  -0.0170143553072070f,   0.0399292513218708f},{ -0.0715597357216171f,   0.0002562690749521f,   0.0145998474657134f},{ -0.0626816366410740f,  -0.0028097572051434f,  -0.0049523980612287f},
   { -0.0230717866981674f,   0.0149252321883229f,  -0.0049808911820995f},{  0.0215615884077679f,   0.0218733950133056f,  -0.0020090693834192f},{ -0.0526726920038466f,   0.0011872533412382f,  -0.0436499825174320f},{  0.0040737625225485f,   0.0251270468709494f,  -0.0507921637670802f},{  0.0464042731223658f,   0.0413224133222399f,   0.0576632647336854f},
   {  0.0030593602952226f,  -0.0065710651598719f,  -0.0538142551471022f},{  0.0333666674924930f,   0.0561903162191825f,  -0.0514354705358711f},{  0.0108663647072134f,   0.0710248021948736f,  -0.0595123695033558f},{ -0.0120889719072171f,  -0.0396904518651511f,   0.0825050037759367f},{  0.0303896955423937f,   0.0044358045054419f,   0.0323019430367176f},
   { -0.0122581489534198f,   0.0383601439317093f,   0.0592577628291152f},{  0.0215252394640225f,   0.0479730512601246f,  -0.0179310472348805f},{ -0.0297557987814072f,  -0.0054703943077344f,  -0.0038878671709486f},{  0.0569835770256926f,  -0.0152812115944725f,  -0.0097095741231567f},{ -0.0233633156221384f,   0.0841361963449194f,  -0.0278845674773228f},
   {  0.0925698964535492f,   0.0764223327993309f,   0.0169972988850704f},{  0.0242878686890117f,   0.0238072895753352f,  -0.0330928257741340f},{  0.0539959946847392f,  -0.0015172390386260f,  -0.0084270530435891f},{  0.0105724325634044f,  -0.0067204825314983f,   0.0051770277305061f},{  0.0838828948458428f,   0.0010386342186687f,   0.0138148750221500f},
   {  0.0498240469521365f,   0.0080207611999474f,  -0.0061665175989791f},{ -0.0841696737063814f,   0.0035268707766663f,  -0.0049959559518121f},{ -0.0367748872964226f,  -0.0533404765705643f,   0.0624008777478256f},{ -0.0277370087277789f,   0.0177397139323925f,   0.0215338010243914f},{  0.0730872283336768f,   0.0357858366640066f,  -0.0689047204721703f},
   {  0.0195285255378750f,  -0.0121462417011634f,   0.0595904068414172f},{  0.0190341324994495f,   0.0387353769994298f,  -0.0159768596848473f},{ -0.1284486996545779f,   0.0105961192454306f,   0.0349441964167703f},{ -0.0236898369062788f,   0.0306435557703022f,   0.0616861389603360f},{  0.0551783704837154f,   0.0253956397057178f,  -0.0381762435605332f},
   {  0.1428069444195563f,   0.0717180220724061f,   0.0535480551095647f},{  0.0820275421980835f,   0.0447301814982490f,  -0.0514359437699403f},{  0.1114689487940443f,   0.0109738524610580f,  -0.0159770016331715f},{ -0.0159127332635847f,  -0.0624837095630484f,   0.0193744054271865f},{ -0.0541805764346290f,   0.0277299627402845f,   0.0576780932856501f},
   {  0.0480469104892426f,  -0.0915208672066322f,   0.0814079758188955f},{ -0.0878582120495867f,   0.0540408957364812f,  -0.1214830520457431f},{ -0.0520500515856613F,  -0.0219245101055376f,   0.0433925819157219f},
   {  0.0154647443003534f,   0.0300607963125399f,   0.0604178473075687f},{  0.0233013532018140f,   0.0252144865917564f,   0.0905459385975099f},{  0.0616660615371444f,   0.0142349785953176f,  -0.0115748409582233f},{ -0.0439647996064632f,   0.0896361153368871f,   0.0095074827612310f},{ -0.0181682347577153f,  -0.0475617464430388f,   0.0413675999754696f},
   { -0.0637630090732337f,   0.0026681749612356f,   0.0652388408772946f},{  0.0226064746277995f,   0.0174137615113878f,   0.0208901746717456f},{  0.0228071968944963f,   0.0118794654555088f,   0.0583971758962472f},{ -0.0973974829961149f,   0.0119829879823547f,   0.0044854764754710f},{ -0.0523540190424442f,  -0.0328244507984052f,  -0.0026062239832540f},
   { -0.0488483464683788f,   0.0742410104934456f,   0.0036700172688008f},{ -0.0076208063355386f,   0.0245454834507949f,  -0.0107721251204816f},{ -0.1064971092645215f,  -0.0205715928893619f,  -0.0815540441973066f},{ -0.0114068826667240f,   0.0689729137556940f,  -0.0378702174726891f},{  0.0457562716037547f,   0.0527109792285383f,   0.0462502835650724f},
   { -0.0737977096897766f,   0.0045369700681909f,  -0.0672320755836709f},{  0.0482191804112673f,   0.0805901671734329f,  -0.0728306817029538f},{ -0.0396520218456055f,   0.1218409220321409f,  -0.0099547156092813f},{ -0.0071312702824930f,  -0.0295808539389144f,   0.0910138351228013f},{  0.0087443280090962f,  -0.0165172696946293f,   0.0153009354562144f},
   {  0.0304782842789550f,   0.0947380168867158f,   0.1150613006744156f},{ -0.0378277137911456f,   0.0700249459427139f,  -0.0245800269641795f},{ -0.1095104508058810f,   0.0044044987665825f,   0.0337076574343199f},{  0.0649356815770006f,  -0.0208787288940909f,  -0.0478246996996052f},{  0.0293690488305762f,   0.2085576072148588f,   0.0534461174921692f},
   {  0.0134852343604365f,   0.0961453877235163f,  -0.0123329705579604f},{ -0.0149102932803705f,   0.0326870191427437f,  -0.0251982960359648f},{  0.0553317484213283f,  -0.0049656281098278f,   0.0092023823245850f},{  0.0574391009204477f,   0.0745304570852486f,   0.0300960077179431f},{  0.0159762418047575f,  -0.0943710805835450f,  -0.0626131570606866f},
   {  0.0903441952580665f,  -0.0328684735779606f,  -0.0620360429194677f},{ -0.1056410144353642f,   0.0031832068219482f,   0.0214965566297306f},{ -0.0282175086876682f,  -0.0033105764028007f,   0.0178254880756053f},{  0.0517759135234201f,   0.0424484984640189f,   0.0027364739394344f},{  0.0490517927510630f,   0.0518617781012345f,  -0.0332046433902596f},
   {  0.0213522832587024f,   0.0367059499533624f,   0.0804186701102073f},{  0.0944393531856179f,  -0.0018817502908051f,  -0.0479118962036049f},{ -0.0562057646459112f,  -0.0997492644501240f,  -0.0334832523003774f},{ -0.0101313293739586f,  -0.0016690551458007f,   0.0621917010469266f},{  0.0460446272691929f,   0.0358536573619896f,  -0.0457205908861604f},
   { -0.0061387611845104f,  -0.0271275256872193f,  -0.1364654955137120f},{ -0.0144545858386977f,   0.0175085487952103f,  -0.0137580674593469f},{  0.0075751665162962f,  -0.0292545277282616f,  -0.0298941245884852f},{ -0.0614687241987220f,  -0.0225462800933571f,   0.0404817717531881f},{ -0.0231096251794523f,   0.0034099879822506f,  -0.0565554361539451f},
   {  0.0271252737899772f,   0.0229792020810415f,   0.0620518553501034f},{ -0.0042338272983472f,  -0.0213341937289502f,  -0.0295302096034048f},{ -0.0288291592544122F,  -0.0291359621064779f,  -0.0432780459290971f},
   {  0.0153393770618497f,   0.0218897757264422f,   0.0519280799930807f},{  0.0195572796085700f,   0.0557940221234403f,   0.0782232874427852f},{  0.0696053945008916f,   0.0386371766024307f,  -0.0348351422280667f},{ -0.0510539305159025f,   0.0631893259905557f,   0.0504903198121985f},{ -0.0205607849080753f,  -0.1113133015638850f,   0.0853383726317260f},
   { -0.0707610635036904f,   0.0075882440069165f,   0.0420773622001445f},{  0.0152712084788180f,   0.1055630131563492f,   0.0171160307813234f},{  0.0388080150149387f,  -0.2742809364917814f,   0.0604876053757981f},{ -0.0894983704374218f,  -0.0747994138282400f,   0.0109950508877246f},{ -0.0623014104974706f,   0.1174522336931748f,   0.0012555645309524f},
   { -0.0577925443882144f,   0.0010387462110714f,   0.0051254915900783f},{ -0.0073702858029971f,   0.0227249891308083f,  -0.0044238810591538f},{ -0.1163215225324272f,  -0.0528327598300324f,  -0.0618688451500162f},{ -0.0045901665967451f,  -0.0972518118807464f,  -0.0285997622236251f},{  0.0482374150646134f,   0.0213678378246634f,   0.0390171365499525f},
   { -0.0810586857536549f,  -0.0029995495905828f,  -0.0385188429488044f},{  0.0385904690391584f,   0.0918858928900762f,  -0.0904912799523765f},{ -0.0419837109710861f,  -0.0201676112121534f,  -0.0201129585858203f},{ -0.0147176106344034f,   0.0328864386021399f,   0.0524819122778010f},{ -0.0056892440898518f,   0.0336614490553796f,   0.0473465795325724f},
   {  0.0358162684293779f,   0.0608835161560921f,   0.0702289793777887f},{ -0.0407954674530550f,   0.0084340496996128f,  -0.0207990939409089f},{ -0.1254827849610302f,   0.0050612878156899f,   0.0367322555210113f},{  0.0577592464901930f,  -0.0189861400251126f,  -0.0321564396515053f},{  0.0637069396669757f,  -0.0057750097798425f,  -0.0091590537018889f},
   {  0.0004588592308533f,  -0.0260078520707002f,  -0.0151456434729753f},{ -0.0171602034201597f,   0.0095381866238706f,  -0.0313403276959342f},{  0.0614815221930412f,  -0.0210837403715908f,   0.0103407562812922f},{  0.0759125735235235f,   0.0277154933492280f,  -0.0416013318546505f},{ -0.0214726512248205f,   0.0241958853805199f,   0.0435179347089205f},
   {  0.0828745786064269f,  -0.0015005404266768f,  -0.0111066204946762f},{ -0.0871105441679942f,  -0.0082977869970518f,   0.0213904057565238f},{ -0.0343629925374526f,   0.0189552848516253f,   0.0297211600096150f},{  0.0512080431498605f,   0.0402741769176821f,  -0.0188645695876298f},{  0.0219804572576949f,   0.0390428429032809f,   0.0223504864205461f},
   {  0.0004459960676484f,   0.0159784318965415f,   0.0144354694133364f},{  0.0968547757589870f,   0.0060737068236308f,  -0.0184085284452078f},{ -0.0220832702078201f,  -0.0018930888926187f,   0.0507189697126879f},{  0.0246913659326972f,   0.0225610118453732f,   0.0433137519543362f},{  0.0388325891974239f,   0.0120860428809336f,  -0.0163526239880704f},
   { -0.0676493822880780f,   0.0171092626770137f,   0.0903179865911377f},{ -0.0567640652727220f,   0.0087728974453877f,   0.0183763691087669f},{ -0.0458105635399028f,  -0.0141963016856583f,   0.1035200372959719f},{ -0.0885563574394961f,   0.0012926245390257f,   0.0240661908625532f},{  0.0034494666902878f,  -0.0052873588811537f,  -0.0001887657206459f},
   {  0.0066087048056105f,   0.0189945262272961f,  -0.0660842493026114f},{  0.0535227866451133f,   0.0015377931516734f,   0.0584601252134378f},{ -0.0245808062602348F,  -0.0282770482720271f,  -0.0479978344154056f},
   { -0.0004306128713504f,   0.0369339622063035f,  -0.0087461873811872f},{ -0.0004116125257229f,   0.0421696432425109f,  -0.0085806797097117f},{ -0.0015699903572252f,  -0.0097023522398203f,  -0.0019940422954642f},{ -0.0009256618789598f,  -0.0092603854319210f,  -0.0555254829735979f},{ -0.0000295515113661f,  -0.0871892828503441f,   0.0096538563583100f},
   { -0.0011839760121397f,  -0.0800810641934192f,   0.0415297829385282f},{ -0.0019593859883534f,  -0.1850239837725826f,   0.0924607388921407f},{  0.0012061166140764f,  -0.0044756461033092f,   0.0352088530037358f},{ -0.0210613509807250f,   0.0012337913222162f,  -0.0529887481661850f},{ -0.0088226054671128f,  -0.0028114649085825f,   0.1030222873079240f},
   { -0.0042291177785132f,  -0.0263573316599158f,   0.0716595910474816f},{ -0.0006976093662529f,   0.0033326920402873f,   0.0740436045542525f},{  0.0062583524912907f,  -0.0614361789858038f,  -0.0463667613659755f},{ -0.0047996297886716f,  -0.0924757686405784f,   0.0962800737257601f},{ -0.0145358684392975f,  -0.0496515662312094f,  -0.1998443957292575f},
   {  0.0283531361180539f,  -0.1479624102006614f,   0.0621862930893852f},{ -0.1040167654983911f,  -0.0426558086017495f,   0.0322399578199519f},{  0.0074243892918125f,   0.0398037463972146f,  -0.0139832755214316f},{ -0.0113445469232300f,  -0.1509247697411466f,  -0.1187604698302939f},{  0.0641291787514246f,  -0.1595858180830406f,  -0.1186439819629145f},
   {  0.0642497186660883f,   0.1135828081305663f,   0.1310126545050313f},{  0.0032055675264601f,   0.0840832063674667f,  -0.2259588143095356f},{  0.0236087459290176f,   0.0531993507097640f,   0.0492908942297943f},{  0.0151845154900511f,  -0.0283063719661345f,  -0.0538436961193695f},{  0.0421136803070589f,  -0.1366997655599750f,  -0.0239471431128458f},
   { -0.0406287196694488f,   0.0219305106847615f,  -0.0469683447094265f},{  0.0515386993260207f,   0.0123217569506456f,  -0.0140461640876857f},{ -0.2014976698007613f,  -0.0043315621076940f,   0.0070799554861659f},{ -0.1778025979630791f,  -0.0482933137973199f,   0.0272323118777099f},{ -0.0308246364120418f,   0.0555910149052145f,  -0.0793803216966287f},
   {  0.0151928673350673f,  -0.1148367725588761f,   0.0363358608545703f},{  0.0189235074345095f,   0.0218186093365201f,   0.0152905398388881f},{  0.0005428134044547f,  -0.1025661926201435f,   0.0125234791146511f},{  0.0719355856840580f,   0.0158353899107757f,   0.0479204983370600f},{  0.0309900638120678f,  -0.0011109521398934f,  -0.0270255572517712f},
   {  0.0011916463227396f,  -0.1166714571632212f,  -0.1040027025985598f},{ -0.0100977299503721f,   0.1070580678849637f,   0.1209420091959441f},{ -0.0043943796272751f,  -0.0114377526439818f,  -0.0155380691065850f},{  0.0566583230289967f,   0.0057143250412695f,   0.0027580528948375f},{  0.0333399471113441f,  -0.0116587232789787f,   0.0083440433829075f},
   { -0.0361440904632499f,  -0.1341835542185727f,  -0.0572645213710063f},{ -0.0116388469205553f,   0.0079326842774118f,   0.0736659232472830f},{ -0.0022249542964377f,  -0.0315463416506054f,   0.0660620057454699f},{ -0.3045230553142991f,  -0.0210145243420230f,   0.0424635481599940f},{ -0.0789508118176297f,   0.2402030926549837f,  -0.1429364652549672f},
   {  0.0008853828409247f,  -0.0647797475457038f,   0.0042586378708476f},{ -0.0323035926839420f,  -0.1411915337213985f,   0.0239000621881136f},{  0.1218289566227327F,   0.0098087637833488f,   0.0049033953232606f},
   { -0.0003085623575401f,   0.0308990226308679f,  -0.0098681985669735f},{ -0.0002718388096962f,   0.0348787873552992f,  -0.0095154400421416f},{ -0.0017251924493411f,  -0.0110004405346761f,  -0.0014536024384692f},{ -0.0010522849843333f,  -0.0033750248413626f,  -0.0533937285794489f},{ -0.0004076020942708f,  -0.0752469632859181f,   0.0152622682589713f},
   { -0.0006868761146481f,  -0.0774188994294340f,   0.0436730345725226f},{ -0.0023185466647894f,  -0.1636193647338024f,   0.0920994637947172f},{  0.0011360181363140f,  -0.0045918432633604f,   0.0339683506823793f},{ -0.0193305398780736f,   0.0007034566703567f,  -0.0504849509696526f},{ -0.0080298062342786f,  -0.0022819193986249f,   0.0982609086823616f},
   { -0.0038272730844287f,  -0.0237610341566240f,   0.0681699285203694f},{ -0.0015230539463520f,   0.0078772832545846f,   0.0715238625515546f},{  0.0062012981177633f,  -0.0509261355828674f,  -0.0479028156239869f},{ -0.0051301472907110f,  -0.0812187264931602f,   0.0925232300028709f},{ -0.0133434545187379f,  -0.0418985247608524f,  -0.1947846089937865f},
   {  0.0267534788867893f,  -0.1214352597253348f,   0.0590339448075501f},{ -0.0995488942078231f,  -0.0357544775545537f,   0.0313443492020000f},{  0.0081265647237279f,   0.0328702594665199f,  -0.0157909709031544f},{ -0.0112979195363307f,  -0.1366797124524607f,  -0.1120919065996765f},{  0.0630868508917427f,  -0.1506837081820695f,  -0.1115027177031562f},
   {  0.0624817496026952f,   0.1102541415173630f,   0.1255218844290373f},{  0.0035929955438198f,   0.0576022924086427f,  -0.2209604932904498f},{  0.0218452847397877f,   0.0538301518012060f,   0.0510335586774586f},{  0.0141387306043167f,  -0.0317243813191224f,  -0.0517856091675464f},{  0.0400421529130544f,  -0.1230790934355190f,  -0.0282607707876408f},
   { -0.0391766138668136f,   0.0225978220950759f,  -0.0396977671774990f},{  0.0501834684814480f,   0.0118855436448126f,  -0.0117491991988567f},{ -0.1923768157550922f,  -0.0038110911121223f,   0.0079923383553990f},{ -0.1687052075098792f,  -0.0368930179387231f,   0.0257376487744604f},{ -0.0276025486646875f,   0.0364177430826448f,  -0.0751989437734372f},
   {  0.0139448626302105f,  -0.1092357823972688f,   0.0322731338610526f},{  0.0019415419734835f,   0.0172194579649621f,   0.0147405126115377f},{ -0.0001666669589899f,  -0.0587296945898306f,   0.0309759843914726f},{  0.0629629285666831f,   0.0182743400953599f,   0.0456623912223322f},{  0.0203388541795976f,   0.0053472651082976f,  -0.0192939720281320f},
   { -0.0020110643393366f,  -0.1076664981612520f,  -0.1039048551125970f},{ -0.0093877511091554f,   0.0964915346601360f,   0.1165995002562829f},{ -0.0043445597553998f,  -0.0065699034070251f,  -0.0013522285251647f},{  0.0483397334264054f,   0.0064555513630935f,   0.0069047315524656f},{  0.0318152155142604f,  -0.0006352761197772f,   0.0157214278328208f},
   { -0.0324719915151620f,  -0.1178348014154146f,  -0.0701519623242352f},{ -0.0053058210093715f,   0.0072858596942630f,   0.1009032859192014f},{ -0.0103617715828692f,  -0.0243996390872880f,   0.0799223205898189f},{ -0.2807938332467289f,  -0.0093615083605138f,   0.0396906291177280f},{ -0.0729531921296802f,   0.1704091309430004f,  -0.1264251125363176f},
   { -0.0000072650195479f,  -0.0501384027366980f,   0.0082282933971977f},{ -0.0291171280318355f,  -0.1093150215085693f,   0.0183249269865443f},{  0.1236171521017992F,   0.0082790597384094f,   0.0090006511015998f},
   { -0.0002271920659344f,   0.0153919027841936f,  -0.0058550946622749f},{ -0.0002276559763287f,   0.0158796002790041f,  -0.0031009390368802f},{ -0.0013405021242808f,  -0.0130681992834312f,  -0.0032048879080549f},{ -0.0006758151364931f,   0.0059979798867800f,  -0.0411653070568136f},{ -0.0002724778719850f,  -0.0451663346970200f,   0.0215160943412597f},
   { -0.0006991878462212f,  -0.0621891340283261f,   0.0387912394144216f},{ -0.0021327445877978f,  -0.1130758239386918f,   0.0756782640762794f},{  0.0005235785310465f,  -0.0093941381870945f,   0.0314226734937547f},{ -0.0082303354066479f,  -0.0033229472780720f,  -0.0358394765636186f},{ -0.0028257372471614f,   0.0041817201863376f,   0.0702725358404369f},
   { -0.0026550341883096f,  -0.0128905659611325f,   0.0519842903233700f},{ -0.0022319382525800f,   0.0111477990331488f,   0.0686825169396664f},{  0.0051321167148100f,  -0.0291244127976155f,  -0.0495897276841078f},{ -0.0045825716359116f,  -0.0421717913892786f,   0.0625698912544642f},{ -0.0107300086832252f,  -0.0252930376799032f,  -0.1568634761500990f},
   {  0.0205742940837221f,  -0.0612454035737836f,   0.0252436928512803f},{ -0.0761397064517784f,  -0.0206791362428406f,   0.0191626267019774f},{  0.0065875076513804f,   0.0185305378831308f,  -0.0231318848224815f},{ -0.0096794623461595f,  -0.0742918338622117f,  -0.0814106842849951f},{  0.0478643370229437f,  -0.1148874973003139f,  -0.0819096454096635f},
   {  0.0464924819473888f,   0.0957492697930701f,   0.0990343139415880f},{ -0.0002281191606030f,   0.0062687117818026f,  -0.1754794890700693f},{  0.0216223955276413f,   0.0313113695651271f,   0.0478356183668578f},{  0.0138390642214676f,  -0.0296812021998449f,  -0.0400891589239955f},{  0.0367879610030176f,  -0.0945749228980783f,  -0.0299661403074224f},
   { -0.0400696320993183f,   0.0046956000427002f,   0.0092186345103905f},{  0.0635817356013310f,   0.0087169050214954f,  -0.0007649827630048f},{ -0.1759920850972851f,  -0.0021582353558394f,   0.0078132908232304f},{ -0.1444932180040235f,  -0.0026373774433442f,   0.0055620414927494f},{ -0.0203941639153090f,  -0.0223048612916623f,  -0.0239678268481848f},
   {  0.0117701799311305f,  -0.0762856561801327f,   0.0233181626588654f},{ -0.0166154071834980f,   0.0112616059157198f,   0.0076415199380486f},{ -0.0000357038746579f,   0.0349126444432783f,   0.0451051817357070f},{  0.0548309970127140f,   0.0289225087329918f,   0.0225208700638067f},{  0.0124112489813641f,   0.0034344807464002f,   0.0063799096429507f},
   {  0.0012118908011205f,  -0.0733087473209160f,  -0.0732951732508290f},{ -0.0025680674242654f,   0.0731512654383219f,   0.0705907010967303f},{ -0.0049763325074609f,  -0.0006078607198676f,   0.0291012812541097f},{  0.0367549286483477f,   0.0073838082633168f,   0.0126335322735893f},{  0.0245824994888624f,   0.0252242485689515f,   0.0293199572106297f},
   { -0.0309557789267264f,  -0.1151659982378391f,  -0.0768630127391393f},{ -0.0132167278085990f,   0.0233652899512438f,   0.1140765385700135f},{  0.0034364951891397f,  -0.0034181548605515f,   0.0782437619031602f},{ -0.2215922558439441f,   0.0256215297782773f,   0.0205132027054752f},{ -0.0593990824157464f,   0.0338402237390490f,  -0.0642043590392514f},
   {  0.0015436174628811f,  -0.0238594010695820f,   0.0160413110210246f},{ -0.0219015521319486f,  -0.0652815513871555f,   0.0235029596901737f},{  0.0947771001925019F,   0.0024610187389668f,   0.0205748459397075f},
   { -0.0001695924683580f,   0.0040092164833714f,  -0.0038503112595418f},{ -0.0001790327742768f,   0.0025518089838474f,  -0.0015008352609082f},{ -0.0008330419447106f,  -0.0101523439646746f,   0.0000284387601426f},{ -0.0003223667188547f,   0.0071753375953353f,  -0.0319509580347411f},{ -0.0001864050453093f,  -0.0201605061332852f,   0.0111025094673295f},
   { -0.0005447358221245f,  -0.0380356599491079f,   0.0383982428502257f},{ -0.0012248308675354f,  -0.0595418725133751f,   0.0544712921578616f},{ -0.0000501646686058f,  -0.0139431334840403f,   0.0275992999437632f},{  0.0000878466699964f,  -0.0045088888853618f,  -0.0202304034069031f},{  0.0005492750054467f,   0.0028068134741306f,   0.0431616204213721f},
   { -0.0009019238715764f,   0.0000587389093779f,   0.0366297927942470f},{ -0.0012220152804339f,   0.0057294717409748f,   0.0465362891497613f},{  0.0032670425939218f,  -0.0184372845311722f,  -0.0293444279204415f},{ -0.0032109502423515f,  -0.0136475110569808f,   0.0375979063994124f},{ -0.0062092399114823f,  -0.0104906339859091f,  -0.1048964635212540f},
   {  0.0116353474737181f,  -0.0121283760759058f,  -0.0005952432714075f},{ -0.0434389125794246f,  -0.0061936174357995f,   0.0087624930873042f},{  0.0030188144117373f,   0.0152176291121835f,  -0.0251100716553912f},{ -0.0082108428978183f,  -0.0255942503050086f,  -0.0353024419134218f},{  0.0335437351317483f,  -0.0602187562893532f,  -0.0349145170000981f},
   {  0.0320745017518417f,   0.0567984390622710f,   0.0546367992742490f},{ -0.0008478295790429f,  -0.0160538541091525f,  -0.1214229440376774f},{  0.0161519273809919f,   0.0005713564986268f,   0.0367753205851295f},{  0.0106367095372108f,  -0.0073941872769687f,  -0.0301509396186321f},{  0.0262583764890330f,  -0.0407834987472850f,  -0.0194455114022427f},
   { -0.0302662498055197f,   0.0117329235652005f,   0.0038684090326590f},{  0.0558761313776331f,   0.0067145373910423f,  -0.0015488157109162f},{ -0.1243427555270798f,   0.0015179327583175f,   0.0032072079789859f},{ -0.0936823330516258f,   0.0109190981635910f,   0.0036205693571377f},{ -0.0127715127274860f,  -0.0344539903740765f,  -0.0104630188340944f},
   {  0.0070117140452966f,  -0.0281132369293120f,   0.0228072593430102f},{ -0.0226115511858959f,   0.0043733251983844f,   0.0043102739549783f},{  0.0018911355361533f,   0.0845351979624326f,   0.0141561718710923f},{  0.0305249843762182f,   0.0277709297129695f,   0.0040195346950594f},{  0.0067738128821132f,  -0.0044357644524136f,   0.0029881574060460f},
   {  0.0034028040858149f,  -0.0369399594991793f,  -0.0169759360608329f},{  0.0052563412782020f,   0.0384633608141698f,   0.0213573409936361f},{  0.0006006659568606f,   0.0161766476062039f,   0.0344254056939299f},{  0.0016930084536306f,   0.0010904275026876f,   0.0227573447212519f},{  0.0098543654806004f,   0.0373200800772435f,  -0.0108041631836274f},
   { -0.0201590475785547f,  -0.0785316718693653f,  -0.0536978023018262f},{ -0.0076785582863813f,  -0.0132422854667097f,   0.0937593149875252f},{  0.0045188016362160f,  -0.0183616005218024f,   0.0547798195878042f},{ -0.1242648319366686f,   0.0490319522029835f,   0.0042837296917839f},{ -0.0357108039750234f,  -0.0517374943333142f,  -0.0312162402452195f},
   {  0.0078464594427437f,  -0.0008145963011384f,   0.0541603952323975f},{ -0.0094657164992457f,  -0.0661666444054628f,   0.0404673502849504f},{  0.0328105011173001F,  -0.0122912300390235f,   0.0428391662303270f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},
   {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f},{  0.0000000000000000F,   0.0000000000000000f,   0.0000000000000000f},
   { -0.0001368164888846f,   0.0232401807723581f,   0.0207226740769555f},{ -0.0002423373172664f,   0.0326049607152065f,   0.0296872453069135f},{ -0.0014337198911789f,  -0.0455637745930330f,  -0.0611739151307608f},{ -0.0008096959676501f,   0.0546342343366909f,  -0.0169733631253706f},{ -0.0013953581545321f,  -0.0443947069006354f,   0.0074833124344444f},
   {  0.0011597583218658f,  -0.1004982848365091f,  -0.0411993988710541f},{ -0.0024130198484237f,  -0.1685623230288115f,   0.0639562148673489f},{  0.0029073405929740f,  -0.0185334490155272f,   0.0332463888281611f},{ -0.0509071824988697f,   0.0059913333396392f,  -0.0337124645236007f},{ -0.0233519223838580f,  -0.0125073546775613f,   0.0599074812282579f},
   { -0.0052405231435697f,  -0.0298728614674352f,   0.0782862951571924f},{ -0.0005360716638209f,  -0.0079601594423688f,   0.1213271962037408f},{  0.0068800945679657f,  -0.0421185930574114f,  -0.0303315322356225f},{ -0.0034356800313293f,  -0.0559671983630490f,   0.0517451729833808f},{ -0.0108098230342791f,  -0.0105941204200705f,  -0.1077749951978444f},
   {  0.0261732731275462f,  -0.1096263368400422f,   0.0209823016713532f},{ -0.0898239322209047f,  -0.0279347078832631f,   0.0142284454585352f},{  0.0070653154802060f,   0.0408942347686611f,  -0.0020538221113453f},{ -0.0147077695301774f,  -0.0471665530176544f,  -0.0351983149113531f},{  0.0747940843538686f,  -0.0765532561800574f,  -0.0833025519065967f},
   {  0.0734932034757195f,   0.0534443931173804f,   0.1006177037022632f},{  0.0047518299312226f,   0.0868896326457910f,  -0.0619816819785192f},{  0.0147133557806426f,   0.0244546888317241f,   0.0018177778223264f},{  0.0109962204103300f,  -0.0009823765076172f,  -0.0397712211348803f},{  0.0401823335700293f,  -0.0944097961310596f,  -0.0341186398405547f},
   { -0.0311080686667933f,   0.0728799693336261f,   0.0773859834723180f},{  0.0248007929159763f,   0.0187272516920362f,   0.0183060482948429f},{ -0.1737159639078159f,  -0.0073853831068341f,  -0.0026139164721684f},{ -0.1580064870957911f,  -0.0249510277623451f,  -0.0349613069550071f},{ -0.0344658152475588f,   0.0445931244860165f,   0.0710696880692111f},
   {  0.0146831942607718f,  -0.0000777764249686f,   0.0599545079131562f},{ -0.0441534743845674f,   0.0092393340655499f,   0.0045131491464767f},{  0.0052278525812686f,  -0.0261238139686939f,  -0.1408228889809304f},{  0.0531701704809461f,   0.0122330960161288f,   0.0013056886532703f},{  0.0533619932803846f,  -0.0682758097225352f,  -0.0751190159869954f},
   {  0.0516933036243253f,   0.0654304059735938f,   0.1035886128508228f},{  0.0505054447673921f,   0.0103145167540330f,  -0.0373294704387210f},{ -0.0085680045358933f,   0.0300350284177021f,  -0.0826840870918659f},{  0.0551820910758245f,   0.0205545953072884f,  -0.0211900797026046f},{  0.0103468344244740f,   0.0012768666285756f,  -0.1163485516603363f},
   { -0.0080119201889377f,  -0.0296030696873693f,   0.0742803797321274f},{ -0.0002399691572129f,   0.0437069255787086f,  -0.1282604355214554f},{  0.0116782679175341f,   0.0094906426330049f,  -0.0842625213533097f},{ -0.1269809165684088f,  -0.0110337835567744f,  -0.0104220641513504f},{ -0.0226788087638120f,   0.0250660110045886f,  -0.0302869025531730f},
   {  0.0316731589278578f,   0.1158164198697262f,  -0.0254830683197895f},{ -0.0322155656424892f,  -0.0201240458072208f,   0.0384792420339658f},{ -0.1061367536703386F,   0.0199454096471621f,  -0.0134180835541692f},
   {  0.0049858466329993f,   0.0222162571247936f,   0.0172961551884638f},{  0.0063502756824799f,   0.0246820907739061f,   0.0278218265006656f},{  0.0116912518895865f,  -0.0239561566971809f,  -0.0278856765684447f},{ -0.0290648985126094f,   0.0148194548565285f,  -0.0372581926387451f},{ -0.0241549542552163f,  -0.0508264034075080f,   0.0079763179190291f},
   {  0.0543013748465446f,  -0.0897079903850730f,  -0.0023980310969099f},{ -0.0295786407641633f,  -0.1393217889087827f,   0.0570079428864135f},{ -0.0153078869278131f,   0.0007541630758846f,   0.0472513536341939f},{ -0.0282131648983734f,  -0.0048259089702794f,  -0.0428198851461327f},{ -0.0277957925547299f,   0.0132058538096279f,   0.0696501423025665f},
   {  0.0061572285582271f,  -0.0342782200180827f,   0.0381273253559259f},{ -0.0509125357646918f,   0.0189960090474901f,   0.0969361997398579f},{ -0.0152866210906159f,  -0.0358373908079299f,  -0.0354667158155136f},{ -0.0359289446865843f,  -0.0682925956906589f,   0.0649237710760851f},{ -0.0540479320972360f,  -0.0039855558064664f,  -0.1132758443328468f},
   {  0.0007333138123304f,  -0.1217628829366244f,   0.0673292658976139f},{ -0.0682611071136750f,  -0.0379005754620568f,   0.0340022933802771f},{  0.0495260444538625f,   0.0382193766924596f,  -0.0029015372948433f},{ -0.0528958846728720f,  -0.1035256521136809f,  -0.0324723879304535f},{  0.0390681953805293f,  -0.1350257723075495f,  -0.0567712796679846f},
   {  0.0448187388911920f,   0.0825745506785203f,   0.0689642215884632f},{  0.0478972373403252f,   0.0405457163053595f,  -0.1347214615835374f},{  0.0038834354021706f,   0.0399405541666413f,   0.0260556949592408f},{  0.0256011483229791f,  -0.0038412900901328f,  -0.0647017154832635f},{  0.0594881085474790f,  -0.1258047956087135f,  -0.0526919946836672f},
   { -0.1029551254621883f,   0.0125306381620986f,   0.0468469905271784f},{  0.0067027510469407f,   0.0241484645997281f,   0.0101740196475075f},{ -0.1488457447826893f,  -0.0245874803506092f,  -0.0111368443610231f},{ -0.1067742639503145f,  -0.0218437991032387f,  -0.0398174381736926f},{ -0.0451035540865506f,   0.0020884835553162f,  -0.0124707474342650f},
   { -0.0445584831395583f,  -0.1056675434340900f,   0.0515205886773528f},{ -0.0007160753598354f,  -0.0009414327327956f,   0.0087456819085773f},{ -0.0778971324762477f,   0.0505083405696896f,   0.0219014077416678f},{  0.0787270237746279f,  -0.0145109368223383f,   0.0120259436199137f},{ -0.1175122940713590f,   0.0442230859262232f,   0.0493718063783444f},
   {  0.0471578877108116f,  -0.0150411830067684f,  -0.0203027327523843f},{  0.0373572528465674f,  -0.0086890166804173f,   0.0144029646575098f},{  0.0052178689232544f,  -0.0218474178937120f,  -0.0136323205430774f},{  0.0031304683334959f,   0.0003774193315086f,  -0.0303116384414557f},{ -0.0390014166537354f,   0.0072460810057766f,   0.0180673716901817f},
   {  0.0857848469414476f,  -0.0127524391616081f,   0.0248591789543069f},{ -0.0624658983708424f,   0.0442981526472099f,   0.0278356905783883f},{ -0.0192082931782696f,   0.0185502588534293f,   0.0375506250483071f},{ -0.0652416411872602f,   0.0181536264420017f,  -0.0571606256287628f},{ -0.1393135721089655f,  -0.0212210790648169f,  -0.0110396401170880f},
   {  0.0382570187064949f,  -0.0178816611537617f,   0.0480250689476961f},{ -0.0845293353299269f,   0.0884339374628125f,  -0.0297149915777926f},{  0.0059425605594414F,  -0.0303965575591123f,   0.0162107903054284f},
   { -0.0051874180335852f,   0.0224889998267075f,   0.0171707618688228f},{ -0.0065229070081101f,   0.0250166604765259f,   0.0276737849033834f},{ -0.0129804165091704f,  -0.0236591175141772f,  -0.0278276215231594f},{  0.0268909843963141f,   0.0147097093946223f,  -0.0383108117174754f},{  0.0222493882867939f,  -0.0513952466604380f,   0.0085292012055103f},
   { -0.0524289882286977f,  -0.0891087301091963f,  -0.0024502065244441f},{  0.0244577882053125f,  -0.1395986554982739f,   0.0563027023413597f},{  0.0191658760634564f,   0.0013685159820560f,   0.0450282029242117f},{ -0.0397744647310473f,  -0.0085768317002705f,  -0.0265013371805419f},{ -0.0005113731106546f,   0.0111789734903202f,   0.0788488150586089f},
   { -0.0135683638780869f,  -0.0343910146160346f,   0.0439646015986993f},{  0.0469686264701633f,   0.0189201352506066f,   0.0963073354149865f},{  0.0224055796375023f,  -0.0365543934374054f,  -0.0340904848131898f},{  0.0331291129602089f,  -0.0679005048949217f,   0.0637314504216689f},{  0.0361662709407654f,  -0.0018406401920281f,  -0.1148454747077258f},
   {  0.0397933117612867f,  -0.1235583944333673f,   0.0695503346623147f},{ -0.0761963931198458f,  -0.0324100472653334f,   0.0282099992608851f},{ -0.0425087835977652f,   0.0344417857641968f,  -0.0008164566008091f},{  0.0329088545552968f,  -0.1053657163237654f,  -0.0384324844475376f},{  0.0604343045073883f,  -0.1228076456405824f,  -0.0520881528517749f},
   {  0.0538512988393499f,   0.0954279541808367f,   0.0786974853770323f},{ -0.0432741032208588f,   0.0440021715985628f,  -0.1341225320628210f},{  0.0267580911137599f,   0.0376187264262578f,   0.0216122455707867f},{  0.0044653777661212f,  -0.0070023586062524f,  -0.0694713366620601f},{  0.0005438085913374f,  -0.1298447073255705f,  -0.0603714288744883f},
   {  0.0502660685299028f,   0.0176708977581765f,   0.0540492247429842f},{  0.0455100024423251f,   0.0069666582669446f,   0.0176858842995094f},{ -0.1457757902108863f,   0.0048407498794179f,   0.0084364238852935f},{ -0.1390209416657301f,  -0.0167438517677933f,   0.0228084060063888f},{ -0.0045175803716395f,  -0.0023047026587212f,   0.0086060570288260f},
   {  0.0551311215077838f,  -0.1066912789557001f,   0.0522442821371420f},{ -0.0449569383665607f,  -0.0291475103908163f,  -0.0203520496882568f},{  0.0846137275741315f,   0.0475657654283615f,   0.0203451249269918f},{  0.0129716709904574f,   0.0006412472167513f,  -0.0072826087000496f},{  0.1269995247824645f,   0.0476217885042819f,   0.0145509905514179f},
   { -0.0436876288030397f,  -0.0187912742686791f,  -0.0459193016934189f},{ -0.0571169292525750f,  -0.0128670491867979f,   0.0096595743859339f},{ -0.0009001232720386f,  -0.0227353851473753f,  -0.0274403352921690f},{ -0.0025634231597986f,   0.0105174966643676f,   0.0064894904351833f},{  0.0487269892823173f,   0.0075061608954864f,   0.0254179957517174f},
   { -0.1109186618140400f,  -0.0243806040772225f,   0.0386606988645888f},{  0.0655699753099159f,   0.0325355436734633f,   0.0254979213067726f},{  0.0322256234636118f,   0.0287505334330312f,   0.0399303588830028f},{ -0.1153600482678239f,  -0.0265009229209791f,   0.0514054147882812f},{  0.0909955441144301f,  -0.0123196002452228f,   0.0114586524100066f},
   { -0.0164063718607380f,  -0.0188852442572344f,   0.0483389816810279f},{  0.0535412039206942f,   0.0625989344576953f,  -0.0048350030148152f},{ -0.0307881932887897F,  -0.0145771464155287f,   0.0004161816823082f},
   {  0.0033621465876321f,   0.0192195280199897f,   0.0561376094988231f},{  0.0020372087633765f,   0.0187813212823853f,   0.0805617969665977f},{  0.0335185139353976f,  -0.0110035629625740f,  -0.0020300324068658f},{ -0.0586591606578176f,   0.0332150741990360f,  -0.0756431519757963f},{ -0.0538464536099953f,  -0.0443881373095849f,  -0.0281651580903256f},
   {  0.0993854660730695f,  -0.0744495466033086f,   0.0192096478142755f},{ -0.0483649411659947f,  -0.1001095515965725f,   0.0040788850091500f},{ -0.0287523884964409f,  -0.0006438033684861f,   0.0428998123903374f},{ -0.0375047745046774f,  -0.0121267508486925f,  -0.0178855196800096f},{ -0.0591830442215388f,   0.0338701314745133f,   0.0448478502549322f},
   {  0.0096921214161820f,   0.0055863435780861f,   0.0262139049667444f},{ -0.0731546755414061f,  -0.0073940566343314f,   0.0733360330072764f},{ -0.0174675968299812f,   0.0048632768238189f,  -0.0622834300672474f},{ -0.0566308745681191f,  -0.0256105905849816f,   0.0197302146278079f},{ -0.0794223574162432f,   0.0195510344529560f,  -0.0799086679083420f},
   { -0.0057000821826558f,  -0.0644065713153521f,   0.0597194850220469f},{ -0.0448064205395410f,  -0.0180498788857386f,   0.0281543551702137f},{  0.0730504616208964f,   0.0611528856894410f,   0.0561826197739575f},{ -0.0899872988200222f,  -0.0684661312114485f,  -0.0348740703766106f},{  0.0349398402386239f,  -0.0690270206955244f,  -0.0153371987567780f},
   {  0.0259603431395201f,   0.0424381089020326f,   0.0089512293797491f},{  0.0792816936791006f,   0.0293446522729291f,   0.0115481810679288f},{  0.0002325054272613f,   0.0243978995974263f,  -0.0344219446410975f},{ -0.0066455351419155f,   0.0606652486429617f,  -0.0281590081160038f},{  0.0786607963237096f,  -0.0583139880972288f,  -0.0380715410748983f},
   { -0.1428686974562176f,   0.0322534602462082f,   0.0002260149626683f},{  0.0013822572507568f,   0.0285550287666524f,   0.0472575887421685f},{ -0.1095404402772267f,  -0.0216821915466996f,  -0.0289353278777937f},{ -0.0500969180378880f,   0.0110572423076606f,  -0.0576970515011050f},{ -0.0778136433805972f,  -0.0053689759415595f,   0.0101144128231816f},
   { -0.0714587547742456f,   0.0169074953840708f,   0.0367523007252974f},{  0.0038531133135196f,  -0.0131169359094337f,   0.0270475405139548f},{ -0.1273759084271172f,   0.0637450175970180f,  -0.0473779636012912f},{  0.0914453344770631f,  -0.0420792991642484f,   0.0038537934884187f},{ -0.2270802960972585f,  -0.0020982864640928f,  -0.0354688909022540f},
   {  0.0358172155136591f,   0.0786019847616445f,   0.0798629770342326f},{  0.0972272615254472f,  -0.0593480904428672f,  -0.0458478781175742f},{  0.0471220626750814f,   0.0052309975936875f,   0.0352252486663823f},{ -0.0132835096859655f,  -0.0093800189045516f,  -0.0637031874805218f},{ -0.0957177319967947f,   0.0402345221473280f,  -0.0584470705684536f},
   {  0.1625561116754198f,   0.1637556515762346f,   0.1300423675109025f},{ -0.0870386226175299f,   0.0039530541377513f,  -0.0842802583711556f},{ -0.0112030108167983f,   0.0588906078947920f,   0.0151889262334967f},{  0.0415678907012232f,   0.0785247574686181f,  -0.1016864539366103f},{ -0.0986668796973299f,  -0.2034872934988316f,   0.0263175489963955f},
   {  0.0737775260139553f,   0.0286824281687031f,   0.0979051192851992f},{ -0.0972344796566516f,   0.1857803427637518f,  -0.1284785404209501f},{ -0.0708644833160033F,  -0.0357731701894861f,   0.0328651442441627f},
   { -0.0044158892251742f,   0.0226064932757219f,   0.0356272144526163f},{ -0.0060518270995168f,   0.0253594760818291f,   0.0492503787919484f},{ -0.0160705787194560f,  -0.0311970485893981f,  -0.0419006734319266f},{  0.0290807012100164f,   0.0419272368480302f,  -0.0322739946692603f},{  0.0191217040882057f,  -0.0430143104946897f,  -0.0038437189356745f},
   { -0.0412331140443104f,  -0.0890177295133635f,  -0.0284810872583712f},{  0.0298510253177606f,  -0.1379768459016400f,   0.0492013168201981f},{  0.0231457796663313f,  -0.0044072775877420f,   0.0425568011505363f},{ -0.0703784349348701f,  -0.0116765630342860f,  -0.0263877627206827f},{ -0.0043890751297102f,   0.0062798587779267f,   0.0552854008444092f},
   {  0.0012743940569658f,  -0.0206324887383900f,   0.0701581915772977f},{  0.0406422228826378f,   0.0012453351407899f,   0.1042943015547462f},{  0.0237697427908416f,  -0.0191136226236460f,  -0.0410218844695875f},{  0.0265537857982342f,  -0.0436778192943193f,   0.0406684277187710f},{  0.0196688858071156f,   0.0165942366919907f,  -0.0977383448511303f},
   {  0.0279802833145334f,  -0.0811400622895184f,   0.0411620149724915f},{ -0.0684406047708643f,  -0.0187311353203657f,   0.0222990578288711f},{ -0.0261007909024182f,   0.0530025753225423f,   0.0134512580402081f},{  0.0211700780867945f,  -0.0443508632896364f,  -0.0105708222581393f},{  0.0561063877857742f,  -0.0738175774041945f,  -0.0617376863915413f},
   {  0.0671540865592971f,   0.0382643371623934f,   0.0803097531090495f},{ -0.0319442345315519f,   0.0537097486820340f,  -0.0475514484856820f},{  0.0149024028186632f,   0.0221328053264368f,  -0.0314013972511545f},{  0.0163030013789026f,   0.0183225294414856f,  -0.0391136786107451f},{  0.0130749569853161f,  -0.0950413049720318f,  -0.0405845476070467f},
   {  0.0495318851186664f,   0.0483693193713454f,   0.0876097626090357f},{  0.0305271211808248f,  -0.0027184632563530f,  -0.0041848647434628f},{ -0.1184462666716033f,   0.0037389126949651f,  -0.0052889362883804f},{ -0.1163427112643011f,  -0.0128876115168798f,  -0.0094371709079350f},{  0.0104000823675594f,  -0.0069310634732086f,   0.0641425878601762f},
   {  0.0688052467044898f,  -0.0068021354245624f,   0.0674234286251091f},{ -0.0608141977753522f,  -0.0207842295783904f,  -0.0272453020757244f},{  0.0507266249935072f,   0.0593076451883797f,  -0.1023697270416287f},{  0.0087342885391924f,  -0.0006112675214111f,  -0.0185613793901389f},{  0.0941053991641855f,   0.0072782163391847f,  -0.0732925164272103f},
   { -0.0145237375485877f,   0.0510391021287404f,   0.1035424653650884f},{ -0.0530442708454420f,  -0.0355570298755934f,  -0.0428174274445034f},{ -0.0061660579256629f,   0.0039231693099033f,  -0.0527870140298085f},{ -0.0105696341365712f,   0.0094317867015782f,  -0.0076780263921626f},{  0.0454313926020931f,  -0.0013204482889716f,  -0.0913631901381205f},
   { -0.0635649612799111f,   0.0489352829142262f,   0.1306667026043715f},{ -0.0024904793173187f,   0.0233141023727116f,  -0.1120528773217245f},{ -0.0261858525432542f,   0.0162439634427920f,  -0.0845973398256913f},{ -0.0312753937495405f,  -0.0300611842025616f,   0.0580586231766944f},{  0.0243278875663662f,  -0.1022708478779782f,   0.0185677579838318f},
   { -0.0028650424132072f,   0.0593244766916632f,   0.0117211385519690f},{  0.0415877147098134f,   0.0965382778953956f,  -0.0341550917158726f},{ -0.0984324861044122F,   0.0010711192333461f,  -0.0286392669588449f},
   {  0.0042649669239468f,   0.0226819570690049f,   0.0356305746692069f},{  0.0056428361443046f,   0.0252540107466015f,   0.0493674506447196f},{  0.0143452675380301f,  -0.0305794813165605f,  -0.0420443759789409f},{ -0.0290758172868358f,   0.0423448821185711f,  -0.0319848446591291f},{ -0.0219036709424937f,  -0.0434812674512872f,  -0.0034235956866370f},
   {  0.0450650612391809f,  -0.0892296638670666f,  -0.0280533349818267f},{ -0.0333497132104163f,  -0.1375397597973879f,   0.0478197768564369f},{ -0.0155790208061369f,  -0.0056002658017168f,   0.0428161257509356f},{ -0.0480846396340677f,   0.0003202496068525f,  -0.0303659845363447f},{ -0.0499539076261481f,   0.0122380626450681f,   0.0521688146599022f},
   { -0.0120577967308546f,  -0.0205936176722173f,   0.0681634386315493f},{ -0.0417606781850907f,  -0.0001295905035218f,   0.1040641641144049f},{ -0.0150487646398197f,  -0.0179223768198053f,  -0.0402402098115852f},{ -0.0282201222659562f,  -0.0432986096986126f,   0.0392230605150385f},{ -0.0375585901371631f,   0.0158306004225279f,  -0.0970699969867043f},
   {  0.0090382917050595f,  -0.0828388339432975f,   0.0418660128662706f},{ -0.0616748555612934f,  -0.0214634826895085f,   0.0243404159692416f},{  0.0334429150733798f,   0.0526549906888202f,   0.0116512526692547f},{ -0.0430677361528048f,  -0.0503518643724211f,  -0.0110849966711339f},{  0.0542412042340461f,  -0.0663561711689983f,  -0.0592359235127701f},
   {  0.0435151106261533f,   0.0512081446785416f,   0.0821502323264084f},{  0.0410905772823743f,   0.0558451399922059f,  -0.0494668720829758f},{  0.0049882000672638f,   0.0252222366513567f,  -0.0228592424153430f},{  0.0030631682367771f,   0.0187267689800317f,  -0.0383996924595948f},{  0.0385739979588886f,  -0.0918122759103256f,  -0.0351203042186468f},
   { -0.0853116136676783f,   0.0389892642488257f,   0.0655696871603960f},{  0.0017446178602163f,   0.0315499946338010f,   0.0415380713769567f},{ -0.1205635829211249f,  -0.0251458789616728f,  -0.0045267160258945f},{ -0.0821369436790610f,  -0.0085637178113243f,  -0.0529348817559550f},{ -0.0504304371067886f,   0.0044542822466372f,   0.0528654285943485f},
   { -0.0574626167048945f,  -0.0056331678169990f,   0.0713616285189267f},{ -0.0177939140303150f,  -0.0091460646870898f,   0.0225306670744446f},{ -0.0451519894409841f,   0.0576890156906068f,  -0.1001219140839520f},{  0.0674339333036615f,  -0.0065326756806001f,   0.0075701044586915f},{ -0.0833578262170527f,  -0.0040109383949930f,  -0.0519303785888334f},
   {  0.0274237186828663f,   0.0488607975974370f,   0.1067478605119881f},{  0.0542298421310544f,  -0.0318372835416671f,  -0.0595403378996253f},{  0.0144964937053228f,   0.0016445165799992f,  -0.0370280477151545f},{  0.0129264761905530f,   0.0054926033704437f,  -0.0258196445619852f},{ -0.0444243092044767f,  -0.0027586063335249f,  -0.0939999560974476f},
   {  0.0607200180752377f,   0.0496753149530536f,   0.0974972911152922f},{  0.0286462357663827f,   0.0138607540452220f,  -0.1290719177718590f},{  0.0192788774829738f,   0.0313774406489193f,  -0.0629906485939608f},{ -0.0322739243987940f,   0.0210640608889786f,  -0.0854274250779297f},{ -0.0329236345915047f,  -0.0912299114406064f,  -0.0188442245376359f},
   {  0.0408604107438452f,   0.0560790384200245f,   0.0095994795641823f},{ -0.0592707829829434f,   0.1083047092880084f,  -0.0520444376867268f},{ -0.0569338783158867F,  -0.0245409645628211f,   0.0233480881321282f},
   { -0.0031022896131124f,   0.0196098494762424f,   0.0560547724517979f},{ -0.0017465135905864f,   0.0193136464732929f,   0.0802440634398070f},{ -0.0337633189534511f,  -0.0109428388512225f,  -0.0027725343108371f},{  0.0572570871354395f,   0.0329499412654664f,  -0.0742170912146819f},{  0.0503052089213722f,  -0.0445507463645026f,  -0.0284171642929966f},
   { -0.0941268186419787f,  -0.0741724073322211f,   0.0191396868246376f},{  0.0436459301704696f,  -0.1006825841464243f,   0.0040165640165772f},{  0.0346204615461045f,  -0.0000515584910727f,   0.0420814853695824f},{ -0.0713303123764315f,  -0.0244769186742698f,  -0.0198213215804445f},{  0.0129329892082768f,   0.0274752051838893f,   0.0425284594021952f},
   { -0.0184636062951056f,   0.0056415005638247f,   0.0274277388681731f},{  0.0697523172211912f,  -0.0039911365532153f,   0.0760031663437157f},{  0.0241442882111500f,   0.0041163154746342f,  -0.0624837825872823f},{  0.0623660849461219f,  -0.0248924923668982f,   0.0210498341470417f},{  0.0690685354790842f,   0.0226251115272259f,  -0.0811876918648795f},
   {  0.0358570675043969f,  -0.0635578689307676f,   0.0566145493349657f},{ -0.0639051646935820f,  -0.0107379247115040f,   0.0360710611156711f},{ -0.0752135397843427f,   0.0606408025246840f,   0.0554262089089468f},{  0.0734109385939045f,  -0.0643653778125062f,  -0.0342173033371590f},{  0.0522731667495794f,  -0.0602123136406899f,  -0.0135088510988533f},
   {  0.0659260307784073f,   0.0411556777481195f,   0.0110920718061936f},{ -0.0690458289678559f,   0.0352922203289236f,   0.0144771366403460f},{  0.0217546518307209f,   0.0186803364854000f,  -0.0504760076661835f},{  0.0347381813945673f,   0.0632758833101982f,  -0.0380337631499642f},{ -0.0301847395126980f,  -0.0561933943399211f,  -0.0513404445125764f},
   {  0.0984292546350510f,   0.0428653769840154f,   0.0388561381332071f},{  0.0629855269620011f,  -0.0122219389521312f,  -0.0272163818609146f},{ -0.0989173722815690f,   0.0118279107327934f,   0.0130235334980761f},{ -0.1175406383885125f,  -0.0190452620020960f,   0.0226000341036613f},{  0.0455918502224602f,  -0.0261067537640885f,   0.0350169694844015f},
   {  0.0742176937955905f,   0.0192553382949220f,   0.0390360059081877f},{ -0.0879726839473884f,  -0.0354633191188174f,  -0.0410255830872845f},{  0.1342136955180978f,   0.0628348138875575f,  -0.0595456254820699f},{ -0.0442087768925092f,  -0.0013675883225308f,  -0.0090558158283532f},{  0.1909354117983600f,   0.0133230157909482f,  -0.0528752739899462f},
   { -0.0482134176137005f,   0.0702623810868417f,   0.0745508991905902f},{ -0.1295086338933387f,  -0.0755225391006513f,  -0.0114467989480715f},{ -0.0353314792823982f,   0.0194312155127806f,  -0.0063334643362576f},{ -0.0352369636831704f,  -0.0196282572002284f,   0.0628292008516285f},{  0.0612836779730426f,   0.0544049274985092f,  -0.0325639939912470f},
   { -0.1622635563771677f,   0.1490945915417891f,   0.1846959008875488f},{  0.1058178727161102f,   0.0046564839092712f,  -0.0500677948214608f},{  0.0471891688441724f,   0.0414739067676966f,  -0.0562366359869473f},{  0.0129926726500851f,  -0.0612545406056729f,   0.0509194952112694f},{  0.1149405727229454f,  -0.2342380340933163f,   0.0703701780881572f},
   { -0.0353345934913894f,   0.0373352513394297f,   0.1020272968459911f},{  0.0968071167798253f,   0.1503752699095710f,  -0.1093473023731827f},{ -0.1341246489513878F,  -0.0058482302706481f,  -0.0208722982758480f},
   {  0.0094185251340132f,   0.0509056617038068f,   0.0787771393275292f},{ -0.0100605200927906f,  -0.0256668862110783f,   0.0476861315450301f},{  0.0417983108986764f,   0.0309705013686908f,  -0.1110164035400374f},{ -0.0009269040013433f,   0.0312429615514643f,  -0.0321931438913483f},{  0.0377008420344422f,  -0.0826880444431911f,  -0.0064530102518421f},
   { -0.0344391925082932f,  -0.0248911128994454f,  -0.0982391912528020f},{  0.0027619054004492f,  -0.1135245246637647f,   0.0362239935843593f},{  0.1661334890778781f,   0.0368485995629573f,  -0.0410523005238095f},{ -0.1986174439934730f,  -0.0233768889840935f,   0.0767517106428885f},{  0.1559880295034645f,   0.0621092528199431f,  -0.1619595774137802f},
   {  0.0461354059038698f,   0.0459560441377227f,   0.0564206773499792f},{  0.0892494041230200f,   0.0257386430143210f,  -0.0284064678543517f},{  0.0379753295833651f,   0.0193644969068264f,  -0.0031069050672720f},{ -0.1037664122229295f,   0.0139827902204833f,  -0.0894211431731624f},{  0.0664578010189120f,   0.0200617518998286f,  -0.0557567755532518f},
   {  0.0992291359873993f,   0.0484714428461439f,   0.0092045314431639f},{ -0.0433477527838042f,   0.0196789824076766f,   0.0544559499155846f},{  0.0165235020087679f,   0.0313576789522292f,   0.0622509189492973f},{  0.0627087327564631f,   0.0187517400538742f,   0.0702610277245365f},{ -0.0139899035557315f,   0.0247774536790947f,   0.0301103459830505f},
   {  0.0150337528130584f,  -0.0324300993555746f,  -0.0731675437057051f},{  0.1175283421367162f,  -0.0788988627579075f,   0.0009458621067538f},{ -0.1070227202113571f,   0.0253187984538474f,  -0.1103649191395334f},{ -0.0083714081452125f,  -0.0350949907454365f,  -0.2253326403034928f},{ -0.0094990911730631f,  -0.0569390998556077f,  -0.0416004507717626f},
   {  0.0646705926406516f,   0.0483690269638854f,   0.1248605573739567f},{  0.0091518609072079f,  -0.0468283395562221f,   0.0371810566576254f},{ -0.0116383051184994f,   0.0348226562965649f,  -0.0933029839645103f},{  0.0355169681037431f,   0.0402926859970091f,  -0.0776106564813754f},{ -0.0044547057114094f,  -0.0134825060355539f,  -0.1754560077514264f},
   { -0.0961936581356625f,   0.0902046294952409f,   0.0863459703809328f},{  0.0087245095516248f,   0.0259013510589530f,  -0.0684808697329450f},{ -0.0588977616061897f,   0.1114756620097421f,   0.1021514217136825f},{ -0.0278569648982302f,   0.0769992262736132f,   0.0082610990725654f},{ -0.0966877052695732f,  -0.0714923534296618f,   0.0419472994246478f},
   { -0.0612869818093643f,   0.0851543436690565f,  -0.0541935148501545f},{  0.0662941736019395f,  -0.0736870085181040f,   0.1354474224629695f},{  0.1351597666193732f,  -0.0906179593131535f,   0.0282634781068017f},{ -0.0503117874664159f,  -0.0410445128854333f,   0.1482480466977139f},{  0.0904999016163590f,  -0.1621426143140554f,  -0.0101047486510881f},
   { -0.0063083001910544f,  -0.0151718750237898f,   0.0502373969381209f},{  0.0184051382232475f,  -0.1125637761211230f,   0.0287585414379656f},{ -0.0411904553612397f,  -0.0276335599672453f,  -0.0001756227749125f},{  0.0818331367843424f,  -0.1263742184768974f,   0.0816824740089370f},{ -0.0157823333697006f,   0.0448944245736312f,   0.0238160436992506f},
   { -0.0450617786922739f,  -0.2155879966248330f,  -0.0529001478555206f},{  0.0367563213403269f,  -0.0056660179594023f,  -0.0084998477507946f},{  0.0042719966958269F,   0.1137155614543980f,  -0.0569179497361625f},
   { -0.0024301591341384f,   0.0226592267639778f,   0.0571175905738965f},{ -0.0030599288059243f,   0.0529920263697353f,   0.0594577497217781f},{ -0.0028846056482076f,   0.0073097861521873f,  -0.1073974073744677f},{  0.0179273936056792f,   0.0199523947692588f,  -0.0367386031327183f},{  0.0258012547292246f,  -0.1077465143164613f,   0.0035218617898695f},
   { -0.0254298984342922f,  -0.0977576996361737f,  -0.1250649206037383f},{  0.0045157820021929f,  -0.1766443406536679f,   0.0524251132025686f},{  0.0223229320421923f,  -0.0040023417778821f,  -0.0239640508370824f},{ -0.1093440303713099f,  -0.0234614553152212f,  -0.0136897810562732f},{  0.0114851683728969f,   0.0602023536146616f,   0.0076551730783055f},
   { -0.0069725826852723f,  -0.0057991993282911f,   0.0847686105223965f},{  0.0265587646323746f,  -0.0481183466404794f,   0.0740346146017605f},{  0.0442880302882493f,   0.0752412920658470f,   0.0141790473937038f},{  0.0140871422719134f,   0.0768667249382798f,   0.0750541297253770f},{  0.0147615391363579f,   0.0147096897288076f,   0.0048666525575182f},
   {  0.0305196639286941f,  -0.0483720853732421f,  -0.0614006577118357f},{ -0.0940055912006487f,  -0.0171326916477136f,  -0.0121377238547065f},{ -0.0255158132330017f,  -0.1090516787730330f,  -0.0000702907461075f},{  0.0212094600796908f,   0.0557824795431352f,  -0.0341875069256409f},{  0.0365661654321548f,   0.0420886355348633f,   0.0093782733376051f},
   {  0.0803516756066428f,  -0.0390819021696691f,  -0.0270206090127210f},{  0.0130968916522694f,  -0.0670118053843212f,  -0.0260467220503442f},{ -0.0056263900164822f,   0.0091502391666660f,   0.0807996386443035f},{  0.0546668439806621f,  -0.0839957625442870f,   0.0163536629552683f},{  0.0232912663367326f,   0.0876444652272173f,   0.0029892095637604f},
   {  0.0551683205382726f,   0.0095397000010382f,  -0.0316498025985409f},{ -0.0139985031111778f,  -0.0257235529249669f,  -0.0140249647582837f},{ -0.0056483432902573f,   0.0102079254091029f,  -0.0180021117060876f},{ -0.0020086144122606f,   0.0246832332268320f,  -0.0544828989559471f},{ -0.0211975211889038f,  -0.0160754424459804f,   0.0836513887893741f},
   { -0.0066503479310873f,   0.0455251864892269f,  -0.0249222054099994f},{ -0.0597603092184801f,   0.0105118951164642f,  -0.0378137023861158f},{  0.0338304402302913f,  -0.0283535245691906f,  -0.1431761661199311f},{  0.0438837359995886f,  -0.0007985504822706f,  -0.0984751491117502f},{  0.0448302101423135f,   0.0096745424128943f,   0.0694982500529243f},
   { -0.0885344069865761f,  -0.0416158791145121f,   0.0911936114030391f},{ -0.0458216829391083f,   0.0218570169990557f,  -0.0890355986193875f},{  0.0733300562077823f,   0.0279911192670324f,   0.0218565619272458f},{ -0.0200618117491553f,   0.0242152608863023f,   0.0511372776568194f},{ -0.0358046974596011f,  -0.0580250788756368f,   0.0223423331818734f},
   {  0.0681054061821576f,  -0.0391328156849665f,  -0.0477858635066282f},{  0.0614239236582429f,   0.0478567795701319f,  -0.0895226947781848f},{ -0.0509792697065980f,   0.0315892708893163f,  -0.0791333916718704f},{  0.0173874075660119f,   0.0342056557382253f,   0.0447966821508565f},{  0.0159015529660651f,  -0.1288319284899879f,   0.0194563412794763f},
   {  0.0527210462714268f,   0.0456372541433660f,   0.0364125888512417f},{ -0.0094037729733605f,  -0.0625963264175264f,   0.0511712484115363f},{ -0.0186780148050475F,   0.0476826849303110f,  -0.0100293981897721f},
   { -0.0023489105180148f,   0.1505260691032852f,   0.1192511163874416f},{  0.0081675103020128f,  -0.2126761014587914f,  -0.0095870318638318f},{  0.0015253441370456f,   0.0361824830532542f,  -0.0899608028998474f},{  0.0045459364639216f,   0.0293863249773847f,  -0.0940398702426766f},{ -0.0116591255718290f,  -0.0145999741585198f,   0.0169732775442375f},
   {  0.0348107941595751f,   0.0060257260962894f,  -0.0836919327282469f},{  0.0153185037995618f,  -0.0282850453304948f,   0.0384406279166581f},{ -0.0149431339857793f,   0.0493063737565046f,  -0.0046690991774245f},{ -0.0657403540837251f,   0.0036775002800854f,  -0.0325208865111561f},{ -0.0998307989774996f,  -0.0013490548115618f,   0.0300473696834607f},
   { -0.0051242244063402f,   0.0315783775440683f,   0.0857326534674723f},{ -0.0308256746846345f,  -0.0239075843099745f,  -0.0654854774334114f},{ -0.0358839817706271f,  -0.0647001384651309f,   0.0359453350970037f},{ -0.0036554159310631f,  -0.1826269351905696f,  -0.0448510426314330f},{ -0.0651016154266701f,  -0.0849980960052993f,   0.1066830694827664f},
   { -0.0079047560892486f,   0.0537280714696912f,   0.0215306911921493f},{ -0.0976974522462051f,   0.0399119298503844f,  -0.0114582344744505f},{  0.0404717979864253f,   0.0542256478637494f,   0.0458715556568323f},{ -0.0195125056248303f,   0.0324097586748541f,  -0.0608554545147910f},{  0.0318499434814679f,   0.0283378295179242f,   0.0224343370920803f},
   { -0.0213301610118391f,   0.0333941744896610f,  -0.0089554423971678f},{  0.0010599709062993f,  -0.0442718830632174f,  -0.0219578705992335f},{  0.0017349461673692f,  -0.0010619511781594f,   0.0268447131042148f},{ -0.0532754557062631f,  -0.0217717019048135f,   0.1109387659109793f},{ -0.0213665217270050f,   0.0709730823253690f,   0.0189285083321904f},
   {  0.0108103249272054f,  -0.0069450999554624f,  -0.0875269410649751f},{ -0.0687401829372853f,   0.0026437156100687f,  -0.0248999868227614f},{ -0.0322826355667622f,   0.0121944437553468f,   0.0349295909852812f},{  0.0506476280418190f,  -0.0239163267657481f,   0.0721263712904738f},{  0.0449340360685349f,   0.0774683244329087f,  -0.0408193175093004f},
   {  0.0106967598951134f,   0.0014842638350095f,  -0.0126408248371463f},{ -0.0239766721345669f,  -0.0226451052556885f,   0.0368183285316604f},{ -0.0643641458967964f,  -0.0496764117160534f,   0.0943065706050859f},{ -0.0192552726178955f,  -0.0345734337018090f,   0.0835760964101818f},{ -0.0746831023309902f,   0.0164181879413728f,  -0.0756895427704253f},
   {  0.0131701805741604f,   0.0103663973134661f,  -0.0500616526421417f},{ -0.0341719421656088f,  -0.0018058821161844f,   0.0561545879196186f},{ -0.0464239136521616f,   0.0524666498879475f,  -0.0520282381975725f},{ -0.1032563699824565f,   0.0005475133102640f,  -0.0573948234805594f},{  0.0825483093852631f,   0.0478973001141800f,  -0.0435321565791768f},
   { -0.0275556730817089f,   0.0090603506610559f,   0.0395008267962944f},{  0.0171699790930769f,   0.0149585172533204f,   0.0674241003264741f},{ -0.0189211595612437f,  -0.0080751060920994f,   0.0424390847150191f},{  0.0013745369848121f,   0.0261574498095451f,  -0.0448308490666946f},{  0.0210490788439164f,   0.0291107568759238f,  -0.0373514217007590f},
   { -0.0169216196745444f,   0.0647552518711663f,  -0.0091863965645129f},{  0.0919767866827361f,   0.0341950961372544f,  -0.0363770862012231f},{ -0.0209208010112409F,  -0.0344912947392117f,   0.0277676991343056f},
   { -0.0004229607753940f,   0.0228113648396080f,   0.0572759504385423f},{ -0.0004550268015933f,   0.0675363512210815f,   0.0616381604485755f},{ -0.0006168277799981f,   0.0091564032362107f,  -0.1113881127436258f},{  0.0010730071022660f,   0.0022371621324054f,  -0.0393741913410718f},{  0.0002057968471533f,  -0.1233882683817974f,   0.0029926039558100f},
   {  0.0012564389798382f,  -0.1044077620099141f,  -0.1322132048212006f},{ -0.0021527029132305f,  -0.1875930572855875f,   0.0497295661301473f},{  0.0055369429362298f,  -0.0285068346240735f,  -0.0325988212241025f},{ -0.0871092658273303f,  -0.0181634021563051f,  -0.0204657598290034f},{ -0.0375342007854803f,   0.0489873018045587f,   0.0118675061311959f},
   { -0.0072607497310510f,  -0.0204893985202601f,   0.0766596602698954f},{  0.0000987267292463f,  -0.0656108186230819f,   0.0736878846206015f},{  0.0089585009103782f,   0.0882781373624517f,   0.0344094384960447f},{  0.0010418550967994f,   0.1136446433649183f,   0.0957334093473509f},{ -0.0115068550897687f,   0.0171601973143512f,   0.0191337402538453f},
   {  0.0259711388396304f,  -0.0605832197928442f,  -0.0672888361989321f},{ -0.0938100861031209f,  -0.0261951182309796f,  -0.0280310340018916f},{  0.0047041857556555f,  -0.1224128538034678f,  -0.0240545077758264f},{ -0.0099979239974571f,   0.0347249298161191f,  -0.0338899676506862f},{  0.0561426182079830f,   0.0507508291357770f,   0.0091471541408269f},
   {  0.0588087449463945f,  -0.0437526585277482f,  -0.0104291354666552f},{  0.0079448437875386f,  -0.0802574466631946f,  -0.0310987816409649f},{ -0.0000749006975772f,   0.0393615192729484f,   0.0993949008975702f},{  0.0045499290209088f,  -0.0457679019955176f,   0.0433673328831510f},{  0.0015831392867173f,   0.1092231791112637f,   0.0105739696452616f},
   {  0.0091241684043588f,  -0.0305082603594352f,  -0.0397834987395734f},{ -0.0204922212095520f,  -0.0197712904819145f,  -0.0176928788448553f},{ -0.0123138094101489f,   0.0017201076600967f,   0.0123162133263423f},{  0.0026501345040953f,   0.0310816697855800f,  -0.0270576879101528f},{ -0.0040159094258405f,  -0.0290129053233985f,   0.0787110891606582f},
   { -0.0037162131357737f,   0.0336116467799521f,  -0.0383787572700313f},{ -0.0523968595653946f,  -0.0036761018283822f,  -0.0314757111917552f},{ -0.0095932993229535f,  -0.0426053163544017f,  -0.1480372579501519f},{  0.0558931957359005f,  -0.0205322860971816f,  -0.0870291226701226f},{ -0.0035556549269795f,   0.0525915077339980f,   0.0937863320051131f},
   { -0.0336508517334253f,  -0.0591927773512065f,   0.0555299273775681f},{ -0.0355154680293365f,   0.0021794170161422f,  -0.1194800578699053f},{  0.0211423998038619f,   0.0360851685384372f,   0.0354337433330330f},{ -0.0519575268657374f,   0.0330313641511816f,   0.0281261146428100f},{ -0.0016053457665237f,  -0.0468895621952506f,  -0.0067784814939223f},
   {  0.0199734711176250f,  -0.0437205340636005f,  -0.0561264831338889f},{  0.0524081991791827f,   0.0493254809349765f,  -0.0911990053212698f},{ -0.0632148369339395f,   0.0306558033822135f,  -0.0771114995605943f},{ -0.0212942408132029f,   0.0463203917175262f,   0.0184335287410084f},{  0.0043831542967765f,  -0.0868491782097432f,   0.0342432159630250f},
   {  0.0154888216320998f,   0.0701672050559483f,   0.0507387108097534f},{ -0.0009062133644934f,  -0.0870033224215499f,   0.0186343117461002f},{ -0.0165709018072533F,   0.0474390607174973f,   0.0269582050130885f},
   {  0.0006531847481293f,   0.0308241396368176f,   0.0682631705414590f},{ -0.0036785602220233f,   0.0197416799801421f,   0.0649845005581508f},{  0.0131708106877910f,   0.0271852321631771f,  -0.1040225208597636f},{  0.0067746946017603f,   0.0252159414021273f,  -0.0390109332926913f},{  0.0311090462889957f,  -0.0986476902490679f,  -0.0023788323244193f},
   { -0.0463778887190831f,  -0.0582428805135095f,  -0.1170651026707270f},{  0.0033657228987671f,  -0.1542507202334221f,   0.0507492757395630f},{  0.0958410278323044f,   0.0407179994540172f,  -0.0378930053086548f},{ -0.1575758685647908f,  -0.0251543802734306f,   0.0259965541986944f},{  0.0947075682065101f,   0.0749802956265949f,  -0.0565336166734323f},
   {  0.0291290478885285f,   0.0270084042284122f,   0.0999005933390002f},{  0.0638520518582375f,  -0.0268760626939358f,   0.0228053621843248f},{  0.0432131310952074f,   0.0398643459895725f,  -0.0119334177507100f},{ -0.0321599740566447f,   0.0118785691839397f,   0.0217250694054443f},{  0.0370828256632469f,   0.0029063151197589f,  -0.0013195639648964f},
   {  0.0672446872090125f,   0.0305282274206108f,  -0.0480630341045166f},{ -0.0798420554826025f,   0.0139414938804600f,   0.0214994494785080f},{ -0.0254929318783208f,  -0.0537030808823323f,   0.0571812986058724f},{  0.0289283910270515f,   0.0626378154017585f,  -0.0216286092127360f},{  0.0294412206629356f,   0.0396225630086006f,   0.0486509774842112f},
   {  0.0477035068707828f,  -0.0477629030079093f,  -0.0916968951006236f},{  0.0494796805757037f,  -0.0693503664346281f,  -0.0224612226802655f},{ -0.0403445369271933f,  -0.0223559053399859f,   0.0123657674345481f},{  0.0273211297827488f,  -0.1175478444313928f,  -0.0691673730821236f},{  0.0121313721778983f,   0.0310256496922251f,  -0.0093974492453944f},
   {  0.0347867932368414f,   0.0357066571565022f,  -0.0025803387448818f},{ -0.0140035816299262f,  -0.0288744189098280f,  -0.0024283850000672f},{  0.0084178889843981f,   0.0089973295768855f,  -0.0726486418283759f},{  0.0263953620198351f,   0.0351115097332889f,  -0.0942832720484960f},{  0.0120176944348607f,  -0.0272631193550731f,  -0.0012694645287969f},
   { -0.0941893077926871f,   0.0584866967799523f,   0.0209418504572715f},{ -0.0225612290134669f,   0.0162013699051265f,  -0.0722549962161526f},{ -0.0168597522123497f,   0.0441398012268403f,  -0.0434011638890617f},{  0.0110399544547088f,   0.0567864084444588f,  -0.0743426402122620f},{ -0.0034004731120527f,  -0.0510767616684412f,   0.0391036815418318f},
   { -0.0563335188734361f,   0.0385536709603070f,   0.0680266470047927f},{ -0.0064849329848038f,   0.0092295285388747f,   0.0128574406805399f},{  0.1184533498733871f,  -0.0206314374466298f,   0.0262772198352537f},{ -0.0350110256384894f,  -0.0003947453849149f,   0.1006793780728942f},{  0.0457520316170372f,  -0.0687766404426823f,   0.0894441455859597f},
   {  0.0265243772412930f,  -0.0441824651602001f,  -0.0408505561572190f},{  0.0398941133571767f,  -0.0179404196899229f,  -0.0580953331980114f},{ -0.0701050168208340f,  -0.0177690208151881f,  -0.0602744251905561f},{  0.0412943606225828f,  -0.0447618693559791f,   0.1003715660143957f},{ -0.0238584640222405f,  -0.0911230669398094f,   0.0163779008936765f},
   {  0.0326911113399036f,  -0.0979242963980099f,  -0.0211028588185590f},{ -0.0076248529178479f,   0.0152990706538748f,   0.0777453158349145f},{  0.0057156160100668F,   0.0725991568678451f,  -0.0796460290421924f},
   { -0.0037524120732820f,   0.1098530118018766f,   0.1158777519940483f},{  0.0088753993372849f,  -0.1276459175131623f,  -0.0099949266893521f},{  0.0252170059205964f,   0.0262665249294876f,  -0.1097280848491476f},{ -0.0021441997054787f,   0.0195390182701114f,  -0.0636263712461799f},{  0.0232381817047553f,  -0.0432181847593331f,   0.0125044836931055f},
   { -0.0414925686027807f,   0.0011616000224206f,  -0.0897769009778546f},{ -0.0091840626332368f,  -0.0673920298852101f,   0.0591723892801956f},{  0.1150664063236011f,  -0.0144280964543067f,  -0.0538295513321365f},{ -0.1753454188952597f,  -0.0047898155198391f,   0.0504928846852808f},{  0.1291655330231288f,   0.0090049109654515f,  -0.1157347646873706f},
   {  0.0296335182604719f,   0.0170817635504968f,   0.0609486185664353f},{  0.0584718100352107f,  -0.0000199614570914f,  -0.0415282345920676f},{  0.0513663750911626f,   0.0052815681907865f,  -0.0014433467745432f},{ -0.0304202583892382f,  -0.0044236497530445f,  -0.0606637287317102f},{  0.0639817566441102f,   0.0077945416053608f,   0.0127575688662806f},
   {  0.0764196337816518f,   0.0296867325317151f,  -0.0136677041714960f},{ -0.0769419829172206f,   0.0135364707135931f,   0.0297660986741166f},{ -0.0055421743994619f,   0.0010824689391213f,   0.0538012601477043f},{  0.0485242306503967f,   0.0083842545156082f,   0.0085816176013276f},{  0.0092548409858549f,  -0.0363035694614841f,  -0.0031697058120921f},
   { -0.0040441109609150f,   0.0350761872632327f,  -0.0675486965017467f},{  0.0574209282892937f,  -0.0730849266710947f,  -0.0186634677857674f},{ -0.0567784322460704f,   0.0693285927177638f,  -0.0312433152103624f},{  0.0358776058010840f,   0.1170301000731277f,  -0.0692831231147767f},{ -0.0068808747065823f,   0.0162377870114621f,  -0.0009500377972553f},
   {  0.0374920565180316f,   0.0163937984438978f,   0.0200712552895210f},{ -0.0215751127592507f,  -0.0552692338754477f,  -0.0133410212174560f},{ -0.0117630471458789f,   0.0482367412959478f,  -0.0727358455974842f},{  0.0289032867323280f,   0.0300804513350323f,  -0.0688099049473075f},{ -0.0035592482633092f,   0.0248328401371937f,  -0.1127388112028573f},
   { -0.0899273638747456f,   0.0636732686856983f,   0.0551715570011066f},{  0.0000685329499054f,   0.0059787166259845f,  -0.0491844487155034f},{ -0.0086258685954497f,   0.0074936883651295f,   0.0982626048520019f},{ -0.0303313792202093f,   0.0164126269557306f,  -0.0112292227116897f},{ -0.0669998732697680f,   0.0283152402075559f,   0.0329698725433588f},
   { -0.0551547787621618f,   0.0360417951768199f,  -0.0373829597570167f},{  0.0387322366357235f,  -0.1110673537049673f,   0.1108006105317925f},{  0.0682784921644337f,  -0.0648853097569475f,   0.0215413868695602f},{ -0.0490619982641067f,  -0.0101588081331847f,   0.1309116970073063f},{  0.0046995218712029f,  -0.1811001065604002f,   0.0469904569055481f},
   { -0.0118018129434102f,   0.0179303280619644f,   0.0090243196855649f},{  0.0547960288110535f,  -0.0134368973866755f,   0.0281471484008051f},{ -0.0363205429332304f,   0.0247399837862751f,   0.0406314480337385f},{  0.0596286563577940f,  -0.0954345436978845f,   0.1116695801865325f},{  0.0257919730800752f,   0.0619228404668928f,  -0.0432718568349179f},
   { -0.0471754730399786f,  -0.0937750153438761f,  -0.0295620023994930f},{  0.0213498787057492f,  -0.0390659854341213f,  -0.0266403717830068f},{  0.0015281048196092F,   0.1216052131651739f,  -0.0523322475826873f},
   {  0.0018541796563367f,   0.0225162822004330f,   0.0572227034732017f},{  0.0024414741382196f,   0.0527630650889177f,   0.0593355440081128f},{  0.0020340989415008f,   0.0069235911701344f,  -0.1069462138133322f},{ -0.0177086957246257f,   0.0202374445590443f,  -0.0368505846547232f},{ -0.0291238429695246f,  -0.1077404043349544f,   0.0033081317923997f},
   {  0.0316497711533930f,  -0.0969246601607692f,  -0.1251497832716617f},{ -0.0115849828678228f,  -0.1750667650788924f,   0.0518043266014998f},{ -0.0164805072134298f,  -0.0057734588755439f,  -0.0229425871506631f},{ -0.0635087214152051f,  -0.0207280841393161f,  -0.0226203323992712f},{ -0.0890231711489133f,   0.0570084293930306f,   0.0040610192455970f},
   { -0.0096661443341204f,  -0.0064497385010327f,   0.0848985490890405f},{ -0.0306461556412154f,  -0.0492473672377222f,   0.0716104532550295f},{ -0.0289472639277350f,   0.0760807767869294f,   0.0146320286811683f},{ -0.0043556081768023f,   0.0735579753072974f,   0.0743783493860364f},{ -0.0386957954243322f,   0.0132576161082708f,   0.0024294497020271f},
   {  0.0181158524222236f,  -0.0455447224353906f,  -0.0575233892058390f},{ -0.0936408056899160f,  -0.0230894212766472f,  -0.0324560784775637f},{  0.0300296896409898f,  -0.1031289195010984f,   0.0012119685495302f},{ -0.0440689358510327f,   0.0484734271943797f,  -0.0408070655044728f},{  0.0757259715095062f,   0.0467172670712783f,   0.0285533395302341f},
   {  0.0364048792653425f,  -0.0215684121028391f,  -0.0130950880708505f},{  0.0031656753146040f,  -0.0659241318290074f,  -0.0215449932708377f},{  0.0084267254663480f,   0.0127184185125506f,   0.0799107175337234f},{ -0.0438683336645527f,  -0.0773174446590721f,   0.0076754970592213f},{ -0.0174503741213096f,   0.0944244434012037f,  -0.0131526358466244f},
   { -0.0414805195140158f,  -0.0007180743756956f,  -0.0301779801581160f},{ -0.0408102083887299f,   0.0078166072599460f,  -0.0118550716877488f},{ -0.0114554954226643f,  -0.0168839007920127f,   0.0365936374714003f},{ -0.0033199492328687f,   0.0235720918671706f,  -0.0089196579048795f},{  0.0186998058629304f,  -0.0134593465331778f,   0.0938406494641188f},
   { -0.0006541871857857f,   0.0536492981208695f,  -0.0323207533932500f},{ -0.0413743939431423f,  -0.0011396455981195f,  -0.0199435277754146f},{ -0.0637043527095667f,  -0.0230187551590275f,  -0.1509722857305150f},{  0.0546995336830871f,   0.0012200603485169f,  -0.0588146614725579f},{ -0.0668307177546568f,   0.0127400413031761f,   0.0618314152945614f},
   {  0.0283156574451629f,  -0.0432674130969567f,   0.0660154813528768f},{ -0.0328459823786930f,   0.0313120288906286f,  -0.1385482627315202f},{ -0.0575371949831272f,   0.0252867607543632f,   0.0460522962177215f},{ -0.0566160841807064f,   0.0298374368872141f,  -0.0161273128800808f},{  0.0272731409009143f,  -0.0544190027922906f,   0.0214997551734775f},
   { -0.0232344658883072f,  -0.0245560355339500f,  -0.0675917277832844f},{  0.0514820088009690f,   0.0439591255448361f,  -0.0997052726978703f},{ -0.0765330121505219f,   0.0328664475405266f,  -0.0712618297842723f},{  0.0121265220476647f,   0.0533386957792825f,  -0.0174891836773935f},{  0.0097448005171528f,  -0.1153740369725096f,   0.0018387104498174f},
   { -0.0393797860110772f,   0.0481279721515524f,   0.0260030764458652f},{  0.0145761713702069f,  -0.0599217655936172f,   0.0458329719062503f},{ -0.0109323516147689F,   0.0321430019204940f,   0.0471508705582121f},
   {  0.0027881784153239f,   0.1100287019772043f,   0.1154888867796723f},{ -0.0088499664302080f,  -0.1290218335536700f,  -0.0105274944331632f},{ -0.0206434725718569f,   0.0292274004123801f,  -0.1046443339480099f},{  0.0025084693599140f,   0.0206946518319182f,  -0.0657416202333900f},{ -0.0233168827282866f,  -0.0425389205402470f,   0.0122454395766402f},
   {  0.0492099073139582f,   0.0031022520781525f,  -0.0867850087116083f},{  0.0072531092797894f,  -0.0643934116353800f,   0.0563493530167650f},{ -0.0877927536732813f,  -0.0172494026008711f,  -0.0432835240846462f},{ -0.0233364779347902f,  -0.0083251694541752f,   0.0217332006585744f},{ -0.2088405151044357f,   0.0099010014114369f,  -0.1078945560319281f},
   { -0.0415568889746435f,   0.0195364967759235f,   0.0652384716790902f},{ -0.0590050574823553f,  -0.0088443264563031f,  -0.0519923573413022f},{ -0.0492831412234816f,   0.0048681915316141f,  -0.0012255928180397f},{  0.0213641259946921f,  -0.0064058114289980f,  -0.0665215873270888f},{ -0.0956144939469909f,  -0.0024030095144895f,   0.0093429580074148f},
   { -0.0274750195076521f,   0.0202272473468595f,  -0.0030956133975292f},{ -0.0865583487221809f,   0.0061110900266089f,  -0.0217004901370835f},{  0.0325773746475485f,   0.0124200090155621f,   0.0629885652088716f},{ -0.0345792169671264f,  -0.0036808523018789f,  -0.0161909567067839f},{  0.0073157542218647f,  -0.0102242222172611f,   0.0678425224802513f},
   { -0.0047262057116262f,   0.0543984736506630f,  -0.0070641847078483f},{ -0.0526577304865513f,  -0.0679476405372417f,  -0.0024129310829063f},{  0.0343653889926696f,   0.0707113516759805f,  -0.0342099194696995f},{ -0.0581690556552226f,   0.1138435964337175f,  -0.0815948737481593f},{ -0.0165891875698155f,   0.0537619616495919f,  -0.0393054705408188f},
   {  0.0017269645199441f,  -0.0142295239148651f,   0.0052908913398316f},{ -0.0645035225158819f,   0.0135616636272681f,   0.0311169232391430f},{ -0.0139344265580704f,  -0.0025376976264479f,   0.0430707990589905f},{  0.0447054686775609f,  -0.0236794503856156f,   0.1121498444302312f},{  0.0195704302233191f,   0.0424772751339300f,  -0.0584100351551497f},
   {  0.0628207845948355f,   0.0688376709805862f,   0.0392603013358550f},{ -0.0301002904901016f,  -0.0309105676777931f,   0.0476650969200476f},{ -0.0008605715686602f,   0.0043018714510880f,   0.0722191610458304f},{ -0.0528942750474434f,  -0.0502642336101982f,   0.0525087775178987f},{ -0.0214968493031115f,   0.0164773845664400f,   0.0009103127062750f},
   {  0.0079840456574380f,   0.0545355313840719f,  -0.1153955381783609f},{ -0.0505069953568194f,  -0.0403848949274045f,  -0.0082027433016446f},{ -0.0300064165427575f,  -0.0731229922930380f,   0.1169927614850843f},{ -0.0866626003869254f,   0.0103836867400154f,  -0.1190903985055650f},{  0.0038647829877368f,  -0.1583650636650904f,   0.0525335842304666f},
   {  0.0328284126665618f,   0.0672993144453573f,  -0.0205940571831695f},{  0.0148695525363930f,   0.0585381577892015f,   0.0336432617761937f},{ -0.0509349425926153f,  -0.0328289648773250f,   0.0294389523639201f},{  0.0571874030959503f,   0.0294976560344442f,  -0.0639036517782086f},{  0.0048622016984306f,   0.1048715631181578f,  -0.1115425291046860f},
   {  0.0320650137397907f,  -0.0411504826780214f,  -0.0375292780504596f},{  0.0144080621608698f,   0.0017843865322560f,  -0.0349990019179625f},{  0.0316455256472480F,  -0.1048288246805724f,   0.0355580422737015f},
   { -0.0095536716691756f,   0.0531020974665806f,   0.0796987069149330f},{  0.0080149656804901f,  -0.0296441153839633f,   0.0458787082924260f},{ -0.0387756141035434f,   0.0287700884269453f,  -0.1107452019748151f},{  0.0031021046598200f,   0.0294433390033329f,  -0.0314153221311245f},{ -0.0378740150122951f,  -0.0828510151081119f,  -0.0045342135984835f},
   {  0.0440597671730744f,  -0.0243185425169762f,  -0.0972253683568282f},{ -0.0096530783549999f,  -0.1117079400546499f,   0.0335468640483023f},{ -0.1407643728069632f,   0.0285626445392650f,  -0.0432307799271676f},{ -0.0168128242801413f,  -0.0282527747992701f,   0.0543060171224958f},{ -0.2523195589087069f,   0.0536023186625122f,  -0.1716311782485930f},
   { -0.0665939845770146f,   0.0409997183096802f,   0.0529567248153038f},{ -0.0880713592218237f,   0.0255328233900823f,  -0.0353775264850366f},{ -0.0362711277040556f,   0.0268767424790019f,  -0.0012310280670820f},{  0.0918410980865927f,   0.0175638276984341f,  -0.0869889690399290f},{ -0.0937126370661685f,   0.0227319098667395f,  -0.0614439547431446f},
   { -0.0596293160096281f,   0.0481517919809026f,   0.0199557478657269f},{ -0.0748410163917650f,   0.0074962286891620f,  -0.0056179096908004f},{ -0.0047530185898440f,   0.0315695553018100f,   0.0604965768310553f},{ -0.0471263225642833f,   0.0025485223532058f,   0.0516965467630773f},{  0.0157616594774474f,   0.0427639143643852f,   0.0762800651606474f},
   { -0.0165529236032454f,   0.0074809514146790f,  -0.0143918401645114f},{ -0.1118197121826609f,  -0.0763108211173085f,   0.0132535724721272f},{  0.0862719632161223f,   0.0393994808814436f,  -0.1043439299649590f},{ -0.0082809997080497f,  -0.0120489120402812f,  -0.2184812416082388f},{ -0.0123961703203089f,  -0.0195219745175281f,  -0.0819334659947354f},
   { -0.0250937432991989f,   0.0102380967074381f,   0.1168619109527852f},{ -0.0652947580351869f,   0.0477559985461982f,   0.0735358431289441f},{  0.0149887259207794f,  -0.0397465419035043f,   0.0095635087050222f},{  0.0637778326815826f,  -0.0164755328217044f,   0.1110062322067134f},{  0.0294297908884359f,  -0.0097484889309469f,  -0.1192452345824692f},
   {  0.0752439154408667f,   0.1150701225030397f,   0.0666751494739149f},{ -0.0403501722452827f,  -0.0305042260498080f,   0.0699722668228172f},{  0.0526264346587258f,   0.1259277580656070f,   0.0778164245420742f},{ -0.0518332736641196f,  -0.0075877572977463f,   0.0408051509478233f},{  0.0014966350657622f,  -0.0628968486077331f,   0.0040793962457050f},
   {  0.0053850468653300f,   0.1085583157107777f,  -0.1549148980086378f},{ -0.0849900067542875f,   0.0086754884904591f,  -0.0279077344006187f},{ -0.1022473476534577f,  -0.1127629743922095f,   0.1323660867053895f},{ -0.0874146655083196f,  -0.0030499653942250f,  -0.1336110844561497f},{ -0.1008949495222568f,  -0.1667747995421718f,  -0.0443411440026440f},
   {  0.0410775518155897f,   0.0567346513346705f,   0.0036176494879661f},{  0.0586274204201477f,  -0.0055044605284914f,   0.0127081058182888f},{ -0.0458987850507605f,  -0.1442605212087723f,   0.0557853705235584f},{  0.0610525203833025f,   0.0340872190043208f,  -0.0849940038357822f},{  0.0373959297671937f,   0.0874751839146111f,  -0.0383710551975169f},
   {  0.0213766660105032f,  -0.1573321259564374f,  -0.0612347009561310f},{  0.0016277731373677f,   0.0221742669719144f,  -0.0293423593351189f},{  0.0310438566009307F,  -0.1661232017990471f,   0.0103710575567406f},
   { -0.0006971458035921f,   0.0317615849664534f,   0.0686851638179690f},{  0.0015826755494375f,   0.0190688502246013f,   0.0633184574902399f},{ -0.0119253133919494f,   0.0268891715705025f,  -0.1028910487759891f},{ -0.0047952352383652f,   0.0240832892087255f,  -0.0374093337891946f},{ -0.0328648810333392f,  -0.0999718590961524f,  -0.0019012152955026f},
   {  0.0529452002037655f,  -0.0572766166947556f,  -0.1162226279944052f},{ -0.0105166853626029f,  -0.1547480780886726f,   0.0476509625252720f},{ -0.0757861011098439f,   0.0414352926935689f,  -0.0269674869109297f},{ -0.0342078480828186f,  -0.0317099395919684f,  -0.0052022928938816f},{ -0.1784387247942893f,   0.0703257760059480f,  -0.0682264960119116f},
   { -0.0419691099738290f,   0.0265830411186286f,   0.1021882349382034f},{ -0.0648630147370262f,  -0.0286045304825312f,   0.0173330769495874f},{ -0.0378587631867148f,   0.0422376356636782f,  -0.0152212768281610f},{  0.0284813609876678f,   0.0050436899046348f,   0.0075233886732615f},{ -0.0661509911253231f,   0.0014035743837707f,  -0.0112814480322863f},
   { -0.0214145667223794f,   0.0350418447638058f,  -0.0314049218944649f},{ -0.0889763727270918f,   0.0009902613079352f,  -0.0343579974248095f},{  0.0371234896714428f,  -0.0501356373863155f,   0.0661205051094681f},{ -0.0381067896227120f,   0.0505698165919366f,  -0.0341404319873208f},{  0.0609750019014089f,   0.0657023101408070f,   0.0988760484487050f},
   {  0.0111749514090551f,  -0.0151312012197026f,  -0.0642720407256911f},{ -0.0401683187405580f,  -0.0617520576917917f,  -0.0121137019892688f},{  0.0274348080084258f,  -0.0173246823028850f,   0.0061210529639353f},{ -0.0497265615183746f,  -0.1155037570822393f,  -0.0999720674254883f},{ -0.0355655417356967f,   0.0491455749589652f,  -0.0601889671157613f},
   { -0.0106961705070724f,   0.0124271458253312f,  -0.0018862766161967f},{ -0.0503203261663850f,   0.0400181925258797f,   0.0159627758865999f},{  0.0026733358473218f,  -0.0263317957884259f,   0.0529754807489429f},{  0.0409763138716879f,   0.0112812381090620f,   0.0552993783945821f},{  0.0118553351635188f,  -0.0237318329366479f,   0.0361049802632890f},
   {  0.0715798730815493f,   0.0705080030347856f,  -0.0003644984190742f},{ -0.0270185044959925f,   0.0025740526029825f,   0.0329001181955319f},{ -0.0032164445195267f,   0.0552404729060439f,  -0.0561835206031899f},{  0.0262826941485296f,   0.0028437120793657f,  -0.0077791856609667f},{ -0.0417900516999187f,  -0.0650957026996383f,   0.0166267627026480f},
   {  0.0192037831081423f,   0.0448020200300257f,   0.0091031923543453f},{ -0.0373588657580150f,   0.0429083716423786f,  -0.0978330253999774f},{ -0.0866835437664188f,  -0.0280940803233451f,   0.1022748487288399f},{ -0.0860504937130488f,   0.0060850318749948f,  -0.0949914828098911f},{ -0.0356477487872822f,  -0.0763906857543168f,   0.0878521584207991f},
   { -0.0021388641042265f,  -0.0234153321042132f,  -0.0986955377603407f},{  0.0720797465201452f,   0.0009521389108010f,  -0.0879273294945106f},{ -0.0783016785826793f,  -0.0316953969016858f,  -0.0424525387651579f},{  0.0107237604230532f,   0.0483706269386998f,  -0.0895293053927851f},{  0.0230437426192679f,  -0.0608953956812839f,  -0.0491671162560321f},
   { -0.0430836072809803f,  -0.0743508614801154f,  -0.0469859979125700f},{  0.0459128378601692f,   0.0339016627965770f,   0.0698221956771904f},{ -0.0044801135706105F,  -0.0750014315971111f,   0.0447706214545882f},
   {  0.0022171124872356f,   0.1497318718824530f,   0.1192590529362737f},{ -0.0097582077753690f,  -0.2113944262610680f,  -0.0093583303664300f},{  0.0000741036796661f,   0.0364608527554655f,  -0.0892934415455951f},{ -0.0047891884457064f,   0.0295792567242368f,  -0.0947177113281818f},{  0.0117885209262754f,  -0.0142157154352249f,   0.0163015139790889f},
   { -0.0289977913042051f,   0.0055679019262416f,  -0.0813320165036560f},{ -0.0157044425330742f,  -0.0274762937306088f,   0.0398944259787507f},{  0.0394967890615898f,   0.0515270929356329f,  -0.0104934832926989f},{ -0.1184371880198222f,  -0.0010858057777388f,  -0.0252565722092910f},{  0.0177895958448085f,  -0.0039711245922639f,   0.0295828902844996f},
   { -0.0036540127541041f,   0.0333019564905181f,   0.0826872833123248f},{  0.0283562991396304f,  -0.0238988042055196f,  -0.0631261459726095f},{  0.0376501629210685f,  -0.0685707264877281f,   0.0357306783586996f},{ -0.0087282488544698f,  -0.1824488347317271f,  -0.0359229420630231f},{  0.0304122796398661f,  -0.0864737376301829f,   0.1045852836141153f},
   {  0.0707217032838348f,   0.0567087071554245f,   0.0147220011741709f},{ -0.0927036208843508f,   0.0388986664860059f,   0.0023620057747255f},{ -0.0132084954599027f,   0.0558192841689640f,   0.0467326516858274f},{  0.0279670103446874f,   0.0444279653120735f,  -0.0494370847492841f},{ -0.0044954158082817f,  -0.0071173169210201f,  -0.0161548422614428f},
   {  0.0269907569791747f,  -0.0039647276065691f,  -0.0399102686997471f},{ -0.0071131937043192f,  -0.0515007435870025f,  -0.0290314374710913f},{ -0.0168410289209574f,  -0.0020440540124056f,   0.0273213463670272f},{  0.0480321718243993f,  -0.0211018304714708f,   0.1176035688129424f},{ -0.0127984024783597f,   0.0619224960167994f,   0.0377968742932124f},
   {  0.0413614695450981f,   0.0066511123730784f,  -0.0849698678049944f},{ -0.0547847371267505f,  -0.0301097463032451f,  -0.0366488232097805f},{ -0.0154600450000944f,   0.0091735909654873f,  -0.0117403220515450f},{  0.0715675101164553f,  -0.0141749675865190f,   0.0046754456107335f},{ -0.0293649089509049f,   0.0725294775874766f,  -0.0574887104870045f},
   { -0.0444995122890360f,  -0.0012140190736537f,  -0.0001188133811599f},{ -0.0299000816732296f,   0.0100441470571687f,   0.0157285672747067f},{  0.0709510792485488f,  -0.0508716698420423f,   0.1040633196380097f},{ -0.0077794099871207f,  -0.0041161880824390f,   0.0308262233102037f},{ -0.0091547730227989f,   0.0159279125200796f,  -0.0701491801224388f},
   { -0.0845834706467214f,   0.0008130427621768f,  -0.0199466267451637f},{ -0.0173791587464527f,  -0.0363801594432417f,   0.1062389774661089f},{  0.0775299082150650f,   0.0527787356411512f,  -0.0870613481939350f},{ -0.0309942855344536f,   0.0118561831798177f,   0.0358274981109352f},{ -0.1117157178672375f,   0.0456217650437240f,  -0.0365622438176736f},
   {  0.0237718866278381f,  -0.0130422492982789f,   0.0592531593031067f},{  0.0129912317613335f,  -0.0198099088154062f,   0.0712560886817077f},{ -0.0260175289585083f,   0.0299262820001055f,   0.0425358681398663f},{  0.0289784490426231f,  -0.0207660244449551f,   0.0392357815036996f},{  0.0097554527232734f,   0.0179061319853299f,  -0.0067782300750432f},
   {  0.0233325103296537f,   0.0467629479605226f,  -0.0066157185537679f},{ -0.0682840435084412f,   0.0236146216604231f,  -0.0339119451793534f},{  0.0197279926167832F,   0.0390803301752556f,  -0.0237677623591611f},
   { -0.0004230060187780f,   0.1489827919474920f,   0.1198003329126474f},{ -0.0002516439984644f,  -0.2221578824224764f,  -0.0096042666411124f},{  0.0001649136347081f,   0.0388164499946714f,  -0.0840293434647192f},{ -0.0005054627844799f,   0.0444876452527909f,  -0.1001320038941678f},{ -0.0001495866926505f,  -0.0015380656174078f,   0.0179260733483713f},
   {  0.0018384437507324f,   0.0157696373968398f,  -0.0741894383054020f},{ -0.0018584372758718f,  -0.0172091028079865f,   0.0357618743618665f},{  0.0043054120775257f,   0.0443644636624072f,  -0.0072668873411559f},{ -0.0949670463644782f,   0.0017080509690975f,  -0.0389828948427269f},{ -0.0412725291388722f,  -0.0043674998490773f,   0.0513570730662387f},
   { -0.0089936834973973f,   0.0330501745497567f,   0.0864597905086147f},{ -0.0014718923405723f,  -0.0421224144615348f,  -0.0763923510410513f},{  0.0074557029819110f,  -0.0732189688392589f,   0.0429395071260858f},{  0.0094153732893758f,  -0.1873045426986537f,  -0.0332485664462074f},{ -0.0133257497692956f,  -0.1128066557523334f,   0.1214578698850544f},
   {  0.0236218042823251f,   0.0258376129166553f,   0.0240816601005674f},{ -0.0982121986886448f,   0.0410156728930930f,  -0.0048415714457169f},{  0.0058689726680010f,   0.0690422693221479f,   0.0378623305962422f},{  0.0015145035742716f,   0.0521740397730896f,  -0.0637771525613921f},{  0.0226333135246984f,   0.0160997184266600f,  -0.0154496022979971f},
   {  0.0132930083624412f,   0.0114580316574827f,  -0.0073874327353350f},{ -0.0043012494972410f,  -0.0385157426826453f,  -0.0255070137667046f},{ -0.0023165516604147f,  -0.0033966796803786f,   0.0385651725009183f},{  0.0059951586471814f,  -0.0443124498789704f,   0.1759190994146485f},{ -0.0107398977007683f,   0.0856280828596201f,   0.0479674495047825f},
   {  0.0227234392151018f,   0.0033293910609580f,  -0.1007797183564544f},{ -0.0626651858861016f,  -0.0137977506905350f,  -0.0377277201132020f},{ -0.0132103388691999f,   0.0095344406168223f,   0.0194388769444286f},{  0.0616187358519739f,  -0.0355622049647720f,   0.0437541281746480f},{  0.0113367117079081f,   0.1145439454554308f,  -0.0511293202012652f},
   { -0.0171491422257264f,  -0.0130323604675515f,  -0.0236417254786100f},{ -0.0528670050833238f,   0.0033256875949711f,   0.0313117360538674f},{ -0.0089737815117414f,  -0.1155704200072875f,   0.0916202585864858f},{  0.0188460709968045f,  -0.0202385415969969f,   0.0672803948321748f},{ -0.0256962892801973f,  -0.0049542695402112f,  -0.0880651974632173f},
   { -0.0371794152418365f,   0.0041792451348052f,  -0.0375368868343840f},{ -0.0351232561298518f,   0.0001417041879512f,   0.0898807463825902f},{  0.0275131945654699f,   0.0816376242912693f,  -0.0888243966603738f},{ -0.0740221581941609f,  -0.0033024803814591f,  -0.0094049431771214f},{ -0.0184144850146746f,   0.1235030936292854f,  -0.0937696064013919f},
   {  0.0004964002869312f,   0.0270688975707845f,   0.1072403530558442f},{  0.0350595869409954f,  -0.0173806964274338f,   0.0805864942516110f},{ -0.0429262521328584f,   0.0363459461665719f,   0.0553452108972317f},{ -0.0225351559514873f,  -0.0025128037571408f,  -0.0125886005660227f},{  0.0048370492312859f,   0.0207567047642789f,   0.0070125334932577f},
   {  0.0108435993503199f,   0.1054616258559986f,   0.0184428148820653f},{ -0.0087595177265644f,   0.1166228386594612f,  -0.0544018533978511f},{ -0.0037124571734652F,  -0.0132232762150678f,   0.0064078470518525f},
   { -0.0003937102338735f,   0.0124942285171711f,   0.0671283887238910f},{ -0.0003128829713253f,   0.0494222461905554f,   0.0655222386863463f},{ -0.0002298979667415f,   0.0344966823142808f,  -0.0950906290065589f},{  0.0001362884406464f,   0.0437680011628520f,  -0.0629088322023278f},{  0.0000268356600416f,  -0.0979588223339802f,  -0.0008468740368527f},
   {  0.0019432714292168f,  -0.0553873688617970f,  -0.1175760165860182f},{ -0.0020456576921560f,  -0.1391605053504565f,   0.0407795836742041f},{  0.0052556429361564f,  -0.0220940631907930f,  -0.0103372043930890f},{ -0.0931722576753591f,  -0.0260872160872093f,  -0.0342397296314048f},{ -0.0412514711998677f,   0.0645354476152775f,   0.0404495653649124f},
   { -0.0080963623840993f,  -0.0050780459337071f,   0.0966546065966049f},{ -0.0013447160775730f,  -0.0725797213025929f,   0.0068465748310747f},{  0.0076090054695470f,   0.0615339279345771f,   0.0451755524508118f},{  0.0037851186404104f,   0.1078198647975242f,   0.0339480693949523f},{ -0.0122977199175034f,  -0.0595584984381823f,   0.0547868661722745f},
   {  0.0263183614830577f,  -0.0838315462006680f,  -0.0337440298051771f},{ -0.0974623929692500f,  -0.0062321803037714f,  -0.0119456945804849f},{  0.0064144875607362f,  -0.0424496453043232f,   0.0387832281482581f},{ -0.0067932352024543f,   0.0553520500025617f,  -0.0392316375142655f},{  0.0431282810010413f,   0.0533357010629925f,   0.0343053723832435f},
   {  0.0407826543679580f,  -0.0285161424828014f,  -0.0445689640332619f},{  0.0010621112231842f,  -0.0752503498556105f,  -0.0375693937177616f},{ -0.0000667302456784f,   0.0157279950970717f,   0.0589657725824960f},{  0.0071302316355453f,  -0.0599889029174669f,   0.0378547627884088f},{ -0.0063967427305977f,   0.1698557848993637f,   0.0486553948491442f},
   {  0.0150293063273092f,  -0.0139594710160640f,  -0.0700783673983653f},{ -0.0397456533898783f,  -0.0252354178036721f,  -0.0289527123840724f},{ -0.0141449137397778f,   0.0104033313371957f,   0.0091104186005536f},{  0.0369905084144218f,  -0.0073505253579025f,   0.0057483539368639f},{  0.0051061542367418f,   0.0717648488996380f,   0.0102592072501522f},
   { -0.0113900237499680f,   0.0279213617320962f,  -0.0312514811047144f},{ -0.0408117084989013f,   0.0085364974187772f,   0.0001135719644041f},{ -0.0108321675214340f,  -0.1481026071183634f,  -0.0176315500433512f},{  0.0373739424547756f,  -0.0199703650886540f,  -0.0051111097610588f},{ -0.0100302863149729f,   0.0086788286212162f,   0.0032367656566578f},
   { -0.0357751268377230f,  -0.0557019142769005f,  -0.0164300423539156f},{ -0.0391800820085829f,   0.0170048247144617f,   0.0048287523776381f},{  0.0273283232108141f,   0.0875675348586743f,   0.0608668735703826f},{ -0.0785767029442369f,   0.0102990062944686f,  -0.0001699687577406f},{ -0.0149442084855664f,   0.0201161287073842f,   0.0589789453400626f},
   {  0.0134344053927486f,   0.0768174611598932f,   0.0251373631583080f},{  0.0495807041591001f,   0.0414274790457396f,  -0.0746213991273211f},{ -0.0546334579038151f,   0.0881561389992616f,  -0.0335536453351608f},{ -0.0116563159805941f,   0.0016922644607452f,   0.0008908798419186f},{  0.0117476704677198f,   0.0406847789818510f,   0.0500820712219103f},
   {  0.0127622806207219f,   0.1015535010402990f,   0.0314079426793313f},{ -0.0017524565469691f,   0.0323185627750651f,  -0.0012570642935758f},{ -0.0112231750500884F,   0.0010201400462705f,   0.0018256034036787f},
   {  0.0030425763365736f,   0.0129597315077657f,   0.0671284455712009f},{ -0.0024140099095750f,   0.0469022286208045f,   0.0665843289147456f},{  0.0017288054551322f,   0.0357443560059118f,  -0.0924452567419148f},{ -0.0053900302460124f,   0.0450873275824047f,  -0.0598403946564007f},{ -0.0147617405294411f,  -0.0982193146903271f,  -0.0029151407265758f},
   {  0.0326255739821899f,  -0.0510725890863642f,  -0.1136791361651610f},{ -0.0005160407611639f,  -0.1402461808084284f,   0.0386011265960186f},{ -0.0139320192233648f,  -0.0043185909264991f,   0.0024752063569507f},{ -0.0674278054057928f,  -0.0252087176017633f,  -0.0328672361309052f},{ -0.0954684886442293f,   0.0705562922454715f,   0.0313490214257105f},
   { -0.0114069945495409f,   0.0050550062892070f,   0.0969174637632867f},{ -0.0283716045447124f,  -0.0638564322117521f,   0.0034983485276271f},{ -0.0302579533299385f,   0.0541838567191495f,   0.0323673969739073f},{ -0.0120442388359756f,   0.0818315449807272f,   0.0038367902564558f},{ -0.0480268883245437f,  -0.0610474490966610f,   0.0382441882921213f},
   {  0.0166219341137035f,  -0.0611202724142945f,  -0.0161964221142139f},{ -0.0945859678871699f,  -0.0031241311509959f,  -0.0132303374326258f},{  0.0288695675435914f,  -0.0382069984695434f,   0.0499864400055849f},{ -0.0283406600306991f,   0.0612277748408179f,  -0.0326593412392995f},{  0.0451635948874787f,   0.0656186876531532f,   0.0484378352953460f},
   {  0.0227781339525625f,  -0.0158794375836312f,  -0.0303030979417472f},{  0.0113497272190414f,  -0.0696936174218561f,  -0.0187759630679411f},{ -0.0063148061787907f,   0.0019866323318106f,   0.0388134824262053f},{ -0.0443403498566629f,  -0.0869426131745016f,   0.0069382385746388f},{ -0.0321829754172790f,   0.1610250665254957f,   0.0326135638670527f},
   { -0.0001332639274703f,  -0.0013041213116057f,  -0.0541048696911906f},{ -0.0497958529250272f,  -0.0034730321898534f,  -0.0208271536259801f},{ -0.0255403723577254f,  -0.0022981919030123f,   0.0267673389605145f},{  0.0314119879347377f,  -0.0065590696906973f,   0.0318635935162487f},{  0.0180568716803429f,   0.0644819195907271f,   0.0125414618336757f},
   {  0.0104878835984101f,   0.0381533059839055f,  -0.0243314057389028f},{ -0.0281478853806876f,   0.0023321712018519f,   0.0151460127163885f},{ -0.0347246031102524f,  -0.1220845289177038f,  -0.0187830935728233f},{  0.0284666637429603f,  -0.0152147238977750f,   0.0206396175356282f},{ -0.0604947912849824f,  -0.0088508290220988f,  -0.0015629288315434f},
   {  0.0230899992980207f,  -0.0427078866100809f,  -0.0288491023756784f},{ -0.0299086032856093f,   0.0397241037229011f,  -0.0131374976931891f},{ -0.0495162104072410f,   0.0868419025712306f,   0.0659526353156533f},{ -0.0873139154093799f,   0.0074670824562618f,  -0.0542616561613026f},{  0.0340976980903817f,   0.0028372557698450f,   0.0718779732202153f},
   { -0.0154822535191577f,   0.0661305848484496f,   0.0258817839441996f},{  0.0338764219402311f,   0.0458477910633323f,  -0.0748226857997169f},{ -0.0658921839907017f,   0.0795182233940396f,  -0.0256785107250665f},{  0.0035444885316169f,   0.0173480717781341f,  -0.0471737728350082f},{ -0.0029347299578028f,   0.0232382567712221f,   0.0380288039368514f},
   { -0.0167338673950447f,   0.0622398714207195f,   0.0209125032705413f},{  0.0506305436605486f,   0.0517029953469051f,   0.0081472808982776f},{ -0.0142899706560673F,  -0.0276690489612656f,   0.0189335031447259f},
   { -0.0004363468271121f,   0.1680222281425507f,   0.1076659342678862f},{ -0.0002051678386841f,  -0.2359526054243565f,   0.0001753846143229f},{ -0.0001850450463341f,   0.0191290077225076f,  -0.0968498635844311f},{  0.0000255156535643f,   0.0205403711507674f,  -0.0802759525035747f},{ -0.0003581891487967f,  -0.0087675389629702f,   0.0167059357285824f},
   {  0.0021616255655723f,  -0.0107301937521686f,  -0.1044565111830676f},{ -0.0017586573336642f,  -0.0423702685527168f,   0.0461602920918205f},{  0.0040806310787953f,   0.0619225079767844f,  -0.0053120385924167f},{ -0.0940551494578824f,   0.0092834191805897f,  -0.0338017506865256f},{ -0.0422925462810270f,  -0.0164769363276888f,   0.0400218060197547f},
   { -0.0086493075688475f,   0.0247873702471124f,   0.0919530830632779f},{ -0.0019875819769744f,  -0.0229940269701283f,  -0.0026912665151915f},{  0.0079451386581525f,  -0.0608808847926927f,   0.0383448157108691f},{  0.0060877215985681f,  -0.2344756983984652f,  -0.0048240679028598f},{ -0.0134038654178691f,  -0.0471336881171525f,   0.0940525569889220f},
   {  0.0240311239795413f,   0.0757260449242639f,   0.0047367826350339f},{ -0.0980419595014058f,   0.0359588123881231f,  -0.0111315828953715f},{  0.0067614067313905f,   0.0169909988616288f,   0.0094587195799746f},{ -0.0051510111424634f,   0.0569718714481928f,  -0.0474657867579770f},{  0.0367284055756394f,  -0.0002572112838895f,   0.0140175809134661f},
   {  0.0335759258029116f,   0.0210298192813080f,  -0.0256265506295096f},{  0.0009219548472636f,  -0.0176666610501457f,  -0.0370047936236760f},{ -0.0015571266593025f,  -0.0167008271194287f,   0.0715186100548340f},{  0.0058333640470813f,  -0.0359795196700046f,   0.1454772454493453f},{ -0.0075610824588398f,   0.0395234557684068f,   0.0374008041389880f},
   {  0.0169268157310025f,   0.0324866629680120f,  -0.0893621858513789f},{ -0.0454166312852569f,   0.0064081057385653f,  -0.0302133387013303f},{ -0.0147284102830688f,   0.0002869080978220f,   0.0244059904471123f},{  0.0460418760915137f,  -0.0135063386227247f,   0.0242904822693722f},{  0.0096962015636713f,   0.0439842410419063f,  -0.0121905929275234f},
   { -0.0134368621192287f,   0.0056623061720701f,  -0.0509683981642482f},{ -0.0411097945179195f,  -0.0074700040567770f,   0.0125242633259990f},{ -0.0142642622310966f,  -0.0638978509749373f,   0.0159798185236946f},{  0.0334351974072748f,  -0.0327087691316308f,   0.0170732075161240f},{ -0.0155891825511801f,   0.0357572020888908f,  -0.0227536793043258f},
   { -0.0349584902960493f,   0.0116167425714158f,  -0.0135753254828327f},{ -0.0391058593221372f,  -0.0285957712401525f,   0.0221380508245629f},{  0.0268352310784198f,   0.0575250758802340f,  -0.0657343407626276f},{ -0.0823528121038492f,   0.0249109549032515f,   0.0108389930499109f},{ -0.0114245192340420f,   0.0309186962023485f,  -0.0977305310843138f},
   {  0.0094567576185838f,  -0.0613618536391216f,   0.0333455706653061f},{  0.0454114001094748f,  -0.0032481713109011f,   0.0526589862073443f},{ -0.0500447575814733f,  -0.0078443678386017f,   0.0208076096038322f},{ -0.0098659659276922f,   0.0281538791234045f,  -0.0109964992260460f},{  0.0090159341884001f,  -0.0596212428986630f,   0.0317986061028787f},
   {  0.0112232403957897f,   0.0851515673816545f,   0.0132033254093534f},{ -0.0028581779310043f,   0.0133841107030853f,  -0.0267986064390894f},{ -0.0110686349508102F,   0.0349125181249216f,   0.0251459777228768f},
   {  0.0010011113069254f,   0.1568324535305273f,   0.1104860032821292f},{  0.0005083842591569f,  -0.2117170578416123f,  -0.0036853638001623f},{ -0.0016666191270405f,   0.0187006794940514f,  -0.0972360392122412f},{ -0.0017365820781958f,   0.0119185336856795f,  -0.0743685148719498f},{ -0.0166391688194184f,  -0.0189590654095099f,   0.0144728609791533f},
   {  0.0399351468440300f,  -0.0095560129177772f,  -0.1022624249078644f},{  0.0046867339256817f,  -0.0459793413920803f,   0.0517655657656822f},{ -0.0408400553013376f,   0.0244214349382881f,  -0.0056090766655934f},{ -0.0525269905560336f,   0.0080951504174300f,  -0.0224127616985277f},{ -0.1320676377398268f,  -0.0181711433704594f,  -0.0007335551074426f},
   { -0.0158589989355095f,   0.0288281445762595f,   0.0953342110318271f},{ -0.0446119971437429f,  -0.0197372121022144f,  -0.0121098373574260f},{ -0.0363106934553228f,  -0.0402681455922040f,   0.0177938769280818f},{  0.0036674785617117f,  -0.1554050436252859f,  -0.0340439106391129f},{ -0.0691793804404551f,  -0.0243927093976422f,   0.0621837061658096f},
   { -0.0133967665970538f,   0.0565087150431718f,   0.0028146252557467f},{ -0.0974743182151179f,   0.0224000141326563f,  -0.0195294122274349f},{  0.0405051821389749f,   0.0130941437224556f,   0.0422337546169744f},{ -0.0323553864550011f,   0.0233924547167438f,  -0.0447613110252724f},{  0.0462182607917768f,   0.0075508285981711f,   0.0622617389207450f},
   {  0.0000800904940155f,   0.0411489093155250f,  -0.0297999676585502f},{ -0.0090141418498472f,  -0.0509428739917360f,  -0.0222643809845434f},{  0.0027496325802488f,   0.0226995247664600f,   0.0389969645679294f},{ -0.0709928351366282f,   0.0271985586440859f,   0.0450841054036499f},{ -0.0300537347511634f,   0.0421955820408850f,  -0.0017630473837571f},
   { -0.0014327139811546f,   0.0032865696570472f,  -0.0687661787524406f},{ -0.0595761793643165f,   0.0131605632960309f,  -0.0139051468426809f},{ -0.0220568970651781f,   0.0006058421021358f,   0.0479502872242567f},{  0.0426383646100910f,  -0.0113001564119072f,   0.0610991230375476f},{  0.0242989410250068f,   0.0395227698106683f,   0.0039449496321516f},
   {  0.0389968357585489f,   0.0341228514213886f,  -0.0357341107722754f},{ -0.0240681016011239f,  -0.0281896507116081f,   0.0323418450773851f},{ -0.0322676550300080f,  -0.0175627206211873f,   0.0120351227363018f},{  0.0037505358595476f,  -0.0513789242143776f,   0.0427911967772655f},{ -0.0566644029336848f,   0.0518412671847684f,  -0.0204049571804862f},
   {  0.0250068425663038f,   0.0320736385096105f,  -0.0254732338995248f},{ -0.0375063056245877f,  -0.0408755507608694f,  -0.0073207762888651f},{ -0.0288852491399239f,   0.0202358512784220f,   0.0155766462357682f},{ -0.0886046521106484f,   0.0274243092144830f,  -0.0570819378709185f},{  0.0603665926630605f,  -0.0475502982824868f,   0.0116838630506661f},
   { -0.0256119824653541f,  -0.0543136673713757f,  -0.0389198949774418f},{  0.0221811653734797f,   0.0247545453855785f,   0.0131598860635721f},{ -0.0583878527791464f,  -0.0202423802138310f,   0.0044352278309421f},{  0.0129276369415073f,   0.0488719683956213f,  -0.0664369137245890f},{ -0.0235858375423712f,  -0.0268087284346558f,  -0.0345018085576652f},
   { -0.0189461263120983f,   0.0248136665057988f,  -0.0199130490731638f},{  0.0626496222289936f,   0.0042108599314657f,   0.0084882051833840f},{ -0.0098094591561472F,  -0.0224644421122841f,   0.0462679757669420f},
   { -0.0033123633543370f,   0.0137416583385343f,   0.0678996542692447f},{  0.0019481383956659f,   0.0442984035722225f,   0.0650519156981952f},{ -0.0015885701547147f,   0.0338793487593172f,  -0.0920504354378119f},{  0.0054722018478505f,   0.0468111583606610f,  -0.0601898965467638f},{  0.0131804986666233f,  -0.0960223085163982f,  -0.0036130808439198f},
   { -0.0271733905871857f,  -0.0515047679444846f,  -0.1139844917447767f},{ -0.0039927487238241f,  -0.1413575450506807f,   0.0387855684637317f},{  0.0238383577188257f,  -0.0032317984856920f,   0.0091383374903204f},{ -0.1178054577556940f,  -0.0289783605981347f,  -0.0267285998688056f},{  0.0141323043533377f,   0.0670725125985415f,   0.0355553639528954f},
   { -0.0041737434093199f,   0.0059345132267638f,   0.0999106904653532f},{  0.0252007111085025f,  -0.0613370712703673f,   0.0098050994718386f},{  0.0426125597620292f,   0.0516952160408087f,   0.0262697548678397f},{  0.0224519615770253f,   0.0803370640626269f,  -0.0039161726810921f},{  0.0221752769004057f,  -0.0585672840509212f,   0.0363544656701694f},
   {  0.0338147102721710f,  -0.0592007042586380f,  -0.0176703063068593f},{ -0.0982130453664862f,   0.0007322573243023f,   0.0058213584743467f},{ -0.0165142854170166f,  -0.0423559444944621f,   0.0503002950214392f},{  0.0169956617819665f,   0.0685142700447653f,  -0.0180640038813944f},{  0.0348768889681447f,   0.0482970713745930f,   0.0306287681127875f},
   {  0.0454088431252119f,  -0.0387710819512012f,  -0.0665359793809973f},{ -0.0087977139033543f,  -0.0752680891247203f,  -0.0197199344846971f},{  0.0031983694309643f,   0.0023160137791347f,   0.0307752683154845f},{  0.0568543048680989f,  -0.0889778884724372f,  -0.0116207717327823f},{  0.0196404215445563f,   0.1483992679532074f,   0.0428830789627738f},
   {  0.0283793677499606f,   0.0075757618306113f,  -0.0544425849682468f},{ -0.0401790912184999f,  -0.0313228329444692f,  -0.0206700927902582f},{ -0.0080509244262514f,   0.0164273793218472f,  -0.0224512747517047f},{  0.0319481998383078f,  -0.0006161857870375f,  -0.0244212635067068f},{ -0.0017204214224718f,   0.0556880442542574f,   0.0035391296820750f},
   { -0.0362391425579744f,   0.0312277710710655f,  -0.0196527993718863f},{ -0.0438504598555874f,   0.0213810282947738f,  -0.0069713969189414f},{  0.0148704625858640f,  -0.1221627529511810f,  -0.0073488862548093f},{  0.0125394122901381f,  -0.0006200695725535f,  -0.0158132047155493f},{  0.0291673880360237f,  -0.0130646020829967f,  -0.0175250272158051f},
   { -0.0806309429577442f,  -0.0430474021013484f,   0.0051550337516065f},{ -0.0344986813333914f,   0.0194432545822159f,   0.0436976259715599f},{  0.0838382923864041f,   0.0802609381506996f,   0.0381030739317281f},{ -0.0368684726571323f,   0.0205863553972081f,   0.0332032074924579f},{ -0.0521426317706620f,   0.0054596536604643f,   0.0890841399805403f},
   {  0.0405983227928012f,   0.0505480639418455f,   0.0243938045265706f},{  0.0555281715495453f,   0.0371376788088623f,  -0.0771493361149962f},{ -0.0400298803077428f,   0.0804418399815893f,  -0.0358323266634077f},{  0.0222712455935914f,  -0.0148263633192519f,   0.0422418952481258f},{  0.0269182426373767f,   0.0114055217171645f,   0.0432098005383551f},
   {  0.0316803293740634f,   0.0485400529519595f,   0.0161571492232604f},{ -0.0448011540413904f,   0.0479187338430507f,   0.0267280537005898f},{ -0.0051907396033148F,   0.0213026931187839f,  -0.0289854072662147f},
   { -0.0015181114633400f,   0.1570829562623496f,   0.1107601301721769f},{ -0.0013989435741840f,  -0.2113984243124388f,  -0.0034594136656725f},{  0.0019009334254263f,   0.0207018440702473f,  -0.0969641836276184f},{  0.0021566380735721f,   0.0121322711387965f,  -0.0757535119423484f},{  0.0154638192231627f,  -0.0183616247287495f,   0.0140969923194463f},
   { -0.0333893171281627f,  -0.0093602189121524f,  -0.1015735902604112f},{ -0.0085568051236417f,  -0.0426249036457485f,   0.0515671507853290f},{  0.0533352191247140f,   0.0276023899291366f,  -0.0040770975556303f},{ -0.1311413955620945f,   0.0056247085999462f,  -0.0124141670586153f},{  0.0458201694891019f,  -0.0193930304604019f,   0.0064514602002295f},
   {  0.0006012869619308f,   0.0295303752588526f,   0.0963295557381383f},{  0.0405082142074453f,  -0.0222262427617720f,  -0.0063568797059090f},{  0.0463034575769109f,  -0.0448348734526326f,   0.0140064645346506f},{ -0.0020637530021422f,  -0.1568394872461093f,  -0.0355418762908379f},{  0.0363544781160672f,  -0.0265467339359767f,   0.0630231879859378f},
   {  0.0643363258875954f,   0.0589096750228704f,  -0.0016699885873090f},{ -0.0934943085703429f,   0.0260176048039383f,   0.0090595231864194f},{ -0.0231395769427290f,   0.0184889769858212f,   0.0434178143393680f},{  0.0301662084307994f,   0.0330298952976088f,  -0.0299243927575913f},{  0.0107246981720632f,  -0.0169223190580957f,   0.0184078241738069f},
   {  0.0477438982652962f,   0.0091158500217146f,  -0.0714223019900602f},{  0.0128840569959287f,  -0.0579216762150740f,  -0.0304810423626758f},{ -0.0134914341786126f,   0.0187248500196758f,   0.0388570999061798f},{  0.0672296853396894f,   0.0240854099345839f,   0.0519497502295392f},{  0.0095069193435494f,   0.0332098880582002f,   0.0253296717644307f},
   {  0.0405989023501118f,   0.0180768054595907f,  -0.0689168990745613f},{ -0.0386031973799723f,  -0.0286065001185004f,  -0.0255958788147034f},{ -0.0046935168837181f,   0.0217894132344030f,  -0.0255811188918016f},{  0.0480622906333110f,  -0.0013257951002231f,  -0.0283268103153203f},{ -0.0055843649091595f,   0.0361534815404903f,  -0.0248439030706424f},
   { -0.0611178195288145f,   0.0259788881738969f,  -0.0220426126560027f},{ -0.0243700082487744f,  -0.0056404176716750f,  -0.0101441776402687f},{  0.0210437492204152f,  -0.0220165872137444f,   0.0320850069858762f},{  0.0052255308111517f,  -0.0176804203029941f,  -0.0175226967617172f},{  0.0057210476045538f,   0.0505875542637824f,  -0.0261510079484698f},
   { -0.0827611175450460f,   0.0160328048458432f,   0.0085187174015949f},{ -0.0139022567480455f,  -0.0720688881256822f,   0.0659080631861507f},{  0.0602226440253173f,   0.0271458642844388f,  -0.0286080885350364f},{ -0.0352045120606737f,   0.0272551644569159f,   0.0629966050691848f},{ -0.0731877357644617f,  -0.0393510939299917f,   0.0166181326892256f},
   {  0.0478963674731020f,  -0.0691714175849625f,  -0.0081318825638668f},{  0.0480104134037397f,   0.0029813727287236f,   0.0173272331629667f},{ -0.0300762521022735f,  -0.0042315554992747f,   0.0056209223152719f},{  0.0183888100328047f,  -0.0151809860220645f,   0.0657840041389821f},{  0.0408409875711093f,  -0.0361236344838726f,   0.0059730958213435f},
   {  0.0222334375198362f,   0.0099953576267411f,  -0.0128542680393289f},{ -0.0536040109878891f,  -0.0041924085587943f,   0.0202132902757519f},{  0.0122436516685207F,   0.0732500501864310f,  -0.0281221755526431f},
   { -0.0429703513397063f,   0.0301183432835067f,   0.0619959773583274f},{ -0.0597573300367647f,   0.0321240402380941f,   0.0904846555208611f},{ -0.1371362353598800f,   0.0375576007998615f,  -0.0235742907651616f},{  0.0499320066390038f,   0.0945228173406284f,  -0.0006071968674164f},{ -0.0419318745476246f,  -0.0383731968796842f,   0.0299836886631529f},
   {  0.0489338521916451f,   0.0494272373593734f,   0.0644133393112406f},{ -0.0091420919189666f,   0.0212385153203978f,  -0.0522976765394915f},{  0.0280469781756908f,   0.0037660774874037f,   0.0156611852555487f},{ -0.1095129325131486f,  -0.0051861086865420f,  -0.0131783862815009f},{  0.0218256587109109f,  -0.0320852765835248f,   0.0091472530385178f},
   { -0.0409593479414225f,   0.0415949165367600f,  -0.0068159832987596f},{  0.0174882418304481f,  -0.0333643206700424f,   0.0051402603272452f},{ -0.0150506386688982f,  -0.0392677112959637f,  -0.0450848766621149f},{  0.0038832196062465f,   0.0505065022590530f,  -0.0181629060266320f},{  0.0520122096042573f,   0.0020786949024875f,  -0.0293308266480076f},
   { -0.0739400336578261f,   0.0094996354332522f,   0.0235018109268616f},{  0.0001173428019584f,  -0.0038320399807828f,   0.0324908008943747f},{  0.0646867411118929f,  -0.0003383290906731f,   0.0103650422471734f},{  0.0693473696187006f,  -0.0175094864483373f,   0.1132698615334599f},{  0.0288299627017606f,  -0.0919941983101198f,  -0.0000480249088859f},
   {  0.0319300634086756f,  -0.0114876893086359f,  -0.0498218018306826f},{ -0.0488824141995563f,  -0.0169993683064781f,   0.0016759785224750f},{  0.0603119251686461f,   0.0201170711881493f,   0.0275360070041548f},{  0.0503779360536298f,   0.0518403834623734f,  -0.0117529623115573f},{ -0.0412342800943348f,   0.0157199051380213f,  -0.0441124239172992f},
   { -0.0513534619644521f,   0.0150731340077606f,  -0.0462617292478475f},{  0.0990662773826794f,   0.0242904369841183f,   0.0813023759324304f},{  0.0089537810882656f,  -0.0038103680825851f,   0.0207729129956008f},{  0.0167774460435545f,   0.0331038632219630f,   0.0173690493465361f},{ -0.1258195090373264f,   0.0065595354029136f,   0.0037429458436382f},
   {  0.1455109184838566f,   0.0096797378635633f,   0.0047012499155390f},{  0.0387090448698648f,  -0.0233020551550086f,  -0.0218998727762143f},{ -0.1396659832349065f,   0.0461629953505434f,   0.0165276129752846f},{ -0.0211675752955995f,   0.0163662204333042f,   0.0243034830413100f},{ -0.0514881588482991f,   0.0121374747662428f,  -0.0108845669851907f},
   {  0.0782181420772953f,  -0.0009835254128784f,  -0.0349175808493668f},{ -0.0109912226395162f,   0.0294087039772953f,  -0.0158977670958054f},{  0.0395610159395191f,   0.0959008618474238f,  -0.0288455650674264f},{ -0.0672951535128812f,   0.0205414224348233f,  -0.1548951439014529f},{  0.1221029961008390f,   0.0385118920996715f,   0.0242930578179011f},
   {  0.0107281595425526f,   0.0385568662510355f,  -0.0280755739825328f},{  0.1013777108419372f,  -0.0708175527595868f,   0.0160640278467406f},{  0.0796179556292860f,   0.0499651627445094f,   0.0240523317921647f},{  0.0043189157393805f,   0.0011832260501812f,   0.0013564354295110f},{  0.1290437160538608f,   0.0155583396673605f,   0.0337365292816983f},
   { -0.0933602684265810f,  -0.0309585945897394f,   0.0433199601164246f},{ -0.0696363160598006f,   0.0559800637658807f,   0.0017849100347645f},{ -0.0562113532494087F,   0.0068066154133491f,   0.0530485946875459f},
   { -0.0371780694808939f,   0.0563227176480280f,   0.1237424461588754f},{ -0.0230573641791446f,  -0.0426744484513794f,  -0.0287909713376374f},{ -0.1505732207085113f,   0.0031713980590165f,  -0.0159978078928440f},{  0.0160099247946821f,   0.0945882435608427f,  -0.0367150852780921f},{ -0.0965995822826899f,  -0.0456167834983867f,   0.0506375035549152f},
   { -0.0227592908145403f,  -0.0024288672467556f,   0.0700263733462106f},{  0.0164411166833379f,   0.0010322925238496f,  -0.0177970436679397f},{  0.0436319902469508f,   0.0209864002967458f,  -0.0713068440852168f},{ -0.0794327046631083f,  -0.0008325959049753f,   0.0132081712476477f},{ -0.0530323234376383f,  -0.0415934924359465f,  -0.0418877951846411f},
   { -0.0630050160864457f,  -0.0188749450607492f,  -0.0902154151363885f},{  0.0306665802452234f,   0.0825492792508884f,   0.0577511202783004f},{ -0.0417514451014262f,  -0.0145584086324980f,   0.0341906764684410f},{  0.0207462547505516f,   0.0490481817872470f,   0.0529964195436074f},{ -0.0270808187843974f,   0.1378355385555243f,   0.0582696688309795f},
   {  0.0725210090120235f,   0.0757657630641758f,   0.0568890830997642f},{  0.0095676145162430f,  -0.0368931062773757f,  -0.0390484451614817f},{ -0.0364684753701036f,  -0.0444714651782141f,  -0.1053085403193372f},{  0.0492326505402924f,  -0.0439699448120894f,  -0.0461369729247441f},{ -0.0127676923846830f,  -0.0000976727196619f,  -0.0715368476256978f},
   {  0.0113275907250099f,  -0.1191508152074855f,   0.0889446383068917f},{  0.0055877007139569f,  -0.0760850510585801f,   0.0545584846339652f},{ -0.0830943737576803f,  -0.0412801594951919f,   0.0078477471828744f},{ -0.0444750961095835f,  -0.0570047912205728f,   0.0182369014484646f},{  0.0640730887068388f,  -0.0914211094800404f,   0.0188048890161499f},
   {  0.0429874629933841f,   0.0190659343694624f,   0.0119420604300572f},{  0.0740596311896038f,   0.0749847451836555f,   0.0753571793823461f},{  0.0243958471906226f,  -0.1328766968529364f,   0.0351088466075557f},{ -0.0748810159025970f,   0.0719234367230732f,   0.1000139485475430f},{  0.1348751620408905f,   0.0625808259410697f,   0.0012624608893108f},
   { -0.1055157183680763f,  -0.0231407538394045f,   0.0206627714475735f},{  0.0564337515682231f,   0.0526219790700808f,   0.1219541622914858f},{  0.1063343752986570f,  -0.0636706627807864f,  -0.0632661677994353f},{  0.0680533104327213f,  -0.1095093947995779f,  -0.0300055335352876f},{ -0.0037556667388737f,   0.0150236187187044f,   0.0177676941656164f},
   { -0.0043007281897089f,   0.0273451323922030f,   0.0039751433320257f},{  0.0149736799009059f,   0.1347498831046978f,  -0.0033699132238151f},{ -0.0284612764605819f,  -0.0624903154578373f,   0.0542847609354233f},{  0.0914313843015519f,  -0.0539572921455697f,   0.1247467808715706f},{  0.0135162575703166f,   0.0349963318496351f,  -0.0012784822855514f},
   {  0.0503072833830039f,  -0.0382797449725613f,  -0.0101789305424644f},{ -0.0296742479414763f,   0.0140704863347254f,  -0.0706333389090024f},{  0.0165140436393995f,  -0.0675417413226996f,   0.0703519756862852f},{  0.0910104242190864f,  -0.0281765201716251f,  -0.0319113387315807f},{  0.0505640105977259f,  -0.0614683113409404f,  -0.0967180631627512f},
   { -0.0291574413955224f,   0.0818180375413430f,  -0.0890457228414302f},{ -0.0178928400760492f,  -0.1403074832320486f,   0.0118210748042859f},{  0.1338816492691708F,  -0.0353029576874453f,  -0.0143302998343343f},
   { -0.0420940722180656f,   0.0280897926120453f,   0.0622114647053994f},{ -0.0561597674273251f,   0.0258240136147287f,   0.0903348755406829f},{ -0.1456126589604619f,   0.0369625023049607f,  -0.0290913652311248f},{  0.0232518444960208f,   0.0991804693914279f,  -0.0165499140654094f},{ -0.0615282196226391f,  -0.0390486076432317f,   0.0118480977302910f},
   {  0.0434139628665223f,   0.0575047812157137f,   0.0417669787629503f},{  0.0110846175386375f,   0.0053777765582376f,  -0.0816234054267719f},{  0.0357673405476961f,   0.0150361663410508f,   0.0044219176250104f},{ -0.1065999171257655f,  -0.0076456957602650f,  -0.0111264515391855f},{  0.0207070159179193f,  -0.0217822490786185f,   0.0176252196318136f},
   { -0.0552872374016034f,   0.0521730677706362f,  -0.0106965303548312f},{ -0.0192687392267161f,  -0.0613828384710692f,   0.0073719610907757f},{ -0.0380638936107112f,  -0.0594900526975138f,  -0.0208083471459132f},{  0.0145198355250370f,   0.0405535210762809f,   0.0007571171093477f},{  0.0358997998500869f,   0.0021067239741616f,  -0.0460781276676316f},
   { -0.0283472085140731f,   0.0112125757615913f,   0.0441061173171465f},{  0.0008609916248923f,   0.0034163338602806f,   0.0351911819437093f},{  0.0540804465242157f,  -0.0214082710693862f,  -0.0094382281899298f},{  0.0391718809243789f,  -0.0222190425790144f,   0.1122207910345509f},{  0.0062067276982385f,  -0.0648993585280493f,   0.0077659620908980f},
   {  0.0323458543775100f,  -0.0517728810350773f,  -0.0516696888425391f},{ -0.0231815988415358f,  -0.0562775954259292f,   0.0060838731857381f},{  0.0342510692344286f,   0.0263294018467172f,   0.0084566315958736f},{  0.0471700305995364f,   0.0415587975319911f,  -0.0049501675855981f},{ -0.0009119629862674f,  -0.0088459851530440f,  -0.0246310643365252f},
   { -0.0651468893192021f,  -0.0083597041026153f,  -0.0469936913386095f},{  0.0936627289293581f,   0.0225187246890949f,   0.0978560561663893f},{  0.0111270268475852f,  -0.0462402347447506f,   0.0209880931234321f},{ -0.0087886100969077f,   0.0517940618575609f,   0.0170487702179623f},{ -0.0899769276063235f,  -0.0009639740533607f,   0.0022544136299949f},
   {  0.0844276680512439f,  -0.0322665815969526f,  -0.0040236268278581f},{  0.0551570488619680f,  -0.0237064603275169f,   0.0027728833617500f},{ -0.1046562590294499f,   0.0476718906855077f,  -0.0118275150514152f},{ -0.0264639434043371f,   0.0343273102311553f,   0.0396487821371189f},{  0.0119486321951163f,   0.0216669590403605f,  -0.0092350553454817f},
   { -0.0026970742165565f,   0.0302307817583350f,  -0.0250103915054762f},{  0.0045937549599751f,   0.0131126245893703f,  -0.0246082180080087f},{  0.0381737250537709f,   0.1074910218956070f,  -0.0484876192921471f},{ -0.0223289670571257f,   0.0012040928891709f,  -0.1451031150616768f},{  0.0432604860231086f,   0.0238969353134062f,   0.0181471370416168f},
   {  0.0058583478717609f,   0.0090169938976940f,  -0.0364116127149275f},{  0.0932904553485646f,  -0.0743281008913513f,  -0.0020492490422687f},{  0.0257511896768133f,   0.0335601230268335f,   0.0511519687088670f},{  0.0275763757350469f,  -0.0250062147214183f,  -0.0291236355540879f},{  0.1427626114260060f,   0.0295477513911461f,   0.0845884248905509f},
   { -0.0408841740290675f,  -0.0393554814283679f,   0.0201682869592811f},{ -0.0745313770456671f,   0.0615986491543334f,  -0.0000839392195122f},{ -0.0003298783765844F,  -0.0526640624270562f,   0.0056383235299318f},
   { -0.0417563612862288f,   0.0464477425551560f,   0.1061696197908673f},{ -0.0322649298265551f,  -0.0211103025380513f,   0.0069640024812092f},{ -0.1511710457210334f,   0.0162208157422752f,  -0.0325840663625534f},{ -0.0043954407980310f,   0.0976170648725909f,  -0.0430491011251552f},{ -0.1017900988428148f,  -0.0425435066600943f,   0.0227305418252740f},
   {  0.0140916853622040f,   0.0272862393335635f,   0.0450371338320276f},{  0.0226864527498362f,  -0.0124429580865814f,  -0.0585286444917362f},{  0.0527211941929900f,   0.0208805171759485f,  -0.0483447201816786f},{ -0.0928256517811352f,  -0.0058650333791158f,   0.0081309017744088f},{ -0.0144531371946993f,  -0.0310604373348759f,  -0.0279456791522022f},
   { -0.0843508233877923f,   0.0105493169447522f,  -0.0609968543538061f},{ -0.0350664448132610f,  -0.0046873241867436f,   0.0585466899009242f},{ -0.0847520726653942f,  -0.0343678632707725f,   0.0251710530104542f},{  0.0342652709374985f,   0.0349753565706723f,   0.0234181695392280f},{ -0.0216006516852002f,   0.0959813491709343f,   0.0017875196314801f},
   {  0.0452895014161375f,   0.0705511718095193f,   0.0772127406715843f},{  0.0153056820141683f,  -0.0055327878476372f,  -0.0006885055495741f},{ -0.0300808929469911f,  -0.0286803402411397f,  -0.0954741336657772f},{  0.0090913146869044f,  -0.0492184100857251f,   0.0099557049544035f},{ -0.0164553228163991f,  -0.0284556467290425f,  -0.0821995692959957f},
   { -0.0134003442608270f,  -0.1290671451171659f,   0.0377915654516257f},{  0.0156371078021966f,  -0.1302015745831091f,   0.0494461992243859f},{ -0.0602771712740845f,   0.0143632227413440f,  -0.0001652012975181f},{ -0.0276782322298759f,  -0.0164759795357257f,   0.0213590398181222f},{  0.0461416654926456f,  -0.0735600686351858f,   0.0157386060991032f},
   { -0.0531053337246724f,  -0.0202172608138170f,  -0.0019597773751950f},{  0.0891977881609508f,   0.0364315401960394f,   0.0963594485027060f},{  0.0311174297538513f,  -0.1363036170391780f,   0.0552644269062454f},{ -0.0552625165803665f,   0.0587690934397759f,   0.0538532762698791f},{  0.0680332962827457f,   0.0381500351656684f,  -0.0203172047857779f},
   { -0.0775747666325853f,  -0.0386175719121817f,   0.0148593316627523f},{  0.0434944892121353f,   0.0081606178487472f,   0.1037023279903858f},{  0.1149762919234668f,  -0.0240130524500876f,  -0.0271280291039193f},{  0.0363581558564318f,  -0.0576369559722017f,   0.0428966313768551f},{  0.1058298317043697f,   0.0892323797358436f,   0.0526398683512391f},
   { -0.0485200474822521f,   0.0264715748347186f,  -0.0003801015042794f},{ -0.0102353584118083f,   0.0935735988647932f,  -0.0105279228767308f},{  0.0035736119313241f,   0.0325711039581582f,   0.0106279991836872f},{  0.0693046365893466f,  -0.0703327735115648f,   0.0567552503816474f},{  0.0139764130914220f,   0.0474586062369187f,   0.0660181350497321f},
   {  0.0122175316801280f,  -0.0225742354018599f,  -0.0046645695957186f},{ -0.0708407929248732f,  -0.0290240669507483f,  -0.1224416507058825f},{ -0.0866322545762261f,  -0.0443519367790098f,   0.0416510101115192f},{  0.0916813226936873f,  -0.0356097173562451f,  -0.0475373571747429f},{  0.0214039030766097f,  -0.0683570163525270f,  -0.0250038472941319f},
   {  0.0525950537455759f,   0.0646021331958374f,  -0.0776606506769319f},{  0.0093346415990830f,  -0.1284438322353925f,  -0.0029185757411074f},{  0.1480872537103581F,  -0.0263975886106982f,  -0.0504343035489764f},
   { -0.0375828614576992f,   0.0372143014355936f,   0.0741795934779878f},{ -0.0430427290146705f,   0.0070139449965510f,   0.0605309691714363f},{ -0.1360728168518160f,   0.0368459182685413f,  -0.0409455405211327f},{ -0.0194675251517671f,   0.0882491877343526f,  -0.0319109776243071f},{ -0.0941933509646086f,  -0.0415118031971510f,   0.0080448605263738f},
   {  0.0543380483093964f,   0.0612026408168031f,   0.0215409824886600f},{  0.0177707267309711f,  -0.0143962310249009f,  -0.0839336734573774f},{  0.0523330324374876f,   0.0149790784236616f,  -0.0109285726784083f},{ -0.1080692146182089f,  -0.0102792422127215f,  -0.0053885610847097f},{  0.0211389286936320f,  -0.0206309087396455f,   0.0013648464037850f},
   { -0.0780212105017781f,   0.0377221004468364f,  -0.0202890677983369f},{ -0.0731862747149361f,  -0.0664301587770517f,   0.0204520934877140f},{ -0.0875585141690695f,  -0.0549051228419973f,   0.0113890649511826f},{  0.0230047243738650f,   0.0285749443930556f,  -0.0024893867268798f},{ -0.0066864671583727f,   0.0283916562608554f,  -0.0542895100777754f},
   {  0.0163283396684004f,   0.0256178948263256f,   0.0712103163672005f},{  0.0184772628795956f,   0.0031982218069254f,   0.0304569459977121f},{  0.0104106245022688f,  -0.0139910117147780f,  -0.0447221077054004f},{ -0.0048814916304123f,  -0.0566859976125044f,   0.0903067935096880f},{ -0.0151530362487277f,  -0.0626266217078410f,  -0.0297728940487982f},
   { -0.0085895237532643f,  -0.0808711340851501f,  -0.0195410204729502f},{  0.0045111734514405f,  -0.1055251582419493f,   0.0213569138045311f},{  0.0052289259249937f,   0.0507980792973106f,   0.0005601339413298f},{  0.0189187530539230f,   0.0372527463163540f,  -0.0092302155828858f},{  0.0471630672510393f,  -0.0238867030116463f,  -0.0034535697314417f},
   { -0.0955313130239718f,  -0.0350033092686809f,  -0.0242098677163191f},{  0.0880829718232567f,   0.0172271816211867f,   0.1017748561381140f},{  0.0147558234177192f,  -0.0884566112301941f,   0.0292792598161938f},{ -0.0200365155754318f,   0.0611994446962198f,   0.0358474398694408f},{ -0.0428942807037196f,   0.0083622386433760f,  -0.0144842457129103f},
   {  0.0003591081283857f,  -0.0440326437413599f,   0.0124263022430443f},{  0.0418272148793654f,  -0.0326540615006897f,   0.0456545400644718f},{  0.0186092436401478f,   0.0812507625298279f,  -0.0127163402324900f},{ -0.0012432622219829f,   0.0001300284015863f,   0.0787759067537494f},{  0.1104572365076112f,   0.0621055925786504f,   0.0281537905364236f},
   { -0.0469910560276113f,   0.0397125531599307f,  -0.0174885476708456f},{ -0.0148748356538678f,   0.0186857845004350f,  -0.0181032898925021f},{  0.0452000899938354f,   0.0910344046494401f,  -0.0303074921104938f},{  0.0277295900691742f,  -0.0425681573809482f,  -0.0738963383406862f},{  0.0085846686372378f,   0.0161172013328881f,   0.0437600077687282f},
   { -0.0141483191528875f,   0.0142091657755821f,  -0.0192178686508064f},{  0.0027869442576348f,  -0.0521778599485357f,  -0.0405605962637935f},{ -0.0726287346375512f,   0.0061361534690085f,   0.0395189046879982f},{  0.0667619761220540f,  -0.0468039061870025f,  -0.0688520468709068f},{  0.0689529752403688f,   0.0187245013813703f,   0.0815504719795051f},
   {  0.0533809902113157f,   0.0174522476104270f,  -0.0021100236758021f},{ -0.0182647103348918f,   0.0028973100729616f,   0.0018994374282669f},{  0.1081712991699543F,  -0.0687032562818309f,  -0.0439930527232623f},
   { -0.0196507952861523f,   0.0723882246617713f,   0.1262438653331443f},{ -0.0166785120253345f,  -0.0589527041065479f,  -0.0570893185249168f},{ -0.1231127075951595f,   0.0089900392010432f,  -0.0083844380866215f},{  0.0052713201864258f,   0.0751487600866832f,  -0.0078650233040011f},{ -0.0829123143700653f,  -0.0511108718130450f,   0.0822353452448474f},
   { -0.0297271104170150f,  -0.0234824931293745f,   0.0675040620611465f},{ -0.0010879512765008f,   0.0345578753641174f,   0.0271058778114149f},{  0.0154433562670119f,   0.0258436549361162f,  -0.0661729340524149f},{ -0.0717434337938675f,   0.0031501888253057f,   0.0070173824240836f},{ -0.0876279084153860f,  -0.0374493727072455f,  -0.0217831275732661f},
   { -0.0297455081179269f,  -0.0279078902576010f,  -0.0965752570560672f},{  0.0810521415962549f,   0.1718895555584885f,   0.0136637917747955f},{ -0.0016983510265496f,   0.0032615651116895f,   0.0403760582773852f},{ -0.0003147833329359f,   0.0596747656494654f,   0.0794378284453247f},{ -0.0296387128356494f,   0.1082788706378877f,   0.0823589213289308f},
   {  0.0683576804493972f,   0.0115071069573965f,   0.0189473068720664f},{ -0.0076625369697021f,  -0.0635595981737921f,  -0.0618991128698630f},{ -0.0608349586700320f,  -0.0226510763385629f,  -0.0819762575196794f},{  0.0453427975701731f,  -0.0110613510701789f,  -0.0466532544595807f},{ -0.0320865174822632f,   0.0389503588902611f,   0.0004712967297568f},
   {  0.0177178350332303f,  -0.0774299846799235f,   0.1125929012376801f},{ -0.0155931710865912f,   0.0176506760294424f,   0.0563835076722443f},{ -0.0631946748686151f,  -0.0541257332761634f,  -0.0038614591637460f},{ -0.0047648401754547f,  -0.0947563809597907f,  -0.0207217496692981f},{  0.0987079179384182f,  -0.0838710374306158f,  -0.0172918558617410f},
   {  0.0882210568888892f,   0.0381795415969232f,   0.0220725513997590f},{  0.0110183917663412f,   0.0925507033232421f,   0.0636677185672048f},{ -0.0017416346095421f,  -0.1003560988714801f,   0.0096585286543439f},{ -0.0704811101583016f,   0.0741516462478731f,   0.1215727757430550f},{  0.1497488780312279f,   0.0284151776257106f,   0.0398241769443762f},
   { -0.0971841786781064f,  -0.0113650133845036f,   0.0116207856666954f},{  0.0669339324702042f,   0.0739089073566391f,   0.1546851494710128f},{  0.0731883652657841f,  -0.0491367020800061f,  -0.0865859411873439f},{  0.0568893892990864f,  -0.1277019322601770f,  -0.1013192557122497f},{ -0.1188229670003618f,  -0.1248292525872993f,  -0.0521835848609473f},
   {  0.0877153466590581f,   0.0359240706760533f,   0.0111381184395555f},{  0.0591414518185857f,   0.1613790531272487f,   0.0482988601075775f},{ -0.0277640527117508f,  -0.1341478409342864f,   0.0257399213953115f},{  0.0734243705902138f,   0.0304927693268699f,   0.1350106841645310f},{  0.0220760077764671f,   0.0343530858548831f,  -0.0256579762633402f},
   {  0.0228423381993686f,  -0.0033382580790416f,  -0.0340465673160284f},{  0.0381521050580569f,   0.0671541989410867f,  -0.0060988012865845f},{  0.1224127350964536f,  -0.0635461129383143f,   0.0642152781189177f},{  0.0572353711437321f,  -0.0482085445004816f,  -0.0575731325748036f},{  0.0592189533711200f,   0.0328005324549061f,  -0.0679050836726871f},
   { -0.1335174404679271f,   0.0560909159928234f,   0.0255480382139367f},{ -0.0250792130167900f,   0.0213543503804855f,   0.0960261064108558f},{  0.1171352093430403F,  -0.0238084321862773f,   0.0320644558994126f},
   { -0.0025860570849612f,   0.0990514303798958f,   0.1291104393894719f},{ -0.0016616784588310f,  -0.0914624472352281f,  -0.0857939213806944f},{ -0.0523870324937209f,   0.0550988495417194f,  -0.0105354756735774f},{ -0.0218633643445718f,   0.0338608589602030f,  -0.0116223242068131f},{ -0.0568108631673818f,  -0.0514618998523312f,   0.0771412189517573f},
   {  0.0082258507542623f,  -0.0034093141678691f,   0.0406889567033527f},{ -0.0217972163163412f,   0.0567410240623637f,   0.0549644600344538f},{ -0.0179674917789623f,   0.0321201320909859f,  -0.0610820850828676f},{ -0.0672847858766808f,  -0.0077872757829291f,  -0.0354100204223914f},{ -0.1100842363511160f,   0.0135962846630890f,   0.0652375784000924f},
   { -0.0219991895390486f,  -0.0307020432613117f,  -0.0554239913555573f},{  0.0898382732633050f,   0.1904223906921732f,  -0.1228720980264914f},{ -0.0230138090565169f,  -0.0420188363016049f,   0.0691288895314502f},{  0.0042851230014154f,   0.0930371181155639f,   0.1705688392239008f},{ -0.0273635112995221f,  -0.0824519375289186f,   0.0308081347605523f},
   {  0.0175954563759218f,  -0.1372353052404777f,  -0.0823262254887707f},{ -0.0490552114229255f,  -0.0655099049821021f,  -0.0530711683907525f},{ -0.0851323113641808f,  -0.0074903401141629f,   0.0176869642534057f},{ -0.0122781704634778f,   0.0153465115045840f,  -0.0229594843607701f},{ -0.0362686296292514f,   0.0765276142360452f,   0.0754165448964677f},
   { -0.0885547545633642f,  -0.0438237768207641f,   0.0998851739020232f},{ -0.0570894303545982f,   0.1156218398729462f,   0.0186265293440165f},{  0.0337614296771580f,  -0.0091511632960431f,  -0.0477586071522452f},{  0.0607547812228985f,  -0.0361530162281993f,  -0.0507460367076440f},{  0.0850889950505203f,  -0.0266008812090785f,  -0.0736305437958427f},
   {  0.0006413541584908f,  -0.1037815948772766f,   0.0396689747500360f},{ -0.1279225903611288f,   0.0605781815645999f,   0.0535439775529129f},{ -0.0343440284870584f,  -0.0727249048146408f,   0.0145187302201997f},{ -0.0161307272073583f,   0.0990551013768683f,   0.1107487083560163f},{  0.0881722015578441f,  -0.0879061682568595f,   0.1098131589628622f},
   { -0.0778763866820238f,  -0.0304517694241454f,  -0.0421057698515131f},{ -0.0006458701245750f,   0.0580131111751521f,   0.1282810044609490f},{  0.0533728534439866f,   0.0989673898894101f,   0.0192251328126156f},{ -0.0040855674915323f,  -0.1596412695489679f,  -0.1190002104351400f},{ -0.1235751056937237f,  -0.0743776739191840f,  -0.0853854912186352f},
   {  0.1515224336059351f,  -0.0626955677148783f,  -0.0002163334493900f},{  0.0964887274619620f,   0.0686361697880964f,   0.0282570542674642f},{  0.0342286600390025f,  -0.0747446231927512f,  -0.0235341174522520f},{  0.0352058549351235f,   0.0951433796570686f,   0.0511434352708262f},{  0.1008964898598243f,  -0.0227212985337027f,  -0.0245087187538508f},
   { -0.0887093794535885f,   0.1274941234716781f,  -0.0273953720851439f},{ -0.0178254382608001f,   0.0825580539526642f,   0.0168960586586766f},{  0.1441275037156916f,  -0.0215938425284046f,   0.0228827331081280f},{  0.0454223686776428f,  -0.0493499836726726f,  -0.0972649042338768f},{ -0.0397125991440475f,   0.1099405349017887f,   0.0462641230517730f},
   { -0.1519555250359626f,   0.1241535303635342f,   0.1310138773024042f},{  0.0079610620868674f,   0.1326831767634936f,   0.1181956003168823f},{  0.0355198368561367F,  -0.0026099002954418f,  -0.0212854733754997f},
   {  0.0001026815318864f,   0.1095933071006963f,   0.1399975717460749f},{  0.0000753850649288f,  -0.1233091720355084f,  -0.1078219647672853f},{  0.0011474856914435f,   0.0465915229917581f,   0.0498825573133352f},{ -0.0017635114368308f,   0.0342304630134543f,  -0.0654297067746003f},{  0.0005279258185408f,  -0.0513685485205715f,   0.0372281038039554f},
   {  0.0028548946853613f,  -0.0294319214321456f,   0.0816798530807503f},{  0.0010412821727291f,   0.0582232148122535f,   0.0418473073615281f},{  0.0084750757886078f,   0.0264066222254499f,   0.0018627626461696f},{ -0.0830495224503809f,   0.0018651415861518f,  -0.0971095741582097f},{ -0.0369109980938420f,   0.0178689952095158f,   0.2112116425056891f},
   { -0.0074546264759465f,  -0.0391640239608800f,  -0.0296164847157021f},{  0.0036243666779695f,   0.2028102540831607f,  -0.2916433541608807f},{ -0.0011822082063063f,  -0.0530481141655576f,   0.0350628615782360f},{  0.0032414685035263f,   0.0943717813347366f,   0.1704734613063070f},{ -0.0165796097889433f,  -0.2053033183349458f,  -0.0479596550354645f},
   {  0.0203407501398390f,  -0.2354500555474970f,  -0.1692496064872323f},{ -0.0675554539087701f,  -0.0466508023789167f,  -0.0173112441659757f},{  0.0108113526540924f,  -0.0615138518027088f,   0.1221933274527229f},{  0.0340658799647493f,   0.0646603690669544f,   0.0040223891656172f},{ -0.0565556617562491f,   0.0728272207651342f,  -0.0156587393212524f},
   { -0.0774209915318348f,  -0.0803606587147653f,   0.0254742554860216f},{ -0.0115332068370607f,   0.1186142163771881f,   0.0094088130731962f},{ -0.0116470181727027f,   0.0284575074004521f,  -0.0826134616279331f},{  0.0086362160573983f,   0.0148706626043127f,  -0.0747062680212837f},{ -0.0206214269380333f,   0.0580758702224152f,  -0.0263490481464850f},
   {  0.0858278298353757f,  -0.1110634040087092f,   0.1086698282282224f},{ -0.2613812965610088f,  -0.0352245225004884f,   0.0187301360274525f},{ -0.0392103067723745f,  -0.0057953993789280f,   0.0038971000915067f},{  0.0196534342766262f,   0.0164265789817723f,  -0.0686387033789479f},{ -0.0268376408117190f,  -0.0130552980761356f,   0.1496328532825673f},
   { -0.0325321044551600f,  -0.0211626607484300f,  -0.0468120397984682f},{  0.0091870421076322f,  -0.0632679283788158f,  -0.0063171318648471f},{  0.0246138926979205f,   0.0720495720735504f,   0.1262583747469777f},{ -0.1720412741668401f,  -0.0666717031063061f,   0.0239514712609153f},{  0.0161542246762871f,   0.1398198046761439f,  -0.0067662997355358f},
   {  0.0712088943073086f,  -0.0162169205010543f,   0.0219216974078202f},{  0.1044599497638816f,  -0.1476294223654605f,  -0.0020345543103442f},{ -0.0025809682386224f,   0.0905757852336417f,  -0.0988645469237881f},{  0.0037912116159803f,   0.0106231633827461f,  -0.0991346251952637f},{ -0.0439307703309525f,   0.0214129311164993f,   0.2401125474486723f},
   { -0.0836333618995697f,  -0.0154805154102011f,   0.0289527271623891f},{ -0.1574463037256760f,  -0.0289793826251676f,  -0.1279434267509308f},{  0.2001870346072130f,  -0.0885125961973624f,  -0.0734444582916131f},{ -0.0922730941026357f,   0.1060186971157199f,   0.0469219048242461f},{ -0.0053318912913988f,  -0.2236405966859670f,  -0.0902543011369371f},
   { -0.0113426827118116f,  -0.2374521280911948f,  -0.2796504991479502f},{ -0.0400510208738660f,  -0.3498540156521831f,  -0.2535197237815619f},{  0.0406934874320721F,  -0.0468429083672929f,  -0.0989580385239671f},
   {  0.0026025307572949f,   0.0997678730067528f,   0.1298003579855104f},{  0.0020014270519482f,  -0.0926435440007087f,  -0.0861471895338541f},{  0.0533341631291703f,   0.0557231816229917f,  -0.0096801493560524f},{  0.0188437066498411f,   0.0332749304116828f,  -0.0144188535442703f},{  0.0553948173950753f,  -0.0522877096244151f,   0.0753724094341218f},
   { -0.0031986826604239f,  -0.0076350158859859f,   0.0390386045472317f},{  0.0199055366799750f,   0.0521596577354957f,   0.0527118034687656f},{  0.0355582147229487f,   0.0345430251817047f,  -0.0581150495238165f},{ -0.1297226094247728f,   0.0066874552465634f,  -0.0273282651343842f},{  0.0170514319415749f,   0.0234531647463805f,   0.0765257927337270f},
   { -0.0001358272189445f,  -0.0250128241764314f,  -0.0534293879363607f},{ -0.0855885864134167f,   0.1868979355237916f,  -0.1211971367019840f},{  0.0210560270307002f,  -0.0510368938440495f,   0.0627833285780669f},{  0.0011772746881079f,   0.0883296357829974f,   0.1733697546589005f},{  0.0077654638328450f,  -0.0743827012673838f,   0.0330706073508775f},
   {  0.0084222851762596f,  -0.1480849827823033f,  -0.0917022717424571f},{ -0.0167135030534659f,   0.0003769215207804f,   0.0088225784738932f},{  0.1023618676239131f,  -0.0124988207367447f,   0.0232720108453460f},{  0.0658731031425287f,   0.0281242459772725f,   0.0244583827504100f},{ -0.0860361053283407f,   0.0389197392461193f,  -0.0794442388475768f},
   { -0.0451795364125913f,  -0.1054515345492944f,  -0.0805769101144153f},{  0.0244681281507260f,   0.1172841997105604f,  -0.0091615291539518f},{ -0.0473114624470023f,  -0.0143910225211362f,  -0.0427992576398882f},{ -0.0385643640292674f,  -0.0381946276943162f,  -0.0440164334970373f},{ -0.0856192401007887f,  -0.0358477787187218f,  -0.0287610920741127f},
   {  0.0726331072065099f,  -0.0723771508640836f,   0.0480680064976149f},{ -0.0917129579916928f,  -0.0683724844046678f,  -0.0057905326150302f},{ -0.0908791872591877f,   0.0384918457450199f,  -0.0266995838607153f},{ -0.0159556422654810f,  -0.0062027048762898f,  -0.1664186692232796f},{ -0.1150215498585462f,  -0.1413704180229712f,   0.0233998824481164f},
   {  0.0449860736981468f,  -0.0719081637141872f,  -0.0653350500404660f},{ -0.0558656085774594f,  -0.0461723900948502f,  -0.0806642502049809f},{ -0.0302043834529711f,   0.0489492887937557f,  -0.0198216604277422f},{ -0.0954846732591925f,   0.2198716698155687f,   0.1642136087453266f},{  0.1340706719598090f,   0.0521726163360602f,  -0.0294348644301198f},
   { -0.0692462896894325f,   0.0093811596922390f,   0.0741158332565575f},{  0.0064712229759000f,   0.0110215970198640f,   0.0411776601518749f},{ -0.0785559155307875f,  -0.0144626166729551f,  -0.0047849520494164f},{  0.0223003833325419f,  -0.0925430850980316f,  -0.0228744381071626f},{ -0.1195205554689103f,  -0.0314765999276263f,  -0.0252900689970552f},
   {  0.0257004893348434f,   0.0569493414195267f,  -0.0428622535785352f},{ -0.1524558358781990f,  -0.0282177188329223f,   0.0333805942391921f},{  0.0900414543971647f,   0.1565068757891811f,   0.0132611401588726f},{  0.0409956012151823f,  -0.0492235426723312f,   0.0274349347117435f},{  0.0709322993540494f,   0.0753983865211841f,   0.0721827874148295f},
   {  0.0974422449153743f,   0.0980767529326933f,   0.0921417949393811f},{ -0.0125408250453315f,   0.1181552110118691f,   0.1295773124604057f},{  0.1321291832493972F,   0.0508634258369269f,   0.0736770951133894f},
   {  0.0197611043391427f,   0.0722318920343174f,   0.1261228760364911f},{  0.0173135881568774f,  -0.0605926676572004f,  -0.0570373376450331f},{  0.1232939682813769f,   0.0087210282198765f,  -0.0083903800555172f},{ -0.0080232781655578f,   0.0769379263034023f,  -0.0100487891256952f},{  0.0807689478103883f,  -0.0500995573960297f,   0.0818218157207394f},
   {  0.0340828392259611f,  -0.0270763652520624f,   0.0659137673520383f},{ -0.0006123922576053f,   0.0325756432463707f,   0.0276609941693640f},{ -0.0048999306374224f,   0.0202542068779762f,  -0.0693975469179541f},{ -0.1169985596153052f,   0.0386898275709064f,   0.0231769865578158f},{ -0.0055996039491442f,  -0.0219443826004029f,  -0.0137972436317251f},
   {  0.0049914571032130f,  -0.0256168671970867f,  -0.0966028878133877f},{ -0.0831911892222360f,   0.1700011742943139f,   0.0145432940363032f},{  0.0054844140022927f,   0.0006312127538667f,   0.0383606846464761f},{  0.0061666452162804f,   0.0608501552351371f,   0.0885963587267223f},{  0.0196025549510683f,   0.1224572070300705f,   0.0896257782763575f},
   { -0.0586898795891792f,  -0.0048341606563929f,   0.0070220737508455f},{ -0.0274244404263486f,  -0.0010673706928610f,   0.0100321331893568f},{  0.0730801760398959f,  -0.0360222823620475f,  -0.0853281611822923f},{ -0.0276828485082825f,  -0.0232488714320341f,  -0.0152852209323535f},{ -0.0268821217885989f,   0.0689337922806382f,  -0.1212948475503103f},
   { -0.0583449654363676f,  -0.0539598744902082f,  -0.0200830656617072f},{  0.0049398899147957f,   0.0288824327298039f,   0.0268206107086748f},{  0.0613344396521261f,  -0.0418110566102452f,   0.0057159299101293f},{  0.0185113701565043f,  -0.0981041838111169f,  -0.0115310280936258f},{ -0.0859710633416739f,  -0.0870514355096610f,   0.0193488573582335f},
   { -0.0917545710686592f,   0.0504441182364161f,   0.0491306383725865f},{ -0.0271725654319861f,  -0.0205233940231412f,  -0.0314789606301856f},{ -0.0435714854850909f,   0.0571615598904590f,  -0.0189002024118111f},{  0.0038297794974535f,  -0.0911599079728045f,  -0.1228279108201707f},{ -0.1712992900618708f,  -0.0385749317338164f,  -0.0418920785881708f},
   {  0.1047023311811565f,  -0.0362952557925569f,  -0.0155532145496120f},{ -0.0099646117676484f,   0.0127387107773511f,  -0.1219389462136181f},{ -0.0688695631097407f,  -0.1022314004007586f,  -0.1286465270359567f},{ -0.0565987365330217f,   0.2285526526271374f,   0.1122162065851316f},{  0.1401416885088566f,  -0.0915134921410439f,  -0.0549926114817698f},
   { -0.0564386022172458f,   0.0121282047583245f,   0.0307922465488557f},{ -0.0485535164295323f,  -0.0053120761193496f,   0.0301461642459863f},{ -0.0383713469173687f,  -0.0915992777577701f,   0.0825259721717200f},{  0.0752710808531185f,  -0.0985945361356570f,  -0.0609458944354314f},{ -0.0074151690737076f,   0.0129181712880115f,  -0.0603116295284765f},
   { -0.0208030149808254f,  -0.0483909522520036f,  -0.0323206170399941f},{ -0.1429023611884720f,  -0.0235179788662919f,   0.0807958519534102f},{  0.0058830495770768f,   0.0998286145991493f,  -0.0044608646912378f},{  0.1137025060920783f,   0.0258352487979576f,   0.0583014952453170f},{ -0.0181152886410100f,   0.0442857208031469f,  -0.0318906731042342f},
   {  0.0551544542547913f,   0.0424635944612935f,   0.0347956498757781f},{  0.0667752948479879f,   0.0420936342542544f,   0.1022680667212132f},{  0.1748173074191264F,   0.0487701898546145f,   0.0281292676454497f},
   {  0.0421110607106926f,   0.0281729467117028f,   0.0622548542890181f},{  0.0567932939526679f,   0.0272338390748721f,   0.0905333552558395f},{  0.1464097572766552f,   0.0365141111963064f,  -0.0292979866571310f},{ -0.0234963552175315f,   0.0991964945453214f,  -0.0171768103471376f},{  0.0592098278448104f,  -0.0392549072282955f,   0.0124131145739599f},
   { -0.0371593512331038f,   0.0584880100012639f,   0.0413246881904996f},{ -0.0148284775588750f,   0.0072122583305363f,  -0.0805666815225644f},{ -0.0252846166951408f,   0.0078104935431324f,   0.0039338479067050f},{ -0.0616504697890888f,   0.0186872172531183f,   0.0009832372346811f},{ -0.1020660169900425f,  -0.0126105208766780f,   0.0267017261763652f},
   {  0.0362216254482970f,   0.0538678546334652f,  -0.0089941677983740f},{  0.0151025548732063f,  -0.0626579701558862f,   0.0067006106219850f},{  0.0460383882072260f,  -0.0512539624056408f,  -0.0246630605564289f},{ -0.0144622015742206f,   0.0438218086957294f,   0.0022163751153782f},{ -0.0334776804774456f,   0.0066258753385276f,  -0.0489428493739796f},
   {  0.0212202678727593f,   0.0139347883396395f,   0.0453764107006967f},{  0.0047510608833561f,  -0.0111697211868960f,   0.0160679832162171f},{ -0.0585142592610583f,  -0.0287715204664876f,  -0.0110324615611437f},{ -0.0546796622450068f,  -0.0532755300451576f,   0.0986425853599370f},{  0.0049916651504522f,   0.0359132735943952f,   0.0886881048561289f},
   { -0.0020551205370401f,   0.0698012654140180f,   0.0200401427180441f},{  0.0266399595942188f,  -0.0316899867204408f,   0.0192361680961161f},{ -0.0153386302804003f,   0.0373871517907027f,  -0.0060628502391857f},{ -0.0416612057918998f,   0.0405090685239082f,  -0.0013309946473498f},{  0.0258283517613715f,  -0.0039736933716999f,  -0.0338698136919617f},
   { -0.0026030012420476f,  -0.0069021124529592f,   0.0048622744159174f},{  0.0978441098486284f,  -0.0284533358181832f,  -0.0950268598746370f},{  0.0079688502163571f,   0.0579060913524638f,  -0.0291234643346358f},{ -0.0490305806389458f,  -0.0531368383201056f,  -0.0059798459706660f},{  0.0862900517963712f,  -0.0427630898196428f,  -0.0125200999418941f},
   { -0.0572343558433489f,  -0.0123410538120226f,  -0.0018691390476969f},{  0.0537541710821203f,   0.0029063008804957f,   0.0197434765750170f},{  0.1177096578831185f,   0.0617531398140337f,  -0.0000212100192605f},{  0.0159486072226533f,  -0.0503919697054318f,  -0.0287376454560294f},{  0.0280815974913351f,  -0.0168568785325950f,   0.0164880653258945f},
   {  0.0090757972828776f,  -0.0270189973603089f,  -0.0054343787841885f},{ -0.0172564060486780f,  -0.0188539127719353f,   0.0479362923786617f},{ -0.0319258434070197f,   0.0834317552221861f,  -0.1050308533579288f},{ -0.0136147471683003f,   0.0447035045081491f,   0.0819684586823813f},{ -0.0544577997535505f,   0.0277477520845767f,   0.0731347576652475f},
   {  0.0310175503841389f,   0.0553770935949054f,   0.0127889802469942f},{ -0.0509463841596471f,   0.0061556199493584f,   0.0301556241696165f},{ -0.0733907284584173f,  -0.0614256263851393f,  -0.0263017493603366f},{  0.0651794585913325f,  -0.0233261932611056f,   0.0069573565140031f},{ -0.1095866268666044f,   0.0536953054150126f,   0.0582816310949195f},
   {  0.0380147526940135f,  -0.0402911016205685f,   0.0134082803765271f},{  0.0787268413455597f,   0.0506114065039502f,   0.0144962562415161f},{  0.0132861007709283F,   0.0370382953683298f,  -0.0001451967792664f},
   {  0.0424501140836239f,   0.0483914723617099f,   0.1049599596906872f},{  0.0304955381251839f,  -0.0238141403391198f,   0.0077653409912167f},{  0.1516833239883310f,   0.0167884672103030f,  -0.0335779626641968f},{  0.0076315048112574f,   0.0989303592392776f,  -0.0447710856097812f},{  0.0995781556730250f,  -0.0426716319506991f,   0.0227477499218236f},
   { -0.0100589957557443f,   0.0259962165120412f,   0.0460030869379219f},{ -0.0270178627891611f,  -0.0139598917809260f,  -0.0589664095307029f},{ -0.0373673739647145f,   0.0203515783638492f,  -0.0505183390395547f},{ -0.0840976048647812f,   0.0299238167473388f,   0.0251584876422989f},{ -0.0695890166336490f,  -0.0117193330485427f,  -0.0218138403969816f},
   {  0.0652731682020983f,   0.0160159494308754f,  -0.0613960451550948f},{  0.0350783747218601f,  -0.0032309169684866f,   0.0597453399194712f},{  0.0869215697700317f,  -0.0344273567676064f,   0.0227989515874101f},{ -0.0367815722647691f,   0.0289354576831972f,   0.0266748131548302f},{  0.0153122448393942f,   0.1104898458888042f,   0.0086740933192674f},
   { -0.0525436787982488f,   0.0698360033286152f,   0.0777245685084139f},{ -0.0105974449865668f,  -0.0106906984420703f,   0.0175063185213276f},{  0.0311930780734078f,  -0.0356458599936267f,  -0.1017022813238246f},{ -0.0018495323831472f,  -0.0856056341584684f,   0.0044580655884243f},{ -0.0155435602780206f,   0.1196884264914195f,  -0.0472620489339678f},
   { -0.0151920972934510f,   0.0039646748428479f,   0.0714172780957771f},{ -0.0205299169236419f,  -0.0865191099986922f,   0.0508236683561359f},{  0.0616761183213919f,   0.0159125894481620f,   0.0002262286804598f},{  0.0121374889944071f,  -0.0584874456559054f,   0.0315931642807767f},{ -0.0293969485967236f,  -0.0896406082343179f,   0.0269115843824607f},
   { -0.0142596664158318f,  -0.0218332254274713f,   0.0504710997531117f},{  0.1035178768785865f,  -0.0237766500856317f,  -0.0853574072157794f},{  0.0182837307412946f,   0.1194007381919330f,  -0.0527310654646244f},{ -0.0141985265876875f,  -0.0870136995368453f,  -0.0423089858238981f},{ -0.0740643797769194f,  -0.0265250158495447f,  -0.0578108697314341f},
   {  0.1018304245878319f,  -0.0259859308446362f,  -0.0099280584122858f},{  0.0656926234033034f,  -0.0102182957817178f,  -0.1119469389246554f},{ -0.1160104746947365f,  -0.0220298682210284f,  -0.0150321117945218f},{  0.0401790378603527f,   0.0374239993837416f,  -0.0591784077013820f},{ -0.0543192244721703f,  -0.0495609803667065f,  -0.0332222014589831f},
   {  0.0890772667981361f,  -0.0960519886147646f,  -0.0374028913447340f},{  0.0109022174474746f,  -0.0720314835268048f,   0.0331475649373209f},{ -0.0449008902639256f,  -0.0245370012546041f,   0.0187011902162591f},{  0.0504526259379687f,   0.0631380679265208f,  -0.0793025637832107f},{  0.0342131699288312f,   0.0853963819448708f,   0.0652868534405092f},
   {  0.0235713854088180f,  -0.0165743304493327f,   0.0309367871011387f},{  0.0960075800340665f,  -0.0398870173874632f,  -0.0017649826280497f},{  0.0268073528021658f,  -0.0263047278578191f,  -0.1007532363615275f},{  0.0751582231714131f,   0.1040704045342326f,   0.0384778726335038f},{ -0.0069316741217483f,  -0.0344439425602160f,  -0.0019447129202783f},
   { -0.1355875325851276f,   0.0393187893388924f,  -0.0681858316102788f},{  0.0281411666442761f,  -0.0710133569778057f,   0.0295179228511243f},{  0.0942613054301738F,  -0.0095860087807894f,  -0.0121620982063228f},
   {  0.0429764410578451f,   0.0301919596768035f,   0.0622355252531798f},{  0.0595262694318460f,   0.0322907834852428f,   0.0907419668316110f},{  0.1378706810950631f,   0.0372992411280174f,  -0.0237711684029204f},{ -0.0486145511518654f,   0.0946153365917974f,  -0.0009411889386029f},{  0.0400511516946600f,  -0.0395013617591057f,   0.0302534335936863f},
   { -0.0436120495111691f,   0.0501516932990849f,   0.0629312015028606f},{  0.0045930506249939f,   0.0223061474184242f,  -0.0517781641942946f},{ -0.0148143975134240f,   0.0019485987731898f,   0.0143175875389845f},{ -0.0659830724345842f,   0.0219121196492200f,   0.0083066595865095f},{ -0.1051497594086926f,  -0.0192296314357202f,   0.0205541783859824f},
   {  0.0252594803532329f,   0.0487456244909366f,  -0.0034661918955967f},{ -0.0187983574284138f,  -0.0332874730442709f,   0.0009057677852930f},{  0.0243292924613897f,  -0.0370945175631543f,  -0.0477866737489641f},{ -0.0078205879367587f,   0.0492018552964250f,  -0.0194816868661248f},{ -0.0439303553508634f,   0.0064562797150147f,  -0.0320412849933974f},
   {  0.0604341051356378f,   0.0109788657548783f,   0.0287843054852755f},{  0.0270009700663319f,  -0.0010242358718558f,   0.0020254727314573f},{ -0.0709699828416770f,  -0.0074088512121319f,   0.0090312012099753f},{ -0.0859676548130302f,  -0.0458893084625815f,   0.0959326015880233f},{ -0.0008793104895580f,   0.0070866372821898f,   0.0885403660437725f},
   { -0.0013154232198721f,   0.0903474979147541f,   0.0289482162794177f},{  0.0536213969858154f,   0.0019375466168402f,   0.0164382269810069f},{ -0.0443407622701842f,   0.0256235055855026f,   0.0157717667056638f},{ -0.0536303965480420f,   0.0407592413857528f,  -0.0118051410088005f},{  0.0600984815407540f,   0.0114203744101953f,  -0.0542105941465694f},
   { -0.0128548223728616f,   0.0197864418689631f,  -0.0070020874480463f},{  0.1054020030293806f,  -0.0301557721990280f,  -0.0823696464181789f},{  0.0146623584538032f,   0.0202920665694035f,  -0.0311220235654659f},{ -0.0484132998380235f,  -0.0345694833344112f,  -0.0017836320180782f},{  0.1273816283358644f,  -0.0151634974714929f,  -0.0076582448562245f},
   { -0.1239658588198076f,   0.0162435904794273f,   0.0122808440869146f},{  0.0369793857156563f,   0.0125297648207158f,   0.0352912261042951f},{  0.1493478139385509f,   0.0568339266041562f,   0.0280943785592585f},{  0.0285478658960801f,  -0.0177957031830775f,  -0.0070873527176186f},{  0.0841381127668965f,  -0.0043765579097853f,   0.0340146215839132f},
   { -0.0619087571417256f,  -0.0330158481034882f,  -0.0075529149315817f},{  0.0043637393331137f,  -0.0030087256068997f,   0.0417684005808675f},{ -0.0161222026461158f,   0.0953849199633528f,  -0.0837533160769942f},{ -0.0193484205658576f,   0.0103655945531286f,   0.1078263668609702f},{ -0.1456292283215601f,   0.0401062104028814f,   0.0773276866524580f},
   { -0.0012653707215857f,   0.0667000296389458f,   0.0034377925645682f},{ -0.0974821075955098f,   0.0049526390735153f,  -0.0005732763728630f},{ -0.0703935290897319f,  -0.0423209313202249f,   0.0059381122436015f},{  0.0688207579520812f,  -0.0299897620651742f,   0.0137790394482773f},{ -0.1040775612639132f,   0.0298406462305275f,   0.0029672829503228f},
   {  0.0999288844945105f,  -0.0228818494152131f,   0.0438017361847338f},{  0.0669243695438397f,   0.0263617666511405f,   0.0051322489125979f},{  0.0126910078910682F,   0.0195271534342584f,  -0.0158281855489587f},
   {  0.0374562357245997f,   0.0577992372624266f,   0.1231996868164067f},{  0.0220399801652206f,  -0.0447227396943006f,  -0.0288905676232038f},{  0.1511878782848589f,   0.0028447173528962f,  -0.0168913791563979f},{ -0.0146022119801498f,   0.0951541597009347f,  -0.0374819024998224f},{  0.0941639685661831f,  -0.0449919481332985f,   0.0508451348502732f},
   {  0.0276509154000454f,  -0.0058901039207025f,   0.0700692833036441f},{ -0.0208274027216237f,   0.0011407590862818f,  -0.0179819061006267f},{ -0.0291727829910548f,   0.0166538261489118f,  -0.0733804154341642f},{ -0.1023399214100317f,   0.0410450489587762f,   0.0332989893050190f},{ -0.0338426567724303f,  -0.0249060135077738f,  -0.0336448215526382f},
   {  0.0410142916428263f,  -0.0149408945008501f,  -0.0883601111528546f},{ -0.0314262723258274f,   0.0819970804441810f,   0.0623825907284781f},{  0.0431530714763531f,  -0.0138735933126647f,   0.0333306396944512f},{ -0.0224071270492485f,   0.0454825362554191f,   0.0565926037832647f},{  0.0182486822609072f,   0.1564080259187914f,   0.0673936283477671f},
   { -0.0713097459944693f,   0.0695657385031004f,   0.0530626013609853f},{ -0.0274526678730548f,  -0.0046687501680249f,   0.0098544682937518f},{  0.0432674068038398f,  -0.0547045688759482f,  -0.1110068622632746f},{ -0.0405315940426602f,  -0.0727246722217878f,  -0.0357231027922291f},{ -0.0204802232450442f,   0.1014197576107997f,  -0.1083976913532821f},
   { -0.0361054392273453f,  -0.0206110338243222f,   0.0475545689597591f},{ -0.0061669632739436f,  -0.0424890230317941f,   0.0412428682738136f},{  0.0802029580749992f,  -0.0354048250714301f,   0.0151061785128510f},{  0.0368152707187721f,  -0.0826108406287034f,   0.0265818435799535f},{ -0.0497791666372839f,  -0.0992411223608418f,   0.0457852131900665f},
   { -0.0882779822211260f,   0.0272365640131050f,   0.0504747715986303f},{  0.0401322169297620f,  -0.0232195706584093f,  -0.0620464143786169f},{  0.0025849122256022f,   0.1022731777767076f,  -0.0298015288977108f},{  0.0075031545196725f,  -0.1153199395881665f,  -0.0841593453637865f},{ -0.1471715248334894f,  -0.0205304238997186f,  -0.0639658009649832f},
   {  0.1257964334329577f,  -0.0239275090233818f,  -0.0058809370281968f},{  0.0275867724539635f,  -0.0141596119327188f,  -0.1340902204741158f},{ -0.1078578734816068f,  -0.0914677888094333f,  -0.0767860708012694f},{  0.0090443594393367f,   0.1350405905766010f,   0.0048160276019743f},{  0.0273279284563080f,  -0.0612971829118153f,  -0.0314938157781636f},
   {  0.0265452022600839f,  -0.0769145318725281f,  -0.0046576853356853f},{ -0.0321341983706973f,  -0.0559032598882236f,   0.0149585362163065f},{ -0.0325180543156988f,  -0.0832201903111828f,   0.0928367515044993f},{  0.0910255240565293f,   0.0045611908616662f,  -0.0725748293613259f},{  0.0360445908880470f,   0.0485807944648999f,  -0.0297795012057942f},
   { -0.0239042726811490f,  -0.0501845747251250f,   0.0110394206194506f},{ -0.0149179469423359f,  -0.0416426548394706f,   0.0627478118817710f},{  0.0097053645046497f,   0.0219617630670706f,  -0.0585028861641652f},{  0.1189352399359999f,   0.1106429635445125f,   0.0568333638925329f},{ -0.0265278766591853f,  -0.0176852528183016f,  -0.0583037780203371f},
   { -0.0579732216946298f,   0.0578828525595172f,  -0.0717723977746034f},{  0.0741485469522574f,  -0.0924164249017423f,   0.0289990397161484f},{  0.1210456823830435F,   0.0382948074821276f,  -0.0084211602675868f},
   {  0.0375818633559085f,   0.0377534562228021f,   0.0739792651211060f},{  0.0419476273557369f,   0.0059436949535947f,   0.0604303644047842f},{  0.1369614122445974f,   0.0373633428674409f,  -0.0409783857306744f},{  0.0219739314803012f,   0.0911291527419096f,  -0.0326825066532481f},{  0.0922103383094582f,  -0.0411295915072256f,   0.0080597821496998f},
   { -0.0491379944118504f,   0.0611494321669503f,   0.0227227492299935f},{ -0.0224269457768865f,  -0.0164388832515973f,  -0.0843702118493211f},{ -0.0374788386094299f,   0.0163431765512022f,  -0.0100387018274072f},{ -0.0664295903124310f,   0.0177966763718934f,   0.0103995032774459f},{ -0.1019626203733210f,  -0.0006607510261349f,   0.0097437594832725f},
   {  0.0591062013721402f,   0.0431232020073284f,  -0.0198765703230818f},{  0.0714325008085691f,  -0.0659388464167762f,   0.0232246106360965f},{  0.0917678185293881f,  -0.0502562914024872f,   0.0067740080228070f},{ -0.0243285134180430f,   0.0242061625407942f,  -0.0029861656500002f},{  0.0045484922433438f,   0.0357256195812580f,  -0.0528336079114645f},
   { -0.0264563429564033f,   0.0297127118544022f,   0.0709032288535213f},{ -0.0008705776292525f,  -0.0116987650918856f,   0.0281154189260390f},{ -0.0107817406793125f,  -0.0233502043106121f,  -0.0518996391208963f},{  0.0069483491478144f,  -0.0847040024930358f,   0.0800144946261360f},{ -0.0058450356338899f,   0.0707277528171662f,   0.0459387066777961f},
   { -0.0058280354093800f,   0.0443382371489442f,   0.0430114144523308f},{ -0.0076404991840072f,  -0.0707131691569596f,   0.0318724862478640f},{  0.0005027232617211f,   0.0490225058804325f,  -0.0069958623441610f},{ -0.0278423035510036f,  -0.0000758258172499f,  -0.0131780320312132f},{ -0.0247103439083406f,  -0.0306725354989126f,  -0.0066384553106012f},
   {  0.0266563108517830f,  -0.0312827679672964f,   0.0268875966112474f},{  0.1154511803423568f,  -0.0344492071903950f,  -0.0925960870194382f},{  0.0063902583869864f,   0.0901305749400037f,  -0.0420624789878629f},{ -0.0482029583647032f,  -0.0550610255286512f,  -0.0187656988537289f},{  0.0386915453393250f,  -0.0380604289419976f,  -0.0403308343369983f},
   {  0.0221399102298671f,  -0.0271773188446391f,   0.0018064417622963f},{  0.0698295070870763f,   0.0073637560931395f,  -0.0275510447072922f},{ -0.0163905281581778f,   0.0874474631889352f,   0.0147338527625499f},{  0.0460549552378025f,  -0.0171593814637923f,  -0.0680070757928689f},{ -0.0552162488855912f,  -0.0258391834554963f,  -0.0276195493183129f},
   {  0.0800916888091321f,  -0.0364723618254835f,  -0.0260048993791807f},{  0.0167377150196963f,  -0.0563924890315755f,   0.0529812526662079f},{ -0.0570036657482503f,   0.0451590245792472f,  -0.0737228998527736f},{ -0.0034166946471166f,   0.0792742492473663f,   0.0079102211291764f},{  0.0178982380667885f,   0.0533433967624894f,   0.0834395046256516f},
   {  0.0525922951088282f,   0.0408918771105847f,   0.0195772110959985f},{  0.0557222675286859f,  -0.0086974287156233f,   0.0064042913276149f},{ -0.0161900882267235f,  -0.0501839518210979f,  -0.0495089923647982f},{  0.0549226190556874f,   0.0237254168957575f,   0.0243138119836236f},{ -0.0552710314808773f,   0.0316336396316701f,   0.0778717021946383f},
   { -0.1073372169726341f,  -0.0160217960427189f,  -0.0203971781395475f},{  0.0371167706983726f,   0.0239051078851652f,   0.0320875677090807f},{  0.0563252206041469F,   0.0441841449503332f,   0.0186083151064095f},
};         /**< Selected eigenvectors, of the covariance matrix associated with the set of 3D models -> deformation directions. */

static const PCA_POINT Frontal_MIDDLE_PCA_POINT[] = {
         {2791, {-37.3342526528987970f,  19.3098761097109350f, -10.4752325848268340f}, Frontal_MIDDLE_evectors + 0},
         {3273, {-24.4794828978287850f,  20.2775648954617860f,  -5.8791049052353825f}, Frontal_MIDDLE_evectors + 48},
         {3308, {-13.4600909955903420f,  16.3121268581479870f,  -5.2476315165555896f}, Frontal_MIDDLE_evectors + 96},
         {5264, {-50.0558352227918420f,  12.5271765039087470f, -19.8763965278613310f}, Frontal_MIDDLE_evectors + 144},
         {962, { 38.3324525053435110f,  19.3435940895305090f, -10.7407217678907130f}, Frontal_MIDDLE_evectors + 192},
         {4746, { 50.4076801205811550f,  12.4513948426682290f, -19.8861466660668780f}, Frontal_MIDDLE_evectors + 240},
         {1491, { 24.1590320508100800f,  20.2853678739868640f,  -5.6764737013554658f}, Frontal_MIDDLE_evectors + 288},
         {1531, { 13.9241694211281040f,  16.3599172099044740f,  -5.1002248860752992f}, Frontal_MIDDLE_evectors + 336},
         {2801, {-37.8235211425150840f,   3.6689433161900942f, -13.8595418402314490f}, Frontal_MIDDLE_evectors + 384},
         {4479, {-37.5380532104213320f,  -3.0461826831433085f, -14.8963691896727500f}, Frontal_MIDDLE_evectors + 432},
         {4581, {-42.2210388985809930f,   0.0128545045058240f, -18.9869829531774880f}, Frontal_MIDDLE_evectors + 480},
         {5281, {-24.2380522717587680f,   4.0638920899999977f, -12.7299559775031130f}, Frontal_MIDDLE_evectors + 528},
         {520, {-18.0044616183515130f,  -0.5481063716188593f, -15.4090640264039250f}, Frontal_MIDDLE_evectors + 576},
         {5274, {-31.5372596467801640f,   4.9977426462502628f, -12.0029829984280280f}, Frontal_MIDDLE_evectors + 624},
         {2871, {-33.4802792610190070f,  -3.8850317617155854f, -13.4068988193720710f}, Frontal_MIDDLE_evectors + 672},
         {2872, {-28.3597599734058220f,  -3.7980899147265186f, -12.5572036772198730f}, Frontal_MIDDLE_evectors + 720},
         {4352, { 37.4706670502093360f,  -3.0873197070813845f, -14.7750734305528690f}, Frontal_MIDDLE_evectors + 768},
         {4755, { 24.0593777878587680f,   3.8592854832423935f, -12.7128536862792530f}, Frontal_MIDDLE_evectors + 816},
         {980, { 31.5133607360672130f,   5.0328320522136218f, -12.0579846423131210f}, Frontal_MIDDLE_evectors + 864},
         {325, { 42.0015122293680250f,  -0.0114936460065205f, -18.6696837547236820f}, Frontal_MIDDLE_evectors + 912},
         {1047, { 28.2895914629342680f,  -3.7726463488911359f, -12.4991896762823980f}, Frontal_MIDDLE_evectors + 960},
         {4409, { 16.4469807712440850f,  -0.9873075965807667f, -14.7802926745332530f}, Frontal_MIDDLE_evectors + 1008},
         {1050, { 33.3203824649582570f,  -3.8515818786542559f, -13.3289419975304280f}, Frontal_MIDDLE_evectors + 1056},
         {973, { 37.6934405580394340f,   3.5668204437422628f, -13.6967143746465720f}, Frontal_MIDDLE_evectors + 1104},
         {4879, {  0.1246392185593285f, -33.6920904187828190f,  22.7049575528243180f}, Frontal_MIDDLE_evectors + 1152},
         {1423, {  0.0609023796152987f, -27.4676526194097690f,  22.1416450522491460f}, Frontal_MIDDLE_evectors + 1200},
         {1852, {  0.0456294479171456f, -19.5666573516241050f,  16.7279572583527880f}, Frontal_MIDDLE_evectors + 1248},
         {4669, {  0.1592268397488683f, -11.6145080109054760f,  10.0695388461442420f}, Frontal_MIDDLE_evectors + 1296},
         {1431, {  0.0000000000000000f,   0.0000000000000000f,   0.0000000000000000f}, Frontal_MIDDLE_evectors + 1344},
         {4705, {  0.0610122262886125f, -43.6121730340553740f,   8.2011158414518022f}, Frontal_MIDDLE_evectors + 1392},
         {3652, {-12.2811503489955760f, -32.1288863079343660f,  12.1059367408522580f}, Frontal_MIDDLE_evectors + 1440},
         {1877, { 12.4318272919628840f, -32.2080556450690660f,  12.3480308410042030f}, Frontal_MIDDLE_evectors + 1488},
         {660, {-18.2889460598942150f, -36.1078611701421580f,  -0.9178397061819258f}, Frontal_MIDDLE_evectors + 1536},
         {4458, {  8.9250598921085889f, -41.3151186629659360f,   3.9358865856717871f}, Frontal_MIDDLE_evectors + 1584},
         {4597, { -8.7469595293311322f, -41.2518735785736580f,   3.8460748867009871f}, Frontal_MIDDLE_evectors + 1632},
         {309, { 18.6134801477990310f, -36.2358466400586180f,  -0.9868062215078208f}, Frontal_MIDDLE_evectors + 1680},
         {1120, { 24.6348271782113210f, -67.4212745953375930f,  -7.9680868546046320f}, Frontal_MIDDLE_evectors + 1728},
         {1155, {  8.3297666091020286f, -56.8468289675364890f,   8.6341725513753982f}, Frontal_MIDDLE_evectors + 1776},
         {2988, { -8.2289423458954101f, -77.8103630171331990f,   5.1057544644951243f}, Frontal_MIDDLE_evectors + 1824},
         {1453, {  0.0893852900326039f, -57.4364514555955670f,  10.0025878786374510f}, Frontal_MIDDLE_evectors + 1872},
         {2479, { 18.4769989998408380f, -61.0319430968977270f,   1.9854109214792524f}, Frontal_MIDDLE_evectors + 1920},
         {50, { 20.2538728074212810f, -72.8156400374656130f,  -3.7750025704487493f}, Frontal_MIDDLE_evectors + 1968},
         {2966, { -8.1278283286874817f, -56.8199742145104590f,   8.6080103398325321f}, Frontal_MIDDLE_evectors + 2016},
         {397, {-19.9296990446996140f, -72.8259067312952770f,  -3.6887416658623304f}, Frontal_MIDDLE_evectors + 2064},
         {5627, {-24.4135466082649160f, -67.4871893909839290f,  -7.9438651463163330f}, Frontal_MIDDLE_evectors + 2112},
         {4252, {-18.2178925342611110f, -61.1067743627980490f,   1.9077466406489432f}, Frontal_MIDDLE_evectors + 2160},
         {1182, {  8.9158710111369004f, -77.8158407805017020f,   4.9991862060868044f}, Frontal_MIDDLE_evectors + 2208},
         {1183, {  0.2351487646765861f, -78.8558268897249090f,   6.3849990426803300f}, Frontal_MIDDLE_evectors + 2256},
         {1443, {  0.1048071481066910f, -63.5635759306287370f,   6.2242219034545778f}, Frontal_MIDDLE_evectors + 2304},
         {4309, { -6.9606869432673646f, -63.6538513452271740f,   4.9586536732668023f}, Frontal_MIDDLE_evectors + 2352},
         {1158, {  0.1090101634932168f, -71.3576506689489920f,   5.6696647676352701f}, Frontal_MIDDLE_evectors + 2400},
         {2972, {-10.0565274591895460f, -70.7715812997616210f,   2.8067477785947705f}, Frontal_MIDDLE_evectors + 2448},
         {2539, {  7.2802695166978149f, -63.6598493367764820f,   4.8998559092180454f}, Frontal_MIDDLE_evectors + 2496},
         {1164, { 10.3476733708584930f, -70.7382589253223700f,   2.8076231912677803f}, Frontal_MIDDLE_evectors + 2544},
         {2632, {-64.7154885814981070f, -20.9211098738174500f, -41.5703791405910860f}, Frontal_MIDDLE_evectors + 2592},
         {3472, {-51.0546217688570610f, -81.9121157828764550f, -36.1320787684436130f}, Frontal_MIDDLE_evectors + 2640},
         {5468, {-64.1342268002929220f, -34.9670226886817020f, -44.2861326056392600f}, Frontal_MIDDLE_evectors + 2688},
         {3534, {-57.4017820805601320f, -68.9312535091625450f, -42.5283439871303910f}, Frontal_MIDDLE_evectors + 2736},
         {3542, {-61.6510621103668650f, -51.4930260654056300f, -46.6871464976462320f}, Frontal_MIDDLE_evectors + 2784},
         {3670, {-41.9506105759163290f, -94.3387792750050240f, -31.1279065422870320f}, Frontal_MIDDLE_evectors + 2832},
         {3815, {-27.6766130304002050f, -99.6365746172843100f, -14.4038975259356000f}, Frontal_MIDDLE_evectors + 2880},
         {1712, {  0.2020053296667762f, -107.3757505938070600f,  -0.8803400017974115f}, Frontal_MIDDLE_evectors + 2928},
         {2035, { 27.7918419155659850f, -99.5924639333685210f, -14.0383669990958850f}, Frontal_MIDDLE_evectors + 2976},
         {1894, { 42.1540282457970150f, -94.3823034709506600f, -31.0275847091825310f}, Frontal_MIDDLE_evectors + 3024},
         {4968, { 64.4130326748080790f, -34.9049134890828580f, -44.2215987560490480f}, Frontal_MIDDLE_evectors + 3072},
         {1762, { 57.5512155204926050f, -69.0115759497346200f, -42.4471064687297140f}, Frontal_MIDDLE_evectors + 3120},
         {795, { 64.9522070341439390f, -20.9023911910231170f, -41.5035350666180490f}, Frontal_MIDDLE_evectors + 3168},
         {1691, { 51.1244115577963070f, -82.0734226894065700f, -35.9366928803423780f}, Frontal_MIDDLE_evectors + 3216},
         {1766, { 61.8779235052766620f, -51.4871293154014540f, -46.6521637816157830f}, Frontal_MIDDLE_evectors + 3264},
};         /**< Set of 3D points defining the deformable 3D model.*/

static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2791_0Roll        = { TRUE,  72,               Frontal_MIDDLE_SVM_HOG_360_rough + 0, -669};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2791_0Roll         = { TRUE,  72,                Frontal_MIDDLE_SVM_HOG_360_fine + 0, -307};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2791_posRoll      = { TRUE,  72,       Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 0, -1645};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2791_posRoll       = { TRUE,  72,        Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 0, -776};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2791_negRoll      = { TRUE,  72,       Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 0, -1801};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2791_negRoll       = { TRUE,  72,        Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 0, -728};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2791             = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fCheck + 0, 0};         /**< SVM model for feature point 2791, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3273_0Roll        = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_rough + 72, -686};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3273_0Roll         = { TRUE,  72,               Frontal_MIDDLE_SVM_HOG_360_fine + 72, -402};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3273_posRoll      = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 72, -1521};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3273_posRoll       = { TRUE,  72,       Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 72, -841};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3273_negRoll      = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 72, -1907};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3273_negRoll       = { TRUE,  72,       Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 72, -1242};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3273             = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fCheck + 72, 0};         /**< SVM model for feature point 3273, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3308_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 144, -1089};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3308_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 144, -766};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3308_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 144, -1261};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3308_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 144, -942};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3308_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 144, -1431};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3308_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 144, -884};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3308             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 144, 0};         /**< SVM model for feature point 3308, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5264_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 216, -695};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5264_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 216, -629};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5264_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 216, -1013};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5264_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 216, -995};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5264_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 216, -1300};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5264_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 216, -957};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_5264             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 216, 0};         /**< SVM model for feature point 5264, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_962_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 288, -668};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_962_0Roll          = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 288, -315};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_962_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 288, -1843};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_962_posRoll        = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 288, -716};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_962_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 288, -1585};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_962_negRoll        = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 288, -789};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_962              = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 288, 0};         /**< SVM model for feature point 962, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4746_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 360, -689};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4746_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 360, -630};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4746_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 360, -1207};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4746_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 360, -958};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4746_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 360, -1052};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4746_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 360, -986};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4746             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 360, 0};         /**< SVM model for feature point 4746, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1491_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 432, -688};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1491_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 432, -425};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1491_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 432, -1558};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1491_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 432, -1247};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1491_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 432, -1384};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1491_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 432, -860};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1491             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 432, 0};         /**< SVM model for feature point 1491, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1531_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 504, -1083};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1531_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 504, -524};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1531_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 504, -1271};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1531_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 504, -955};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1531_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 504, -1058};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1531_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 504, -946};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1531             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 504, 0};         /**< SVM model for feature point 1531, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2801_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 576, -906};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2801_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 576, -852};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2801_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 576, -1609};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2801_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 576, -1326};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2801_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 576, -1417};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2801_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 576, -1196};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2801             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 576, 0};         /**< SVM model for feature point 2801, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4479_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 648, -868};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4479_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 648, -487};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4479_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 648, -1244};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4479_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 648, -1150};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4479_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 648, -1168};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4479_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 648, -997};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4479             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 648, 0};         /**< SVM model for feature point 4479, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4581_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 720, -886};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4581_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 720, -605};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4581_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 720, -1381};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4581_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 720, -1166};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4581_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 720, -1288};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4581_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 720, -911};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4581             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 720, 0};         /**< SVM model for feature point 4581, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5281_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 792, -1129};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5281_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 792, -1114};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5281_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 792, -1750};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5281_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 792, -1125};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5281_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 792, -1631};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5281_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 792, -1260};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_5281             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 792, 0};         /**< SVM model for feature point 5281, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_520_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 864, -1069};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_520_0Roll          = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 864, -590};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_520_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 864, -1546};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_520_posRoll        = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 864, -1029};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_520_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 864, -1459};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_520_negRoll        = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 864, -1205};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_520              = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 864, 0};         /**< SVM model for feature point 520, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5274_0Roll        = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_rough + 936, -962};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5274_0Roll         = { TRUE,  72,              Frontal_MIDDLE_SVM_HOG_360_fine + 936, -1113};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5274_posRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 936, -1212};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5274_posRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 936, -1322};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5274_negRoll      = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 936, -1654};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5274_negRoll       = { TRUE,  72,      Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 936, -1375};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_5274             = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_fCheck + 936, 0};         /**< SVM model for feature point 5274, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2871_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1008, -711};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2871_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1008, -752};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2871_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1008, -934};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2871_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1008, -1169};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2871_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1008, -896};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2871_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1008, -1115};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2871             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1008, 0};         /**< SVM model for feature point 2871, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2872_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1080, -731};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2872_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1080, -880};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2872_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1080, -1435};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2872_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1080, -945};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2872_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1080, -1204};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2872_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1080, -1064};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2872             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1080, 0};         /**< SVM model for feature point 2872, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4352_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1152, -847};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4352_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1152, -494};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4352_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1152, -1102};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4352_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1152, -1010};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4352_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1152, -1105};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4352_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1152, -1154};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4352             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1152, 0};         /**< SVM model for feature point 4352, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4755_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1224, -1104};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4755_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1224, -1057};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4755_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1224, -1418};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4755_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1224, -1216};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4755_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1224, -1466};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4755_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1224, -1114};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4755             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1224, 0};         /**< SVM model for feature point 4755, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_980_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1296, -932};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_980_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1296, -1085};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_980_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1296, -1650};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_980_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1296, -1332};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_980_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1296, -1039};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_980_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1296, -1334};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_980              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1296, 0};         /**< SVM model for feature point 980, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_325_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1368, -880};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_325_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1368, -600};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_325_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1368, -1259};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_325_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1368, -902};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_325_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1368, -1303};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_325_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1368, -1184};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_325              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1368, 0};         /**< SVM model for feature point 325, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1047_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1440, -713};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1047_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1440, -866};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1047_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1440, -1147};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1047_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1440, -1047};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1047_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1440, -1385};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1047_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1440, -953};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1047             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1440, 0};         /**< SVM model for feature point 1047, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4409_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1512, -1056};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4409_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1512, -618};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4409_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1512, -1268};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4409_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1512, -1201};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4409_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1512, -1348};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4409_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1512, -1021};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4409             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1512, 0};         /**< SVM model for feature point 4409, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1050_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1584, -680};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1050_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1584, -733};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1050_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1584, -819};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1050_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1584, -1104};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1050_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1584, -805};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1050_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1584, -1165};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1050             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1584, 0};         /**< SVM model for feature point 1050, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_973_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1656, -890};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_973_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1656, -830};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_973_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1656, -1278};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_973_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1656, -1197};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_973_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1656, -1340};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_973_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1656, -1360};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_973              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1656, 0};         /**< SVM model for feature point 973, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4879_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1728, -1148};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4879_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1728, -841};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4879_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1728, -1861};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4879_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1728, -1514};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4879_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1728, -1876};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4879_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1728, -1498};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4879             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1728, 0};         /**< SVM model for feature point 4879, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1423_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1800, -1114};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1423_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1800, -617};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1423_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1800, -1954};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1423_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1800, -1367};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1423_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1800, -1938};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1423_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1800, -1351};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1423             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1800, 1};         /**< SVM model for feature point 1423, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1852_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1872, -1043};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1852_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1872, -355};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1852_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1872, -1668};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1852_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1872, -649};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1852_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1872, -1658};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1852_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1872, -683};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1852             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1872, 1};         /**< SVM model for feature point 1852, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4669_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 1944, -958};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4669_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 1944, -677};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4669_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 1944, -1494};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4669_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 1944, -598};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4669_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 1944, -1492};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4669_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 1944, -601};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4669             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 1944, 0};         /**< SVM model for feature point 4669, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1431_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2016, -928};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1431_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2016, -749};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1431_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2016, -1571};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1431_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2016, -1050};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1431_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2016, -1585};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1431_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2016, -1064};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1431             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2016, 1};         /**< SVM model for feature point 1431, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4705_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2088, -1380};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4705_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2088, -676};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4705_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2088, -1977};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4705_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2088, -1688};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4705_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2088, -2007};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4705_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2088, -1643};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4705             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2088, 0};         /**< SVM model for feature point 4705, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3652_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2160, -809};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3652_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2160, -1053};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3652_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2160, -1414};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3652_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2160, -1531};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3652_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2160, -1350};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3652_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2160, -1469};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3652             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2160, -2};         /**< SVM model for feature point 3652, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1877_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2232, -804};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1877_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2232, -1072};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1877_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2232, -1620};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1877_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2232, -1461};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1877_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2232, -1616};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1877_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2232, -1532};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1877             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2232, -2};         /**< SVM model for feature point 1877, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_660_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2304, -671};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_660_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2304, -741};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_660_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2304, -910};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_660_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2304, -1005};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_660_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2304, -1011};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_660_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2304, -823};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_660              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2304, -2};         /**< SVM model for feature point 660, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4458_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2376, -1045};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4458_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2376, -619};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4458_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2376, -1598};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4458_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2376, -1285};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4458_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2376, -1318};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4458_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2376, -1384};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4458             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2376, -3};         /**< SVM model for feature point 4458, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4597_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2448, -1028};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4597_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2448, -571};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4597_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2448, -1358};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4597_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2448, -1372};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4597_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2448, -1591};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4597_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2448, -1239};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4597             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2448, -3};         /**< SVM model for feature point 4597, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_309_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2520, -644};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_309_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2520, -744};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_309_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2520, -1148};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_309_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2520, -838};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_309_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2520, -1014};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_309_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2520, -977};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_309              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2520, -2};         /**< SVM model for feature point 309, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1120_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2592, -602};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1120_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2592, -558};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1120_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2592, -727};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1120_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2592, -742};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1120_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2592, -786};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1120_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2592, -710};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1120             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2592, -2};         /**< SVM model for feature point 1120, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1155_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2664, -309};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1155_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2664, -528};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1155_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2664, -786};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1155_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2664, -854};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1155_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2664, -1072};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1155_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2664, -882};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1155             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2664, -3};         /**< SVM model for feature point 1155, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2988_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2736, -670};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2988_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2736, -652};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2988_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2736, -830};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2988_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2736, -752};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2988_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2736, -842};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2988_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2736, -789};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2988             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2736, -3};         /**< SVM model for feature point 2988, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1453_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2808, -607};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1453_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2808, -680};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1453_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2808, -984};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1453_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2808, -1076};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1453_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2808, -979};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1453_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2808, -1057};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1453             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2808, -3};         /**< SVM model for feature point 1453, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2479_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2880, -313};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2479_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2880, -381};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2479_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2880, -343};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2479_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2880, -418};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2479_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2880, -348};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2479_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2880, -524};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2479             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2880, -3};         /**< SVM model for feature point 2479, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_50_0Roll          = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 2952, -437};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_50_0Roll           = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 2952, -656};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_50_posRoll        = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 2952, -554};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_50_posRoll         = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 2952, -721};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_50_negRoll        = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 2952, -639};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_50_negRoll         = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 2952, -960};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_50               = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 2952, -2};         /**< SVM model for feature point 50, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2966_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3024, -360};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2966_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3024, -551};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2966_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3024, -1063};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2966_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3024, -913};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2966_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3024, -759};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2966_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3024, -858};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2966             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3024, -3};         /**< SVM model for feature point 2966, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_397_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3096, -444};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_397_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3096, -681};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_397_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3096, -637};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_397_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3096, -924};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_397_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3096, -558};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_397_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3096, -728};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_397              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3096, -3};         /**< SVM model for feature point 397, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5627_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3168, -593};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5627_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3168, -593};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5627_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3168, -733};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5627_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3168, -706};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5627_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3168, -863};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5627_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3168, -765};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_5627             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3168, -2};         /**< SVM model for feature point 5627, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4252_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3240, -309};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4252_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3240, -372};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4252_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3240, -431};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4252_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3240, -535};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4252_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3240, -425};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4252_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3240, -434};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4252             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3240, -2};         /**< SVM model for feature point 4252, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1182_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3312, -666};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1182_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3312, -637};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1182_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3312, -838};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1182_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3312, -787};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1182_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3312, -823};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1182_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3312, -745};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1182             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3312, -3};         /**< SVM model for feature point 1182, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1183_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3384, -856};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1183_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3384, -672};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1183_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3384, -1006};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1183_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3384, -763};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1183_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3384, -1018};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1183_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3384, -742};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1183             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3384, -3};         /**< SVM model for feature point 1183, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1443_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3456, -829};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1443_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3456, -893};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1443_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3456, -1523};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1443_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3456, -1367};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1443_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3456, -1505};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1443_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3456, -1354};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1443             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3456, -2};         /**< SVM model for feature point 1443, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4309_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3528, -701};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4309_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3528, -690};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4309_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3528, -1197};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4309_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3528, -1091};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4309_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3528, -1310};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4309_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3528, -1229};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4309             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3528, -2};         /**< SVM model for feature point 4309, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1158_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3600, -658};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1158_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3600, -653};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1158_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3600, -964};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1158_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3600, -1019};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1158_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3600, -967};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1158_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3600, -1023};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1158             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3600, -3};         /**< SVM model for feature point 1158, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2972_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3672, -599};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2972_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3672, -353};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2972_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3672, -1229};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2972_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3672, -838};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2972_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3672, -1039};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2972_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3672, -928};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2972             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3672, -2};         /**< SVM model for feature point 2972, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2539_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3744, -715};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2539_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3744, -693};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2539_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3744, -1304};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2539_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3744, -1221};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2539_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3744, -1380};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2539_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3744, -1053};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2539             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3744, -2};         /**< SVM model for feature point 2539, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1164_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3816, -604};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1164_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3816, -353};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1164_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3816, -795};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1164_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3816, -945};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1164_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3816, -1396};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1164_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3816, -864};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1164             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3816, -3};         /**< SVM model for feature point 1164, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2632_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3888, -847};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2632_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3888, -786};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2632_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3888, -563};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2632_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3888, -695};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2632_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3888, -495};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2632_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3888, -613};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2632             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3888, 0};         /**< SVM model for feature point 2632, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3472_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 3960, -416};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3472_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 3960, -536};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3472_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 3960, -490};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3472_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 3960, -523};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3472_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 3960, -531};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3472_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 3960, -444};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3472             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 3960, -2};         /**< SVM model for feature point 3472, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5468_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4032, -710};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5468_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4032, -783};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5468_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4032, -522};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5468_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4032, -790};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_5468_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4032, -410};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_5468_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4032, -508};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_5468             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4032, 0};         /**< SVM model for feature point 5468, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3534_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4104, -434};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3534_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4104, -501};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3534_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4104, -467};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3534_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4104, -331};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3534_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4104, -511};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3534_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4104, -381};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3534             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4104, -2};         /**< SVM model for feature point 3534, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3542_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4176, -467};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3542_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4176, -492};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3542_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4176, -523};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3542_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4176, -607};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3542_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4176, -379};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3542_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4176, -396};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3542             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4176, -2};         /**< SVM model for feature point 3542, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3670_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4248, -440};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3670_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4248, -325};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3670_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4248, -516};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3670_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4248, -552};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3670_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4248, -669};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3670_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4248, -630};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3670             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4248, 1};         /**< SVM model for feature point 3670, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3815_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4320, -343};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3815_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4320, -248};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3815_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4320, -514};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3815_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4320, -341};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_3815_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4320, -439};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_3815_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4320, -359};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_3815             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4320, 1};         /**< SVM model for feature point 3815, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1712_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4392, -963};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1712_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4392, -1095};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1712_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4392, -778};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1712_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4392, -928};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1712_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4392, -765};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1712_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4392, -920};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1712             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4392, 0};         /**< SVM model for feature point 1712, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2035_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4464, -333};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2035_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4464, -281};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2035_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4464, -446};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2035_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4464, -423};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_2035_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4464, -511};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_2035_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4464, -366};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_2035             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4464, 1};         /**< SVM model for feature point 2035, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1894_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4536, -438};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1894_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4536, -587};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1894_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4536, -586};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1894_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4536, -617};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1894_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4536, -541};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1894_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4536, -563};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1894             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4536, 1};         /**< SVM model for feature point 1894, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4968_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4608, -709};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4968_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4608, -777};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4968_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4608, -410};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4968_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4608, -528};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_4968_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4608, -518};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_4968_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4608, -793};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_4968             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4608, 0};         /**< SVM model for feature point 4968, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1762_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4680, -428};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1762_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4680, -455};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1762_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4680, -502};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1762_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4680, -369};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1762_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4680, -459};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1762_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4680, -312};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1762             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4680, -2};         /**< SVM model for feature point 1762, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_795_0Roll         = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4752, -827};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_795_0Roll          = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4752, -787};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_795_posRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4752, -488};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_795_posRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4752, -630};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_795_negRoll       = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4752, -565};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_795_negRoll        = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4752, -694};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_795              = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4752, 0};         /**< SVM model for feature point 795, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1691_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4824, -397};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1691_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4824, -552};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1691_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4824, -529};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1691_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4824, -415};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1691_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4824, -456};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1691_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4824, -426};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1691             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4824, -2};         /**< SVM model for feature point 1691, based on HOG_360 descriptors. Used for validation algorithm.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1766_0Roll        = { TRUE,  72,            Frontal_MIDDLE_SVM_HOG_360_rough + 4896, -490};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1766_0Roll         = { TRUE,  72,             Frontal_MIDDLE_SVM_HOG_360_fine + 4896, -493};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1766_posRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_posRoll + 4896, -384};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1766_posRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_posRoll + 4896, -415};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_rough_HOG_360_1766_negRoll      = { TRUE,  72,    Frontal_MIDDLE_SVM_HOG_360_rough_negRoll + 4896, -516};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for rough step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fine_HOG_360_1766_negRoll       = { TRUE,  72,     Frontal_MIDDLE_SVM_HOG_360_fine_negRoll + 4896, -589};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for fine step.*/
static const SVM_INT16 Frontal_MIDDLE_SVM_fCheck_HOG_360_1766             = { TRUE,  72,           Frontal_MIDDLE_SVM_HOG_360_fCheck + 4896, -2};         /**< SVM model for feature point 1766, based on HOG_360 descriptors. Used for validation algorithm.*/

static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2791_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2791_0Roll};         /**< Classifiers associated with feature point 2791, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2791_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2791_0Roll};         /**< Classifiers associated with feature point 2791, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2791_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2791_posRoll};         /**< Classifiers associated with feature point 2791, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2791_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2791_posRoll};         /**< Classifiers associated with feature point 2791, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2791_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2791_negRoll};         /**< Classifiers associated with feature point 2791, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2791_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2791_negRoll};         /**< Classifiers associated with feature point 2791, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2791             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2791};         /**< Classifiers associated with feature point 2791, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3273_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3273_0Roll};         /**< Classifiers associated with feature point 3273, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3273_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3273_0Roll};         /**< Classifiers associated with feature point 3273, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3273_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3273_posRoll};         /**< Classifiers associated with feature point 3273, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3273_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3273_posRoll};         /**< Classifiers associated with feature point 3273, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3273_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3273_negRoll};         /**< Classifiers associated with feature point 3273, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3273_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3273_negRoll};         /**< Classifiers associated with feature point 3273, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3273             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3273};         /**< Classifiers associated with feature point 3273, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3308_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3308_0Roll};         /**< Classifiers associated with feature point 3308, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3308_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3308_0Roll};         /**< Classifiers associated with feature point 3308, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3308_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3308_posRoll};         /**< Classifiers associated with feature point 3308, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3308_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3308_posRoll};         /**< Classifiers associated with feature point 3308, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3308_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3308_negRoll};         /**< Classifiers associated with feature point 3308, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3308_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3308_negRoll};         /**< Classifiers associated with feature point 3308, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3308             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3308};         /**< Classifiers associated with feature point 3308, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5264_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_5264_0Roll};         /**< Classifiers associated with feature point 5264, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5264_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_5264_0Roll};         /**< Classifiers associated with feature point 5264, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5264_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5264_posRoll};         /**< Classifiers associated with feature point 5264, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5264_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5264_posRoll};         /**< Classifiers associated with feature point 5264, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5264_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5264_negRoll};         /**< Classifiers associated with feature point 5264, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5264_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5264_negRoll};         /**< Classifiers associated with feature point 5264, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_5264             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_5264};         /**< Classifiers associated with feature point 5264, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_962_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_962_0Roll};         /**< Classifiers associated with feature point 962, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_962_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_962_0Roll};         /**< Classifiers associated with feature point 962, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_962_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_962_posRoll};         /**< Classifiers associated with feature point 962, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_962_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_962_posRoll};         /**< Classifiers associated with feature point 962, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_962_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_962_negRoll};         /**< Classifiers associated with feature point 962, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_962_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_962_negRoll};         /**< Classifiers associated with feature point 962, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_962              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_962};         /**< Classifiers associated with feature point 962, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4746_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4746_0Roll};         /**< Classifiers associated with feature point 4746, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4746_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4746_0Roll};         /**< Classifiers associated with feature point 4746, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4746_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4746_posRoll};         /**< Classifiers associated with feature point 4746, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4746_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4746_posRoll};         /**< Classifiers associated with feature point 4746, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4746_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4746_negRoll};         /**< Classifiers associated with feature point 4746, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4746_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4746_negRoll};         /**< Classifiers associated with feature point 4746, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4746             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4746};         /**< Classifiers associated with feature point 4746, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1491_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1491_0Roll};         /**< Classifiers associated with feature point 1491, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1491_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1491_0Roll};         /**< Classifiers associated with feature point 1491, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1491_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1491_posRoll};         /**< Classifiers associated with feature point 1491, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1491_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1491_posRoll};         /**< Classifiers associated with feature point 1491, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1491_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1491_negRoll};         /**< Classifiers associated with feature point 1491, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1491_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1491_negRoll};         /**< Classifiers associated with feature point 1491, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1491             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1491};         /**< Classifiers associated with feature point 1491, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1531_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1531_0Roll};         /**< Classifiers associated with feature point 1531, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1531_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1531_0Roll};         /**< Classifiers associated with feature point 1531, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1531_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1531_posRoll};         /**< Classifiers associated with feature point 1531, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1531_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1531_posRoll};         /**< Classifiers associated with feature point 1531, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1531_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1531_negRoll};         /**< Classifiers associated with feature point 1531, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1531_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1531_negRoll};         /**< Classifiers associated with feature point 1531, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1531             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1531};         /**< Classifiers associated with feature point 1531, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2801_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2801_0Roll};         /**< Classifiers associated with feature point 2801, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2801_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2801_0Roll};         /**< Classifiers associated with feature point 2801, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2801_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2801_posRoll};         /**< Classifiers associated with feature point 2801, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2801_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2801_posRoll};         /**< Classifiers associated with feature point 2801, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2801_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2801_negRoll};         /**< Classifiers associated with feature point 2801, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2801_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2801_negRoll};         /**< Classifiers associated with feature point 2801, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2801             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2801};         /**< Classifiers associated with feature point 2801, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4479_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4479_0Roll};         /**< Classifiers associated with feature point 4479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4479_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4479_0Roll};         /**< Classifiers associated with feature point 4479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4479_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4479_posRoll};         /**< Classifiers associated with feature point 4479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4479_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4479_posRoll};         /**< Classifiers associated with feature point 4479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4479_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4479_negRoll};         /**< Classifiers associated with feature point 4479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4479_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4479_negRoll};         /**< Classifiers associated with feature point 4479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4479             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4479};         /**< Classifiers associated with feature point 4479, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4581_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4581_0Roll};         /**< Classifiers associated with feature point 4581, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4581_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4581_0Roll};         /**< Classifiers associated with feature point 4581, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4581_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4581_posRoll};         /**< Classifiers associated with feature point 4581, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4581_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4581_posRoll};         /**< Classifiers associated with feature point 4581, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4581_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4581_negRoll};         /**< Classifiers associated with feature point 4581, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4581_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4581_negRoll};         /**< Classifiers associated with feature point 4581, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4581             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4581};         /**< Classifiers associated with feature point 4581, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5281_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_5281_0Roll};         /**< Classifiers associated with feature point 5281, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5281_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_5281_0Roll};         /**< Classifiers associated with feature point 5281, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5281_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5281_posRoll};         /**< Classifiers associated with feature point 5281, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5281_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5281_posRoll};         /**< Classifiers associated with feature point 5281, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5281_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5281_negRoll};         /**< Classifiers associated with feature point 5281, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5281_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5281_negRoll};         /**< Classifiers associated with feature point 5281, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_5281             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_5281};         /**< Classifiers associated with feature point 5281, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_520_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_520_0Roll};         /**< Classifiers associated with feature point 520, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_520_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_520_0Roll};         /**< Classifiers associated with feature point 520, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_520_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_520_posRoll};         /**< Classifiers associated with feature point 520, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_520_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_520_posRoll};         /**< Classifiers associated with feature point 520, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_520_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_520_negRoll};         /**< Classifiers associated with feature point 520, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_520_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_520_negRoll};         /**< Classifiers associated with feature point 520, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_520              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_520};         /**< Classifiers associated with feature point 520, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5274_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_5274_0Roll};         /**< Classifiers associated with feature point 5274, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5274_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_5274_0Roll};         /**< Classifiers associated with feature point 5274, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5274_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5274_posRoll};         /**< Classifiers associated with feature point 5274, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5274_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5274_posRoll};         /**< Classifiers associated with feature point 5274, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5274_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5274_negRoll};         /**< Classifiers associated with feature point 5274, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5274_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5274_negRoll};         /**< Classifiers associated with feature point 5274, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_5274             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_5274};         /**< Classifiers associated with feature point 5274, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2871_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2871_0Roll};         /**< Classifiers associated with feature point 2871, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2871_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2871_0Roll};         /**< Classifiers associated with feature point 2871, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2871_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2871_posRoll};         /**< Classifiers associated with feature point 2871, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2871_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2871_posRoll};         /**< Classifiers associated with feature point 2871, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2871_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2871_negRoll};         /**< Classifiers associated with feature point 2871, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2871_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2871_negRoll};         /**< Classifiers associated with feature point 2871, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2871             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2871};         /**< Classifiers associated with feature point 2871, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2872_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2872_0Roll};         /**< Classifiers associated with feature point 2872, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2872_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2872_0Roll};         /**< Classifiers associated with feature point 2872, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2872_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2872_posRoll};         /**< Classifiers associated with feature point 2872, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2872_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2872_posRoll};         /**< Classifiers associated with feature point 2872, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2872_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2872_negRoll};         /**< Classifiers associated with feature point 2872, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2872_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2872_negRoll};         /**< Classifiers associated with feature point 2872, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2872             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2872};         /**< Classifiers associated with feature point 2872, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4352_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4352_0Roll};         /**< Classifiers associated with feature point 4352, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4352_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4352_0Roll};         /**< Classifiers associated with feature point 4352, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4352_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4352_posRoll};         /**< Classifiers associated with feature point 4352, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4352_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4352_posRoll};         /**< Classifiers associated with feature point 4352, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4352_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4352_negRoll};         /**< Classifiers associated with feature point 4352, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4352_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4352_negRoll};         /**< Classifiers associated with feature point 4352, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4352             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4352};         /**< Classifiers associated with feature point 4352, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4755_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4755_0Roll};         /**< Classifiers associated with feature point 4755, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4755_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4755_0Roll};         /**< Classifiers associated with feature point 4755, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4755_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4755_posRoll};         /**< Classifiers associated with feature point 4755, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4755_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4755_posRoll};         /**< Classifiers associated with feature point 4755, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4755_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4755_negRoll};         /**< Classifiers associated with feature point 4755, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4755_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4755_negRoll};         /**< Classifiers associated with feature point 4755, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4755             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4755};         /**< Classifiers associated with feature point 4755, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_980_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_980_0Roll};         /**< Classifiers associated with feature point 980, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_980_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_980_0Roll};         /**< Classifiers associated with feature point 980, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_980_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_980_posRoll};         /**< Classifiers associated with feature point 980, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_980_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_980_posRoll};         /**< Classifiers associated with feature point 980, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_980_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_980_negRoll};         /**< Classifiers associated with feature point 980, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_980_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_980_negRoll};         /**< Classifiers associated with feature point 980, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_980              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_980};         /**< Classifiers associated with feature point 980, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_325_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_325_0Roll};         /**< Classifiers associated with feature point 325, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_325_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_325_0Roll};         /**< Classifiers associated with feature point 325, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_325_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_325_posRoll};         /**< Classifiers associated with feature point 325, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_325_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_325_posRoll};         /**< Classifiers associated with feature point 325, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_325_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_325_negRoll};         /**< Classifiers associated with feature point 325, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_325_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_325_negRoll};         /**< Classifiers associated with feature point 325, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_325              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_325};         /**< Classifiers associated with feature point 325, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1047_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1047_0Roll};         /**< Classifiers associated with feature point 1047, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1047_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1047_0Roll};         /**< Classifiers associated with feature point 1047, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1047_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1047_posRoll};         /**< Classifiers associated with feature point 1047, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1047_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1047_posRoll};         /**< Classifiers associated with feature point 1047, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1047_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1047_negRoll};         /**< Classifiers associated with feature point 1047, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1047_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1047_negRoll};         /**< Classifiers associated with feature point 1047, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1047             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1047};         /**< Classifiers associated with feature point 1047, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4409_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4409_0Roll};         /**< Classifiers associated with feature point 4409, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4409_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4409_0Roll};         /**< Classifiers associated with feature point 4409, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4409_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4409_posRoll};         /**< Classifiers associated with feature point 4409, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4409_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4409_posRoll};         /**< Classifiers associated with feature point 4409, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4409_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4409_negRoll};         /**< Classifiers associated with feature point 4409, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4409_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4409_negRoll};         /**< Classifiers associated with feature point 4409, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4409             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4409};         /**< Classifiers associated with feature point 4409, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1050_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1050_0Roll};         /**< Classifiers associated with feature point 1050, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1050_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1050_0Roll};         /**< Classifiers associated with feature point 1050, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1050_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1050_posRoll};         /**< Classifiers associated with feature point 1050, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1050_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1050_posRoll};         /**< Classifiers associated with feature point 1050, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1050_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1050_negRoll};         /**< Classifiers associated with feature point 1050, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1050_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1050_negRoll};         /**< Classifiers associated with feature point 1050, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1050             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1050};         /**< Classifiers associated with feature point 1050, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_973_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_973_0Roll};         /**< Classifiers associated with feature point 973, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_973_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_973_0Roll};         /**< Classifiers associated with feature point 973, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_973_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_973_posRoll};         /**< Classifiers associated with feature point 973, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_973_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_973_posRoll};         /**< Classifiers associated with feature point 973, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_973_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_973_negRoll};         /**< Classifiers associated with feature point 973, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_973_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_973_negRoll};         /**< Classifiers associated with feature point 973, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_973              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_973};         /**< Classifiers associated with feature point 973, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4879_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4879_0Roll};         /**< Classifiers associated with feature point 4879, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4879_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4879_0Roll};         /**< Classifiers associated with feature point 4879, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4879_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4879_posRoll};         /**< Classifiers associated with feature point 4879, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4879_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4879_posRoll};         /**< Classifiers associated with feature point 4879, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4879_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4879_negRoll};         /**< Classifiers associated with feature point 4879, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4879_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4879_negRoll};         /**< Classifiers associated with feature point 4879, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4879             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4879};         /**< Classifiers associated with feature point 4879, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1423_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1423_0Roll};         /**< Classifiers associated with feature point 1423, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1423_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1423_0Roll};         /**< Classifiers associated with feature point 1423, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1423_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1423_posRoll};         /**< Classifiers associated with feature point 1423, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1423_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1423_posRoll};         /**< Classifiers associated with feature point 1423, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1423_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1423_negRoll};         /**< Classifiers associated with feature point 1423, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1423_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1423_negRoll};         /**< Classifiers associated with feature point 1423, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1423             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1423};         /**< Classifiers associated with feature point 1423, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1852_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1852_0Roll};         /**< Classifiers associated with feature point 1852, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1852_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1852_0Roll};         /**< Classifiers associated with feature point 1852, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1852_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1852_posRoll};         /**< Classifiers associated with feature point 1852, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1852_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1852_posRoll};         /**< Classifiers associated with feature point 1852, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1852_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1852_negRoll};         /**< Classifiers associated with feature point 1852, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1852_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1852_negRoll};         /**< Classifiers associated with feature point 1852, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1852             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1852};         /**< Classifiers associated with feature point 1852, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4669_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4669_0Roll};         /**< Classifiers associated with feature point 4669, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4669_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4669_0Roll};         /**< Classifiers associated with feature point 4669, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4669_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4669_posRoll};         /**< Classifiers associated with feature point 4669, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4669_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4669_posRoll};         /**< Classifiers associated with feature point 4669, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4669_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4669_negRoll};         /**< Classifiers associated with feature point 4669, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4669_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4669_negRoll};         /**< Classifiers associated with feature point 4669, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4669             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4669};         /**< Classifiers associated with feature point 4669, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1431_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1431_0Roll};         /**< Classifiers associated with feature point 1431, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1431_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1431_0Roll};         /**< Classifiers associated with feature point 1431, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1431_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1431_posRoll};         /**< Classifiers associated with feature point 1431, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1431_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1431_posRoll};         /**< Classifiers associated with feature point 1431, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1431_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1431_negRoll};         /**< Classifiers associated with feature point 1431, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1431_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1431_negRoll};         /**< Classifiers associated with feature point 1431, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1431             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1431};         /**< Classifiers associated with feature point 1431, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4705_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4705_0Roll};         /**< Classifiers associated with feature point 4705, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4705_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4705_0Roll};         /**< Classifiers associated with feature point 4705, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4705_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4705_posRoll};         /**< Classifiers associated with feature point 4705, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4705_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4705_posRoll};         /**< Classifiers associated with feature point 4705, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4705_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4705_negRoll};         /**< Classifiers associated with feature point 4705, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4705_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4705_negRoll};         /**< Classifiers associated with feature point 4705, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4705             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4705};         /**< Classifiers associated with feature point 4705, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3652_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3652_0Roll};         /**< Classifiers associated with feature point 3652, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3652_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3652_0Roll};         /**< Classifiers associated with feature point 3652, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3652_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3652_posRoll};         /**< Classifiers associated with feature point 3652, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3652_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3652_posRoll};         /**< Classifiers associated with feature point 3652, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3652_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3652_negRoll};         /**< Classifiers associated with feature point 3652, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3652_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3652_negRoll};         /**< Classifiers associated with feature point 3652, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3652             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3652};         /**< Classifiers associated with feature point 3652, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1877_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1877_0Roll};         /**< Classifiers associated with feature point 1877, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1877_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1877_0Roll};         /**< Classifiers associated with feature point 1877, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1877_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1877_posRoll};         /**< Classifiers associated with feature point 1877, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1877_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1877_posRoll};         /**< Classifiers associated with feature point 1877, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1877_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1877_negRoll};         /**< Classifiers associated with feature point 1877, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1877_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1877_negRoll};         /**< Classifiers associated with feature point 1877, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1877             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1877};         /**< Classifiers associated with feature point 1877, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_660_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_660_0Roll};         /**< Classifiers associated with feature point 660, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_660_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_660_0Roll};         /**< Classifiers associated with feature point 660, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_660_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_660_posRoll};         /**< Classifiers associated with feature point 660, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_660_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_660_posRoll};         /**< Classifiers associated with feature point 660, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_660_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_660_negRoll};         /**< Classifiers associated with feature point 660, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_660_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_660_negRoll};         /**< Classifiers associated with feature point 660, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_660              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_660};         /**< Classifiers associated with feature point 660, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4458_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4458_0Roll};         /**< Classifiers associated with feature point 4458, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4458_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4458_0Roll};         /**< Classifiers associated with feature point 4458, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4458_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4458_posRoll};         /**< Classifiers associated with feature point 4458, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4458_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4458_posRoll};         /**< Classifiers associated with feature point 4458, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4458_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4458_negRoll};         /**< Classifiers associated with feature point 4458, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4458_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4458_negRoll};         /**< Classifiers associated with feature point 4458, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4458             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4458};         /**< Classifiers associated with feature point 4458, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4597_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4597_0Roll};         /**< Classifiers associated with feature point 4597, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4597_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4597_0Roll};         /**< Classifiers associated with feature point 4597, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4597_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4597_posRoll};         /**< Classifiers associated with feature point 4597, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4597_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4597_posRoll};         /**< Classifiers associated with feature point 4597, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4597_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4597_negRoll};         /**< Classifiers associated with feature point 4597, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4597_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4597_negRoll};         /**< Classifiers associated with feature point 4597, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4597             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4597};         /**< Classifiers associated with feature point 4597, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_309_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_309_0Roll};         /**< Classifiers associated with feature point 309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_309_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_309_0Roll};         /**< Classifiers associated with feature point 309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_309_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_309_posRoll};         /**< Classifiers associated with feature point 309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_309_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_309_posRoll};         /**< Classifiers associated with feature point 309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_309_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_309_negRoll};         /**< Classifiers associated with feature point 309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_309_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_309_negRoll};         /**< Classifiers associated with feature point 309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_309              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_309};         /**< Classifiers associated with feature point 309, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1120_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1120_0Roll};         /**< Classifiers associated with feature point 1120, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1120_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1120_0Roll};         /**< Classifiers associated with feature point 1120, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1120_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1120_posRoll};         /**< Classifiers associated with feature point 1120, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1120_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1120_posRoll};         /**< Classifiers associated with feature point 1120, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1120_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1120_negRoll};         /**< Classifiers associated with feature point 1120, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1120_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1120_negRoll};         /**< Classifiers associated with feature point 1120, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1120             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1120};         /**< Classifiers associated with feature point 1120, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1155_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1155_0Roll};         /**< Classifiers associated with feature point 1155, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1155_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1155_0Roll};         /**< Classifiers associated with feature point 1155, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1155_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1155_posRoll};         /**< Classifiers associated with feature point 1155, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1155_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1155_posRoll};         /**< Classifiers associated with feature point 1155, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1155_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1155_negRoll};         /**< Classifiers associated with feature point 1155, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1155_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1155_negRoll};         /**< Classifiers associated with feature point 1155, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1155             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1155};         /**< Classifiers associated with feature point 1155, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2988_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2988_0Roll};         /**< Classifiers associated with feature point 2988, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2988_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2988_0Roll};         /**< Classifiers associated with feature point 2988, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2988_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2988_posRoll};         /**< Classifiers associated with feature point 2988, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2988_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2988_posRoll};         /**< Classifiers associated with feature point 2988, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2988_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2988_negRoll};         /**< Classifiers associated with feature point 2988, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2988_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2988_negRoll};         /**< Classifiers associated with feature point 2988, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2988             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2988};         /**< Classifiers associated with feature point 2988, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1453_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1453_0Roll};         /**< Classifiers associated with feature point 1453, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1453_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1453_0Roll};         /**< Classifiers associated with feature point 1453, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1453_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1453_posRoll};         /**< Classifiers associated with feature point 1453, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1453_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1453_posRoll};         /**< Classifiers associated with feature point 1453, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1453_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1453_negRoll};         /**< Classifiers associated with feature point 1453, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1453_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1453_negRoll};         /**< Classifiers associated with feature point 1453, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1453             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1453};         /**< Classifiers associated with feature point 1453, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2479_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2479_0Roll};         /**< Classifiers associated with feature point 2479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2479_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2479_0Roll};         /**< Classifiers associated with feature point 2479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2479_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2479_posRoll};         /**< Classifiers associated with feature point 2479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2479_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2479_posRoll};         /**< Classifiers associated with feature point 2479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2479_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2479_negRoll};         /**< Classifiers associated with feature point 2479, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2479_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2479_negRoll};         /**< Classifiers associated with feature point 2479, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2479             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2479};         /**< Classifiers associated with feature point 2479, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_50_0Roll          = {        &Frontal_MIDDLE_SVM_rough_HOG_360_50_0Roll};         /**< Classifiers associated with feature point 50, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_50_0Roll           = {         &Frontal_MIDDLE_SVM_fine_HOG_360_50_0Roll};         /**< Classifiers associated with feature point 50, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_50_posRoll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_50_posRoll};         /**< Classifiers associated with feature point 50, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_50_posRoll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_50_posRoll};         /**< Classifiers associated with feature point 50, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_50_negRoll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_50_negRoll};         /**< Classifiers associated with feature point 50, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_50_negRoll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_50_negRoll};         /**< Classifiers associated with feature point 50, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_50               = {             &Frontal_MIDDLE_SVM_fCheck_HOG_360_50};         /**< Classifiers associated with feature point 50, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2966_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2966_0Roll};         /**< Classifiers associated with feature point 2966, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2966_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2966_0Roll};         /**< Classifiers associated with feature point 2966, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2966_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2966_posRoll};         /**< Classifiers associated with feature point 2966, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2966_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2966_posRoll};         /**< Classifiers associated with feature point 2966, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2966_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2966_negRoll};         /**< Classifiers associated with feature point 2966, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2966_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2966_negRoll};         /**< Classifiers associated with feature point 2966, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2966             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2966};         /**< Classifiers associated with feature point 2966, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_397_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_397_0Roll};         /**< Classifiers associated with feature point 397, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_397_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_397_0Roll};         /**< Classifiers associated with feature point 397, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_397_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_397_posRoll};         /**< Classifiers associated with feature point 397, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_397_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_397_posRoll};         /**< Classifiers associated with feature point 397, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_397_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_397_negRoll};         /**< Classifiers associated with feature point 397, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_397_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_397_negRoll};         /**< Classifiers associated with feature point 397, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_397              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_397};         /**< Classifiers associated with feature point 397, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5627_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_5627_0Roll};         /**< Classifiers associated with feature point 5627, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5627_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_5627_0Roll};         /**< Classifiers associated with feature point 5627, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5627_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5627_posRoll};         /**< Classifiers associated with feature point 5627, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5627_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5627_posRoll};         /**< Classifiers associated with feature point 5627, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5627_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5627_negRoll};         /**< Classifiers associated with feature point 5627, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5627_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5627_negRoll};         /**< Classifiers associated with feature point 5627, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_5627             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_5627};         /**< Classifiers associated with feature point 5627, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4252_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4252_0Roll};         /**< Classifiers associated with feature point 4252, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4252_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4252_0Roll};         /**< Classifiers associated with feature point 4252, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4252_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4252_posRoll};         /**< Classifiers associated with feature point 4252, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4252_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4252_posRoll};         /**< Classifiers associated with feature point 4252, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4252_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4252_negRoll};         /**< Classifiers associated with feature point 4252, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4252_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4252_negRoll};         /**< Classifiers associated with feature point 4252, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4252             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4252};         /**< Classifiers associated with feature point 4252, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1182_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1182_0Roll};         /**< Classifiers associated with feature point 1182, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1182_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1182_0Roll};         /**< Classifiers associated with feature point 1182, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1182_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1182_posRoll};         /**< Classifiers associated with feature point 1182, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1182_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1182_posRoll};         /**< Classifiers associated with feature point 1182, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1182_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1182_negRoll};         /**< Classifiers associated with feature point 1182, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1182_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1182_negRoll};         /**< Classifiers associated with feature point 1182, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1182             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1182};         /**< Classifiers associated with feature point 1182, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1183_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1183_0Roll};         /**< Classifiers associated with feature point 1183, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1183_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1183_0Roll};         /**< Classifiers associated with feature point 1183, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1183_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1183_posRoll};         /**< Classifiers associated with feature point 1183, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1183_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1183_posRoll};         /**< Classifiers associated with feature point 1183, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1183_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1183_negRoll};         /**< Classifiers associated with feature point 1183, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1183_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1183_negRoll};         /**< Classifiers associated with feature point 1183, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1183             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1183};         /**< Classifiers associated with feature point 1183, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1443_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1443_0Roll};         /**< Classifiers associated with feature point 1443, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1443_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1443_0Roll};         /**< Classifiers associated with feature point 1443, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1443_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1443_posRoll};         /**< Classifiers associated with feature point 1443, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1443_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1443_posRoll};         /**< Classifiers associated with feature point 1443, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1443_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1443_negRoll};         /**< Classifiers associated with feature point 1443, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1443_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1443_negRoll};         /**< Classifiers associated with feature point 1443, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1443             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1443};         /**< Classifiers associated with feature point 1443, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4309_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4309_0Roll};         /**< Classifiers associated with feature point 4309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4309_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4309_0Roll};         /**< Classifiers associated with feature point 4309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4309_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4309_posRoll};         /**< Classifiers associated with feature point 4309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4309_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4309_posRoll};         /**< Classifiers associated with feature point 4309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4309_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4309_negRoll};         /**< Classifiers associated with feature point 4309, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4309_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4309_negRoll};         /**< Classifiers associated with feature point 4309, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4309             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4309};         /**< Classifiers associated with feature point 4309, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1158_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1158_0Roll};         /**< Classifiers associated with feature point 1158, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1158_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1158_0Roll};         /**< Classifiers associated with feature point 1158, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1158_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1158_posRoll};         /**< Classifiers associated with feature point 1158, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1158_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1158_posRoll};         /**< Classifiers associated with feature point 1158, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1158_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1158_negRoll};         /**< Classifiers associated with feature point 1158, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1158_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1158_negRoll};         /**< Classifiers associated with feature point 1158, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1158             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1158};         /**< Classifiers associated with feature point 1158, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2972_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2972_0Roll};         /**< Classifiers associated with feature point 2972, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2972_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2972_0Roll};         /**< Classifiers associated with feature point 2972, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2972_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2972_posRoll};         /**< Classifiers associated with feature point 2972, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2972_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2972_posRoll};         /**< Classifiers associated with feature point 2972, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2972_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2972_negRoll};         /**< Classifiers associated with feature point 2972, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2972_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2972_negRoll};         /**< Classifiers associated with feature point 2972, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2972             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2972};         /**< Classifiers associated with feature point 2972, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2539_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2539_0Roll};         /**< Classifiers associated with feature point 2539, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2539_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2539_0Roll};         /**< Classifiers associated with feature point 2539, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2539_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2539_posRoll};         /**< Classifiers associated with feature point 2539, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2539_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2539_posRoll};         /**< Classifiers associated with feature point 2539, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2539_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2539_negRoll};         /**< Classifiers associated with feature point 2539, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2539_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2539_negRoll};         /**< Classifiers associated with feature point 2539, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2539             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2539};         /**< Classifiers associated with feature point 2539, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1164_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1164_0Roll};         /**< Classifiers associated with feature point 1164, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1164_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1164_0Roll};         /**< Classifiers associated with feature point 1164, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1164_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1164_posRoll};         /**< Classifiers associated with feature point 1164, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1164_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1164_posRoll};         /**< Classifiers associated with feature point 1164, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1164_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1164_negRoll};         /**< Classifiers associated with feature point 1164, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1164_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1164_negRoll};         /**< Classifiers associated with feature point 1164, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1164             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1164};         /**< Classifiers associated with feature point 1164, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2632_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2632_0Roll};         /**< Classifiers associated with feature point 2632, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2632_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2632_0Roll};         /**< Classifiers associated with feature point 2632, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2632_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2632_posRoll};         /**< Classifiers associated with feature point 2632, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2632_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2632_posRoll};         /**< Classifiers associated with feature point 2632, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2632_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2632_negRoll};         /**< Classifiers associated with feature point 2632, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2632_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2632_negRoll};         /**< Classifiers associated with feature point 2632, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2632             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2632};         /**< Classifiers associated with feature point 2632, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3472_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3472_0Roll};         /**< Classifiers associated with feature point 3472, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3472_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3472_0Roll};         /**< Classifiers associated with feature point 3472, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3472_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3472_posRoll};         /**< Classifiers associated with feature point 3472, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3472_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3472_posRoll};         /**< Classifiers associated with feature point 3472, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3472_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3472_negRoll};         /**< Classifiers associated with feature point 3472, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3472_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3472_negRoll};         /**< Classifiers associated with feature point 3472, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3472             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3472};         /**< Classifiers associated with feature point 3472, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5468_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_5468_0Roll};         /**< Classifiers associated with feature point 5468, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5468_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_5468_0Roll};         /**< Classifiers associated with feature point 5468, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5468_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5468_posRoll};         /**< Classifiers associated with feature point 5468, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5468_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5468_posRoll};         /**< Classifiers associated with feature point 5468, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_5468_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_5468_negRoll};         /**< Classifiers associated with feature point 5468, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_5468_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_5468_negRoll};         /**< Classifiers associated with feature point 5468, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_5468             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_5468};         /**< Classifiers associated with feature point 5468, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3534_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3534_0Roll};         /**< Classifiers associated with feature point 3534, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3534_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3534_0Roll};         /**< Classifiers associated with feature point 3534, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3534_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3534_posRoll};         /**< Classifiers associated with feature point 3534, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3534_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3534_posRoll};         /**< Classifiers associated with feature point 3534, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3534_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3534_negRoll};         /**< Classifiers associated with feature point 3534, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3534_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3534_negRoll};         /**< Classifiers associated with feature point 3534, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3534             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3534};         /**< Classifiers associated with feature point 3534, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3542_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3542_0Roll};         /**< Classifiers associated with feature point 3542, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3542_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3542_0Roll};         /**< Classifiers associated with feature point 3542, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3542_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3542_posRoll};         /**< Classifiers associated with feature point 3542, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3542_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3542_posRoll};         /**< Classifiers associated with feature point 3542, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3542_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3542_negRoll};         /**< Classifiers associated with feature point 3542, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3542_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3542_negRoll};         /**< Classifiers associated with feature point 3542, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3542             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3542};         /**< Classifiers associated with feature point 3542, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3670_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3670_0Roll};         /**< Classifiers associated with feature point 3670, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3670_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3670_0Roll};         /**< Classifiers associated with feature point 3670, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3670_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3670_posRoll};         /**< Classifiers associated with feature point 3670, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3670_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3670_posRoll};         /**< Classifiers associated with feature point 3670, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3670_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3670_negRoll};         /**< Classifiers associated with feature point 3670, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3670_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3670_negRoll};         /**< Classifiers associated with feature point 3670, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3670             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3670};         /**< Classifiers associated with feature point 3670, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3815_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_3815_0Roll};         /**< Classifiers associated with feature point 3815, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3815_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_3815_0Roll};         /**< Classifiers associated with feature point 3815, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3815_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3815_posRoll};         /**< Classifiers associated with feature point 3815, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3815_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3815_posRoll};         /**< Classifiers associated with feature point 3815, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_3815_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_3815_negRoll};         /**< Classifiers associated with feature point 3815, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_3815_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_3815_negRoll};         /**< Classifiers associated with feature point 3815, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_3815             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_3815};         /**< Classifiers associated with feature point 3815, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1712_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1712_0Roll};         /**< Classifiers associated with feature point 1712, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1712_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1712_0Roll};         /**< Classifiers associated with feature point 1712, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1712_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1712_posRoll};         /**< Classifiers associated with feature point 1712, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1712_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1712_posRoll};         /**< Classifiers associated with feature point 1712, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1712_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1712_negRoll};         /**< Classifiers associated with feature point 1712, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1712_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1712_negRoll};         /**< Classifiers associated with feature point 1712, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1712             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1712};         /**< Classifiers associated with feature point 1712, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2035_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_2035_0Roll};         /**< Classifiers associated with feature point 2035, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2035_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_2035_0Roll};         /**< Classifiers associated with feature point 2035, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2035_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2035_posRoll};         /**< Classifiers associated with feature point 2035, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2035_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2035_posRoll};         /**< Classifiers associated with feature point 2035, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_2035_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_2035_negRoll};         /**< Classifiers associated with feature point 2035, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_2035_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_2035_negRoll};         /**< Classifiers associated with feature point 2035, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_2035             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_2035};         /**< Classifiers associated with feature point 2035, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1894_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1894_0Roll};         /**< Classifiers associated with feature point 1894, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1894_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1894_0Roll};         /**< Classifiers associated with feature point 1894, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1894_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1894_posRoll};         /**< Classifiers associated with feature point 1894, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1894_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1894_posRoll};         /**< Classifiers associated with feature point 1894, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1894_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1894_negRoll};         /**< Classifiers associated with feature point 1894, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1894_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1894_negRoll};         /**< Classifiers associated with feature point 1894, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1894             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1894};         /**< Classifiers associated with feature point 1894, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4968_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_4968_0Roll};         /**< Classifiers associated with feature point 4968, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4968_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_4968_0Roll};         /**< Classifiers associated with feature point 4968, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4968_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4968_posRoll};         /**< Classifiers associated with feature point 4968, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4968_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4968_posRoll};         /**< Classifiers associated with feature point 4968, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_4968_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_4968_negRoll};         /**< Classifiers associated with feature point 4968, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_4968_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_4968_negRoll};         /**< Classifiers associated with feature point 4968, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_4968             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_4968};         /**< Classifiers associated with feature point 4968, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1762_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1762_0Roll};         /**< Classifiers associated with feature point 1762, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1762_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1762_0Roll};         /**< Classifiers associated with feature point 1762, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1762_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1762_posRoll};         /**< Classifiers associated with feature point 1762, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1762_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1762_posRoll};         /**< Classifiers associated with feature point 1762, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1762_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1762_negRoll};         /**< Classifiers associated with feature point 1762, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1762_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1762_negRoll};         /**< Classifiers associated with feature point 1762, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1762             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1762};         /**< Classifiers associated with feature point 1762, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_795_0Roll         = {       &Frontal_MIDDLE_SVM_rough_HOG_360_795_0Roll};         /**< Classifiers associated with feature point 795, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_795_0Roll          = {        &Frontal_MIDDLE_SVM_fine_HOG_360_795_0Roll};         /**< Classifiers associated with feature point 795, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_795_posRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_795_posRoll};         /**< Classifiers associated with feature point 795, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_795_posRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_795_posRoll};         /**< Classifiers associated with feature point 795, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_795_negRoll       = {     &Frontal_MIDDLE_SVM_rough_HOG_360_795_negRoll};         /**< Classifiers associated with feature point 795, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_795_negRoll        = {      &Frontal_MIDDLE_SVM_fine_HOG_360_795_negRoll};         /**< Classifiers associated with feature point 795, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_795              = {            &Frontal_MIDDLE_SVM_fCheck_HOG_360_795};         /**< Classifiers associated with feature point 795, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1691_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1691_0Roll};         /**< Classifiers associated with feature point 1691, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1691_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1691_0Roll};         /**< Classifiers associated with feature point 1691, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1691_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1691_posRoll};         /**< Classifiers associated with feature point 1691, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1691_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1691_posRoll};         /**< Classifiers associated with feature point 1691, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1691_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1691_negRoll};         /**< Classifiers associated with feature point 1691, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1691_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1691_negRoll};         /**< Classifiers associated with feature point 1691, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1691             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1691};         /**< Classifiers associated with feature point 1691, for validation algorithm. */
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1766_0Roll        = {      &Frontal_MIDDLE_SVM_rough_HOG_360_1766_0Roll};         /**< Classifiers associated with feature point 1766, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1766_0Roll         = {       &Frontal_MIDDLE_SVM_fine_HOG_360_1766_0Roll};         /**< Classifiers associated with feature point 1766, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1766_posRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1766_posRoll};         /**< Classifiers associated with feature point 1766, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1766_posRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1766_posRoll};         /**< Classifiers associated with feature point 1766, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_rough_1766_negRoll      = {    &Frontal_MIDDLE_SVM_rough_HOG_360_1766_negRoll};         /**< Classifiers associated with feature point 1766, for rough step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fine_1766_negRoll       = {     &Frontal_MIDDLE_SVM_fine_HOG_360_1766_negRoll};         /**< Classifiers associated with feature point 1766, for fine step.*/
static const CLASSIFIERS Frontal_MIDDLE_Classifiers_fCheck_1766             = {           &Frontal_MIDDLE_SVM_fCheck_HOG_360_1766};         /**< Classifiers associated with feature point 1766, for validation algorithm. */

static FEATURE_POINT Frontal_MIDDLE_FEATURE_POINTS_MODEL[] = {
   {
       2791,
       LEFT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_2791_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2791_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2791_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2791_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2791_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2791_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2791,          
       Frontal_MIDDLE_PCA_POINT + 0
   },
   {
       3273,
       LEFT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_3273_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3273_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3273_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3273_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3273_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3273_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3273,          
       Frontal_MIDDLE_PCA_POINT + 1
   },
   {
       3308,
       LEFT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_3308_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3308_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3308_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3308_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3308_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3308_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3308,          
       Frontal_MIDDLE_PCA_POINT + 2
   },
   {
       5264,
       LEFT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_5264_0Roll,             &Frontal_MIDDLE_Classifiers_fine_5264_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_5264_posRoll,           &Frontal_MIDDLE_Classifiers_fine_5264_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_5264_negRoll,           &Frontal_MIDDLE_Classifiers_fine_5264_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_5264,          
       Frontal_MIDDLE_PCA_POINT + 3
   },
   {
       962,
       RIGHT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_962_0Roll,              &Frontal_MIDDLE_Classifiers_fine_962_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_962_posRoll,            &Frontal_MIDDLE_Classifiers_fine_962_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_962_negRoll,            &Frontal_MIDDLE_Classifiers_fine_962_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_962,           
       Frontal_MIDDLE_PCA_POINT + 4
   },
   {
       4746,
       RIGHT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_4746_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4746_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4746_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4746_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4746_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4746_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4746,          
       Frontal_MIDDLE_PCA_POINT + 5
   },
   {
       1491,
       RIGHT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_1491_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1491_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1491_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1491_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1491_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1491_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1491,          
       Frontal_MIDDLE_PCA_POINT + 6
   },
   {
       1531,
       RIGHT_EYEBROW,
       &Frontal_MIDDLE_Classifiers_rough_1531_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1531_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1531_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1531_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1531_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1531_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1531,          
       Frontal_MIDDLE_PCA_POINT + 7
   },
   {
       2801,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_2801_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2801_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2801_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2801_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2801_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2801_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2801,          
       Frontal_MIDDLE_PCA_POINT + 8
   },
   {
       4479,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_4479_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4479_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4479_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4479_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4479_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4479_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4479,          
       Frontal_MIDDLE_PCA_POINT + 9
   },
   {
       4581,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_4581_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4581_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4581_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4581_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4581_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4581_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4581,          
       Frontal_MIDDLE_PCA_POINT + 10
   },
   {
       5281,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_5281_0Roll,             &Frontal_MIDDLE_Classifiers_fine_5281_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_5281_posRoll,           &Frontal_MIDDLE_Classifiers_fine_5281_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_5281_negRoll,           &Frontal_MIDDLE_Classifiers_fine_5281_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_5281,          
       Frontal_MIDDLE_PCA_POINT + 11
   },
   {
       520,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_520_0Roll,              &Frontal_MIDDLE_Classifiers_fine_520_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_520_posRoll,            &Frontal_MIDDLE_Classifiers_fine_520_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_520_negRoll,            &Frontal_MIDDLE_Classifiers_fine_520_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_520,           
       Frontal_MIDDLE_PCA_POINT + 12
   },
   {
       5274,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_5274_0Roll,             &Frontal_MIDDLE_Classifiers_fine_5274_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_5274_posRoll,           &Frontal_MIDDLE_Classifiers_fine_5274_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_5274_negRoll,           &Frontal_MIDDLE_Classifiers_fine_5274_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_5274,          
       Frontal_MIDDLE_PCA_POINT + 13
   },
   {
       2871,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_2871_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2871_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2871_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2871_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2871_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2871_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2871,          
       Frontal_MIDDLE_PCA_POINT + 14
   },
   {
       2872,
       LEFT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_2872_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2872_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2872_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2872_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2872_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2872_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2872,          
       Frontal_MIDDLE_PCA_POINT + 15
   },
   {
       4352,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_4352_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4352_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4352_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4352_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4352_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4352_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4352,          
       Frontal_MIDDLE_PCA_POINT + 16
   },
   {
       4755,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_4755_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4755_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4755_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4755_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4755_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4755_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4755,          
       Frontal_MIDDLE_PCA_POINT + 17
   },
   {
       980,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_980_0Roll,              &Frontal_MIDDLE_Classifiers_fine_980_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_980_posRoll,            &Frontal_MIDDLE_Classifiers_fine_980_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_980_negRoll,            &Frontal_MIDDLE_Classifiers_fine_980_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_980,           
       Frontal_MIDDLE_PCA_POINT + 18
   },
   {
       325,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_325_0Roll,              &Frontal_MIDDLE_Classifiers_fine_325_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_325_posRoll,            &Frontal_MIDDLE_Classifiers_fine_325_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_325_negRoll,            &Frontal_MIDDLE_Classifiers_fine_325_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_325,           
       Frontal_MIDDLE_PCA_POINT + 19
   },
   {
       1047,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_1047_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1047_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1047_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1047_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1047_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1047_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1047,          
       Frontal_MIDDLE_PCA_POINT + 20
   },
   {
       4409,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_4409_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4409_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4409_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4409_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4409_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4409_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4409,          
       Frontal_MIDDLE_PCA_POINT + 21
   },
   {
       1050,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_1050_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1050_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1050_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1050_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1050_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1050_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1050,          
       Frontal_MIDDLE_PCA_POINT + 22
   },
   {
       973,
       RIGHT_EYE,
       &Frontal_MIDDLE_Classifiers_rough_973_0Roll,              &Frontal_MIDDLE_Classifiers_fine_973_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_973_posRoll,            &Frontal_MIDDLE_Classifiers_fine_973_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_973_negRoll,            &Frontal_MIDDLE_Classifiers_fine_973_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_973,           
       Frontal_MIDDLE_PCA_POINT + 23
   },
   {
       4879,
       NOSE_BRIDGE,
       &Frontal_MIDDLE_Classifiers_rough_4879_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4879_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4879_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4879_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4879_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4879_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4879,          
       Frontal_MIDDLE_PCA_POINT + 24
   },
   {
       1423,
       NOSE_BRIDGE,
       &Frontal_MIDDLE_Classifiers_rough_1423_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1423_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1423_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1423_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1423_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1423_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1423,          
       Frontal_MIDDLE_PCA_POINT + 25
   },
   {
       1852,
       NOSE_BRIDGE,
       &Frontal_MIDDLE_Classifiers_rough_1852_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1852_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1852_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1852_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1852_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1852_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1852,          
       Frontal_MIDDLE_PCA_POINT + 26
   },
   {
       4669,
       NOSE_BRIDGE,
       &Frontal_MIDDLE_Classifiers_rough_4669_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4669_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4669_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4669_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4669_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4669_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4669,          
       Frontal_MIDDLE_PCA_POINT + 27
   },
   {
       1431,
       NOSE_BRIDGE,
       &Frontal_MIDDLE_Classifiers_rough_1431_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1431_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1431_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1431_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1431_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1431_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1431,          
       Frontal_MIDDLE_PCA_POINT + 28
   },
   {
       4705,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_4705_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4705_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4705_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4705_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4705_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4705_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4705,          
       Frontal_MIDDLE_PCA_POINT + 29
   },
   {
       3652,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_3652_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3652_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3652_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3652_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3652_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3652_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3652,          
       Frontal_MIDDLE_PCA_POINT + 30
   },
   {
       1877,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_1877_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1877_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1877_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1877_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1877_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1877_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1877,          
       Frontal_MIDDLE_PCA_POINT + 31
   },
   {
       660,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_660_0Roll,              &Frontal_MIDDLE_Classifiers_fine_660_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_660_posRoll,            &Frontal_MIDDLE_Classifiers_fine_660_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_660_negRoll,            &Frontal_MIDDLE_Classifiers_fine_660_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_660,           
       Frontal_MIDDLE_PCA_POINT + 32
   },
   {
       4458,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_4458_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4458_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4458_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4458_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4458_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4458_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4458,          
       Frontal_MIDDLE_PCA_POINT + 33
   },
   {
       4597,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_4597_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4597_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4597_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4597_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4597_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4597_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4597,          
       Frontal_MIDDLE_PCA_POINT + 34
   },
   {
       309,
       NOSE_BASE,
       &Frontal_MIDDLE_Classifiers_rough_309_0Roll,              &Frontal_MIDDLE_Classifiers_fine_309_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_309_posRoll,            &Frontal_MIDDLE_Classifiers_fine_309_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_309_negRoll,            &Frontal_MIDDLE_Classifiers_fine_309_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_309,           
       Frontal_MIDDLE_PCA_POINT + 35
   },
   {
       1120,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1120_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1120_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1120_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1120_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1120_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1120_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1120,          
       Frontal_MIDDLE_PCA_POINT + 36
   },
   {
       1155,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1155_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1155_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1155_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1155_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1155_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1155_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1155,          
       Frontal_MIDDLE_PCA_POINT + 37
   },
   {
       2988,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_2988_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2988_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2988_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2988_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2988_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2988_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2988,          
       Frontal_MIDDLE_PCA_POINT + 38
   },
   {
       1453,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1453_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1453_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1453_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1453_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1453_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1453_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1453,          
       Frontal_MIDDLE_PCA_POINT + 39
   },
   {
       2479,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_2479_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2479_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2479_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2479_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2479_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2479_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2479,          
       Frontal_MIDDLE_PCA_POINT + 40
   },
   {
       50,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_50_0Roll,               &Frontal_MIDDLE_Classifiers_fine_50_0Roll,        
       &Frontal_MIDDLE_Classifiers_rough_50_posRoll,             &Frontal_MIDDLE_Classifiers_fine_50_posRoll,      
       &Frontal_MIDDLE_Classifiers_rough_50_negRoll,             &Frontal_MIDDLE_Classifiers_fine_50_negRoll,      
       &Frontal_MIDDLE_Classifiers_fCheck_50,            
       Frontal_MIDDLE_PCA_POINT + 41
   },
   {
       2966,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_2966_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2966_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2966_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2966_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2966_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2966_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2966,          
       Frontal_MIDDLE_PCA_POINT + 42
   },
   {
       397,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_397_0Roll,              &Frontal_MIDDLE_Classifiers_fine_397_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_397_posRoll,            &Frontal_MIDDLE_Classifiers_fine_397_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_397_negRoll,            &Frontal_MIDDLE_Classifiers_fine_397_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_397,           
       Frontal_MIDDLE_PCA_POINT + 43
   },
   {
       5627,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_5627_0Roll,             &Frontal_MIDDLE_Classifiers_fine_5627_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_5627_posRoll,           &Frontal_MIDDLE_Classifiers_fine_5627_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_5627_negRoll,           &Frontal_MIDDLE_Classifiers_fine_5627_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_5627,          
       Frontal_MIDDLE_PCA_POINT + 44
   },
   {
       4252,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_4252_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4252_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4252_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4252_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4252_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4252_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4252,          
       Frontal_MIDDLE_PCA_POINT + 45
   },
   {
       1182,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1182_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1182_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1182_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1182_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1182_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1182_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1182,          
       Frontal_MIDDLE_PCA_POINT + 46
   },
   {
       1183,
       OUTER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1183_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1183_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1183_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1183_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1183_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1183_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1183,          
       Frontal_MIDDLE_PCA_POINT + 47
   },
   {
       1443,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1443_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1443_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1443_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1443_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1443_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1443_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1443,          
       Frontal_MIDDLE_PCA_POINT + 48
   },
   {
       4309,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_4309_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4309_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4309_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4309_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4309_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4309_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4309,          
       Frontal_MIDDLE_PCA_POINT + 49
   },
   {
       1158,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1158_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1158_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1158_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1158_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1158_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1158_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1158,          
       Frontal_MIDDLE_PCA_POINT + 50
   },
   {
       2972,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_2972_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2972_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2972_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2972_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2972_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2972_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2972,          
       Frontal_MIDDLE_PCA_POINT + 51
   },
   {
       2539,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_2539_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2539_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2539_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2539_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2539_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2539_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2539,          
       Frontal_MIDDLE_PCA_POINT + 52
   },
   {
       1164,
       INNER_MOUTH,
       &Frontal_MIDDLE_Classifiers_rough_1164_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1164_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1164_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1164_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1164_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1164_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1164,          
       Frontal_MIDDLE_PCA_POINT + 53
   },
   {
       2632,
       MIDDLE_JAW_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_2632_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2632_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2632_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2632_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2632_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2632_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2632,          
       Frontal_MIDDLE_PCA_POINT + 54
   },
   {
       3472,
       MIDDLE_JAW_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_3472_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3472_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3472_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3472_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3472_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3472_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3472,          
       Frontal_MIDDLE_PCA_POINT + 55
   },
   {
       5468,
       MIDDLE_JAW_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_5468_0Roll,             &Frontal_MIDDLE_Classifiers_fine_5468_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_5468_posRoll,           &Frontal_MIDDLE_Classifiers_fine_5468_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_5468_negRoll,           &Frontal_MIDDLE_Classifiers_fine_5468_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_5468,          
       Frontal_MIDDLE_PCA_POINT + 56
   },
   {
       3534,
       MIDDLE_JAW_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_3534_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3534_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3534_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3534_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3534_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3534_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3534,          
       Frontal_MIDDLE_PCA_POINT + 57
   },
   {
       3542,
       MIDDLE_JAW_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_3542_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3542_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3542_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3542_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3542_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3542_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3542,          
       Frontal_MIDDLE_PCA_POINT + 58
   },
   {
       3670,
       EXTENDED_CHIN_OUT_MIDDLE_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_3670_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3670_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3670_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3670_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3670_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3670_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3670,          
       Frontal_MIDDLE_PCA_POINT + 59
   },
   {
       3815,
       EXTENDED_CHIN_OUT_MIDDLE_LEFT,
       &Frontal_MIDDLE_Classifiers_rough_3815_0Roll,             &Frontal_MIDDLE_Classifiers_fine_3815_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_3815_posRoll,           &Frontal_MIDDLE_Classifiers_fine_3815_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_3815_negRoll,           &Frontal_MIDDLE_Classifiers_fine_3815_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_3815,          
       Frontal_MIDDLE_PCA_POINT + 60
   },
   {
       1712,
       CHIN,
       &Frontal_MIDDLE_Classifiers_rough_1712_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1712_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1712_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1712_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1712_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1712_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1712,          
       Frontal_MIDDLE_PCA_POINT + 61
   },
   {
       2035,
       EXTENDED_CHIN_MIDDLE_OUT_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_2035_0Roll,             &Frontal_MIDDLE_Classifiers_fine_2035_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_2035_posRoll,           &Frontal_MIDDLE_Classifiers_fine_2035_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_2035_negRoll,           &Frontal_MIDDLE_Classifiers_fine_2035_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_2035,          
       Frontal_MIDDLE_PCA_POINT + 62
   },
   {
       1894,
       EXTENDED_CHIN_MIDDLE_OUT_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_1894_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1894_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1894_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1894_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1894_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1894_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1894,          
       Frontal_MIDDLE_PCA_POINT + 63
   },
   {
       4968,
       MIDDLE_JAW_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_4968_0Roll,             &Frontal_MIDDLE_Classifiers_fine_4968_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_4968_posRoll,           &Frontal_MIDDLE_Classifiers_fine_4968_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_4968_negRoll,           &Frontal_MIDDLE_Classifiers_fine_4968_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_4968,          
       Frontal_MIDDLE_PCA_POINT + 64
   },
   {
       1762,
       MIDDLE_JAW_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_1762_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1762_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1762_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1762_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1762_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1762_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1762,          
       Frontal_MIDDLE_PCA_POINT + 65
   },
   {
       795,
       MIDDLE_JAW_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_795_0Roll,              &Frontal_MIDDLE_Classifiers_fine_795_0Roll,       
       &Frontal_MIDDLE_Classifiers_rough_795_posRoll,            &Frontal_MIDDLE_Classifiers_fine_795_posRoll,     
       &Frontal_MIDDLE_Classifiers_rough_795_negRoll,            &Frontal_MIDDLE_Classifiers_fine_795_negRoll,     
       &Frontal_MIDDLE_Classifiers_fCheck_795,           
       Frontal_MIDDLE_PCA_POINT + 66
   },
   {
       1691,
       MIDDLE_JAW_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_1691_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1691_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1691_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1691_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1691_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1691_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1691,          
       Frontal_MIDDLE_PCA_POINT + 67
   },
   {
       1766,
       MIDDLE_JAW_RIGHT,
       &Frontal_MIDDLE_Classifiers_rough_1766_0Roll,             &Frontal_MIDDLE_Classifiers_fine_1766_0Roll,      
       &Frontal_MIDDLE_Classifiers_rough_1766_posRoll,           &Frontal_MIDDLE_Classifiers_fine_1766_posRoll,    
       &Frontal_MIDDLE_Classifiers_rough_1766_negRoll,           &Frontal_MIDDLE_Classifiers_fine_1766_negRoll,    
       &Frontal_MIDDLE_Classifiers_fCheck_1766,          
       Frontal_MIDDLE_PCA_POINT + 68
   },
};         /**< Set of feature points for face class Frontal_MIDDLE. */



static const FACE_CLASS Frontal_MIDDLE_Class = {
   Frontal_MIDDLE,
   "Frontal_MIDDLE",
   MIDDLE_YAW | MIDDLE_PITCH,
   {SP1_Right_MIDDLE, SP1_Right_UP1, Frontal_UP1, SP1_Left_UP1, SP1_Left_MIDDLE, SP1_Left_DOWN1, Frontal_DOWN1, SP1_Right_DOWN1},
   {-10, 10},
   {-20, 20},
   {Frontal_MIDDLE_FEATURE_POINTS_MODEL, 69},
   {
       (GT_POINT*)Frontal_MIDDLE_FCheck_coordinates,
       Frontal_MIDDLE_FCheck_Triangles,
       Frontal_MIDDLE_FCheck_borderElements,
       89,
       156,
       20,
   },
   69,
   48,
   Frontal_MIDDLE_evalues,
   Frontal_MIDDLE_elimit,
};         /**< Defined information for face class Frontal_MIDDLE.*/

/** @} */
#endif /* Frontal_MIDDLE */
